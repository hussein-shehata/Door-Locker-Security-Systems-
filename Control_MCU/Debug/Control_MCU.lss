
Control_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000209e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  0000209e  00002132  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000014  0080007a  0080007a  0000214c  2**0
                  ALLOC
  3 .stab         000023f4  00000000  00000000  0000214c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012c9  00000000  00000000  00004540  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005809  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005949  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007702  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000085ed  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000939c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  000094fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009789  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00009f57  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 be 0d 	jmp	0x1b7c	; 0x1b7c <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e9       	ldi	r30, 0x9E	; 158
      68:	f0 e2       	ldi	r31, 0x20	; 32
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 38       	cpi	r26, 0x8E	; 142
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c0 05 	call	0xb80	; 0xb80 <main>
      8a:	0c 94 4d 10 	jmp	0x209a	; 0x209a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 16 10 	jmp	0x202c	; 0x202c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 16 10 	jmp	0x202c	; 0x202c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 32 10 	jmp	0x2064	; 0x2064 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 22 10 	jmp	0x2044	; 0x2044 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 3e 10 	jmp	0x207c	; 0x207c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 26 10 	jmp	0x204c	; 0x204c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 42 10 	jmp	0x2084	; 0x2084 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <buzzer_open>:
#include "gpio.h"

/* Description :
 * this function is responsible about triggering the buzzer to give alarm
 */
void buzzer_open(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	 GPIO_setupPinDirection(BUZZER_PORT_ID,BUZZER_PIN_ID,PIN_OUTPUT);
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_setupPinDirection>
	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_HIGH);
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
}
     b62:	cf 91       	pop	r28
     b64:	df 91       	pop	r29
     b66:	08 95       	ret

00000b68 <buzzer_close>:

/* Description :
 * this function is responsible about stopping the buzzer
 */
void buzzer_close(){
     b68:	df 93       	push	r29
     b6a:	cf 93       	push	r28
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	 GPIO_writePin(BUZZER_PORT_ID,BUZZER_PIN_ID,LOGIC_LOW);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
}
     b7a:	cf 91       	pop	r28
     b7c:	df 91       	pop	r29
     b7e:	08 95       	ret

00000b80 <main>:
/*flags to control the opening and closing door operations*/
uint8 open_door_flag=0;
uint8 hold_door_flag=0;
uint8 close_door_flag=0;

int main(){
     b80:	df 93       	push	r29
     b82:	cf 93       	push	r28
     b84:	0f 92       	push	r0
     b86:	cd b7       	in	r28, 0x3d	; 61
     b88:	de b7       	in	r29, 0x3e	; 62
	drivers_init();
     b8a:	0e 94 e9 05 	call	0xbd2	; 0xbd2 <drivers_init>
uint8 command;
SREG |=(1<<7);  /* enable global interrupt */
     b8e:	af e5       	ldi	r26, 0x5F	; 95
     b90:	b0 e0       	ldi	r27, 0x00	; 0
     b92:	ef e5       	ldi	r30, 0x5F	; 95
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	80 81       	ld	r24, Z
     b98:	80 68       	ori	r24, 0x80	; 128
     b9a:	8c 93       	st	X, r24
	while(1){
		command=UART_recieveByte(); /* Receive the command from the interface MCU */
     b9c:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <UART_recieveByte>
     ba0:	89 83       	std	Y+1, r24	; 0x01
/* checks what command did the interface sent */
		if(command == CREATE_PASSWORD)
     ba2:	89 81       	ldd	r24, Y+1	; 0x01
     ba4:	85 30       	cpi	r24, 0x05	; 5
     ba6:	19 f4       	brne	.+6      	; 0xbae <main+0x2e>
			create_password();
     ba8:	0e 94 54 07 	call	0xea8	; 0xea8 <create_password>
     bac:	f7 cf       	rjmp	.-18     	; 0xb9c <main+0x1c>

		else if(command == CHECK_PASSWORD)
     bae:	89 81       	ldd	r24, Y+1	; 0x01
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	19 f4       	brne	.+6      	; 0xbba <main+0x3a>
			check_password();
     bb4:	0e 94 77 07 	call	0xeee	; 0xeee <check_password>
     bb8:	f1 cf       	rjmp	.-30     	; 0xb9c <main+0x1c>
		else if(command ==OPEN_DOOR)
     bba:	89 81       	ldd	r24, Y+1	; 0x01
     bbc:	85 31       	cpi	r24, 0x15	; 21
     bbe:	19 f4       	brne	.+6      	; 0xbc6 <main+0x46>
			open_door();
     bc0:	0e 94 8e 08 	call	0x111c	; 0x111c <open_door>
     bc4:	eb cf       	rjmp	.-42     	; 0xb9c <main+0x1c>
		else if(command==THIEF)
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	89 31       	cpi	r24, 0x19	; 25
     bca:	41 f7       	brne	.-48     	; 0xb9c <main+0x1c>
			thief();
     bcc:	0e 94 c4 08 	call	0x1188	; 0x1188 <thief>
     bd0:	e5 cf       	rjmp	.-54     	; 0xb9c <main+0x1c>

00000bd2 <drivers_init>:
 *******************************************************************************/

/*Description :
 * initialize all used drivers
 */
void drivers_init(){
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	cd b7       	in	r28, 0x3d	; 61
     bd8:	de b7       	in	r29, 0x3e	; 62
	UART_init(&UartConfig);
     bda:	88 e6       	ldi	r24, 0x68	; 104
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 bb 0e 	call	0x1d76	; 0x1d76 <UART_init>
	TWI_init(&myTWIconfig);
     be2:	84 e7       	ldi	r24, 0x74	; 116
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 1a 0d 	call	0x1a34	; 0x1a34 <TWI_init>
	DcMotor_init();
     bea:	0e 94 d5 08 	call	0x11aa	; 0x11aa <DcMotor_init>
}
     bee:	cf 91       	pop	r28
     bf0:	df 91       	pop	r29
     bf2:	08 95       	ret

00000bf4 <store_password>:
/*Description :
 * write the received password in the EEPROM
 */
void store_password(){
     bf4:	df 93       	push	r29
     bf6:	cf 93       	push	r28
     bf8:	cd b7       	in	r28, 0x3d	; 61
     bfa:	de b7       	in	r29, 0x3e	; 62
     bfc:	2f 97       	sbiw	r28, 0x0f	; 15
     bfe:	0f b6       	in	r0, 0x3f	; 63
     c00:	f8 94       	cli
     c02:	de bf       	out	0x3e, r29	; 62
     c04:	0f be       	out	0x3f, r0	; 63
     c06:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	for(i=0;i<NO_OF_PASSWORD_LETTERS;i++){
     c08:	1f 86       	std	Y+15, r1	; 0x0f
     c0a:	83 c0       	rjmp	.+262    	; 0xd12 <store_password+0x11e>
		EEPROM_writeByte((EEPROM_BASE_ADDRESS+i),key[i]);
     c0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     c0e:	48 2f       	mov	r20, r24
     c10:	50 e0       	ldi	r21, 0x00	; 0
     c12:	8f 85       	ldd	r24, Y+15	; 0x0f
     c14:	88 2f       	mov	r24, r24
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	ec 57       	subi	r30, 0x7C	; 124
     c1c:	ff 4f       	sbci	r31, 0xFF	; 255
     c1e:	20 81       	ld	r18, Z
     c20:	ca 01       	movw	r24, r20
     c22:	62 2f       	mov	r22, r18
     c24:	0e 94 3b 09 	call	0x1276	; 0x1276 <EEPROM_writeByte>
     c28:	80 e0       	ldi	r24, 0x00	; 0
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	a0 e2       	ldi	r26, 0x20	; 32
     c2e:	b1 e4       	ldi	r27, 0x41	; 65
     c30:	8b 87       	std	Y+11, r24	; 0x0b
     c32:	9c 87       	std	Y+12, r25	; 0x0c
     c34:	ad 87       	std	Y+13, r26	; 0x0d
     c36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c38:	6b 85       	ldd	r22, Y+11	; 0x0b
     c3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     c3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e4       	ldi	r19, 0x40	; 64
     c44:	4c e9       	ldi	r20, 0x9C	; 156
     c46:	56 e4       	ldi	r21, 0x46	; 70
     c48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c4c:	dc 01       	movw	r26, r24
     c4e:	cb 01       	movw	r24, r22
     c50:	8f 83       	std	Y+7, r24	; 0x07
     c52:	98 87       	std	Y+8, r25	; 0x08
     c54:	a9 87       	std	Y+9, r26	; 0x09
     c56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c58:	6f 81       	ldd	r22, Y+7	; 0x07
     c5a:	78 85       	ldd	r23, Y+8	; 0x08
     c5c:	89 85       	ldd	r24, Y+9	; 0x09
     c5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c60:	20 e0       	ldi	r18, 0x00	; 0
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	40 e8       	ldi	r20, 0x80	; 128
     c66:	5f e3       	ldi	r21, 0x3F	; 63
     c68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c6c:	88 23       	and	r24, r24
     c6e:	2c f4       	brge	.+10     	; 0xc7a <store_password+0x86>
		__ticks = 1;
     c70:	81 e0       	ldi	r24, 0x01	; 1
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	9e 83       	std	Y+6, r25	; 0x06
     c76:	8d 83       	std	Y+5, r24	; 0x05
     c78:	3f c0       	rjmp	.+126    	; 0xcf8 <store_password+0x104>
	else if (__tmp > 65535)
     c7a:	6f 81       	ldd	r22, Y+7	; 0x07
     c7c:	78 85       	ldd	r23, Y+8	; 0x08
     c7e:	89 85       	ldd	r24, Y+9	; 0x09
     c80:	9a 85       	ldd	r25, Y+10	; 0x0a
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	3f ef       	ldi	r19, 0xFF	; 255
     c86:	4f e7       	ldi	r20, 0x7F	; 127
     c88:	57 e4       	ldi	r21, 0x47	; 71
     c8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c8e:	18 16       	cp	r1, r24
     c90:	4c f5       	brge	.+82     	; 0xce4 <store_password+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c92:	6b 85       	ldd	r22, Y+11	; 0x0b
     c94:	7c 85       	ldd	r23, Y+12	; 0x0c
     c96:	8d 85       	ldd	r24, Y+13	; 0x0d
     c98:	9e 85       	ldd	r25, Y+14	; 0x0e
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	40 e2       	ldi	r20, 0x20	; 32
     ca0:	51 e4       	ldi	r21, 0x41	; 65
     ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	bc 01       	movw	r22, r24
     cac:	cd 01       	movw	r24, r26
     cae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cb2:	dc 01       	movw	r26, r24
     cb4:	cb 01       	movw	r24, r22
     cb6:	9e 83       	std	Y+6, r25	; 0x06
     cb8:	8d 83       	std	Y+5, r24	; 0x05
     cba:	0f c0       	rjmp	.+30     	; 0xcda <store_password+0xe6>
     cbc:	80 ed       	ldi	r24, 0xD0	; 208
     cbe:	97 e0       	ldi	r25, 0x07	; 7
     cc0:	9c 83       	std	Y+4, r25	; 0x04
     cc2:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc4:	8b 81       	ldd	r24, Y+3	; 0x03
     cc6:	9c 81       	ldd	r25, Y+4	; 0x04
     cc8:	01 97       	sbiw	r24, 0x01	; 1
     cca:	f1 f7       	brne	.-4      	; 0xcc8 <store_password+0xd4>
     ccc:	9c 83       	std	Y+4, r25	; 0x04
     cce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd0:	8d 81       	ldd	r24, Y+5	; 0x05
     cd2:	9e 81       	ldd	r25, Y+6	; 0x06
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	9e 83       	std	Y+6, r25	; 0x06
     cd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cda:	8d 81       	ldd	r24, Y+5	; 0x05
     cdc:	9e 81       	ldd	r25, Y+6	; 0x06
     cde:	00 97       	sbiw	r24, 0x00	; 0
     ce0:	69 f7       	brne	.-38     	; 0xcbc <store_password+0xc8>
     ce2:	14 c0       	rjmp	.+40     	; 0xd0c <store_password+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ce4:	6f 81       	ldd	r22, Y+7	; 0x07
     ce6:	78 85       	ldd	r23, Y+8	; 0x08
     ce8:	89 85       	ldd	r24, Y+9	; 0x09
     cea:	9a 85       	ldd	r25, Y+10	; 0x0a
     cec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf0:	dc 01       	movw	r26, r24
     cf2:	cb 01       	movw	r24, r22
     cf4:	9e 83       	std	Y+6, r25	; 0x06
     cf6:	8d 83       	std	Y+5, r24	; 0x05
     cf8:	8d 81       	ldd	r24, Y+5	; 0x05
     cfa:	9e 81       	ldd	r25, Y+6	; 0x06
     cfc:	9a 83       	std	Y+2, r25	; 0x02
     cfe:	89 83       	std	Y+1, r24	; 0x01
     d00:	89 81       	ldd	r24, Y+1	; 0x01
     d02:	9a 81       	ldd	r25, Y+2	; 0x02
     d04:	01 97       	sbiw	r24, 0x01	; 1
     d06:	f1 f7       	brne	.-4      	; 0xd04 <store_password+0x110>
     d08:	9a 83       	std	Y+2, r25	; 0x02
     d0a:	89 83       	std	Y+1, r24	; 0x01
/*Description :
 * write the received password in the EEPROM
 */
void store_password(){
	uint8 i;
	for(i=0;i<NO_OF_PASSWORD_LETTERS;i++){
     d0c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d0e:	8f 5f       	subi	r24, 0xFF	; 255
     d10:	8f 87       	std	Y+15, r24	; 0x0f
     d12:	8f 85       	ldd	r24, Y+15	; 0x0f
     d14:	85 30       	cpi	r24, 0x05	; 5
     d16:	08 f4       	brcc	.+2      	; 0xd1a <store_password+0x126>
     d18:	79 cf       	rjmp	.-270    	; 0xc0c <store_password+0x18>
		EEPROM_writeByte((EEPROM_BASE_ADDRESS+i),key[i]);
		_delay_ms(10);
	}
}
     d1a:	2f 96       	adiw	r28, 0x0f	; 15
     d1c:	0f b6       	in	r0, 0x3f	; 63
     d1e:	f8 94       	cli
     d20:	de bf       	out	0x3e, r29	; 62
     d22:	0f be       	out	0x3f, r0	; 63
     d24:	cd bf       	out	0x3d, r28	; 61
     d26:	cf 91       	pop	r28
     d28:	df 91       	pop	r29
     d2a:	08 95       	ret

00000d2c <read_password>:
/*Description:
 * function used to check whether the input password "key2" is equal to the one which is saved or not
 */
void read_password(){
     d2c:	df 93       	push	r29
     d2e:	cf 93       	push	r28
     d30:	cd b7       	in	r28, 0x3d	; 61
     d32:	de b7       	in	r29, 0x3e	; 62
     d34:	64 97       	sbiw	r28, 0x14	; 20
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	uint8 value[5];
/* this for loop is responsible for reading the value in the EEPROM and write it the value array */
	for(i=0;i<NO_OF_PASSWORD_LETTERS;i++){
     d40:	1f 86       	std	Y+15, r1	; 0x0f
     d42:	84 c0       	rjmp	.+264    	; 0xe4c <read_password+0x120>
		EEPROM_readByte((EEPROM_BASE_ADDRESS+i),&value[i]);
     d44:	8f 85       	ldd	r24, Y+15	; 0x0f
     d46:	48 2f       	mov	r20, r24
     d48:	50 e0       	ldi	r21, 0x00	; 0
     d4a:	8f 85       	ldd	r24, Y+15	; 0x0f
     d4c:	88 2f       	mov	r24, r24
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	9e 01       	movw	r18, r28
     d52:	20 5f       	subi	r18, 0xF0	; 240
     d54:	3f 4f       	sbci	r19, 0xFF	; 255
     d56:	28 0f       	add	r18, r24
     d58:	39 1f       	adc	r19, r25
     d5a:	ca 01       	movw	r24, r20
     d5c:	b9 01       	movw	r22, r18
     d5e:	0e 94 7c 09 	call	0x12f8	; 0x12f8 <EEPROM_readByte>
     d62:	80 e0       	ldi	r24, 0x00	; 0
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	a0 e2       	ldi	r26, 0x20	; 32
     d68:	b1 e4       	ldi	r27, 0x41	; 65
     d6a:	8b 87       	std	Y+11, r24	; 0x0b
     d6c:	9c 87       	std	Y+12, r25	; 0x0c
     d6e:	ad 87       	std	Y+13, r26	; 0x0d
     d70:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d72:	6b 85       	ldd	r22, Y+11	; 0x0b
     d74:	7c 85       	ldd	r23, Y+12	; 0x0c
     d76:	8d 85       	ldd	r24, Y+13	; 0x0d
     d78:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7a:	20 e0       	ldi	r18, 0x00	; 0
     d7c:	30 e4       	ldi	r19, 0x40	; 64
     d7e:	4c e9       	ldi	r20, 0x9C	; 156
     d80:	56 e4       	ldi	r21, 0x46	; 70
     d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d86:	dc 01       	movw	r26, r24
     d88:	cb 01       	movw	r24, r22
     d8a:	8f 83       	std	Y+7, r24	; 0x07
     d8c:	98 87       	std	Y+8, r25	; 0x08
     d8e:	a9 87       	std	Y+9, r26	; 0x09
     d90:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d92:	6f 81       	ldd	r22, Y+7	; 0x07
     d94:	78 85       	ldd	r23, Y+8	; 0x08
     d96:	89 85       	ldd	r24, Y+9	; 0x09
     d98:	9a 85       	ldd	r25, Y+10	; 0x0a
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e8       	ldi	r20, 0x80	; 128
     da0:	5f e3       	ldi	r21, 0x3F	; 63
     da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     da6:	88 23       	and	r24, r24
     da8:	2c f4       	brge	.+10     	; 0xdb4 <read_password+0x88>
		__ticks = 1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	90 e0       	ldi	r25, 0x00	; 0
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	3f c0       	rjmp	.+126    	; 0xe32 <read_password+0x106>
	else if (__tmp > 65535)
     db4:	6f 81       	ldd	r22, Y+7	; 0x07
     db6:	78 85       	ldd	r23, Y+8	; 0x08
     db8:	89 85       	ldd	r24, Y+9	; 0x09
     dba:	9a 85       	ldd	r25, Y+10	; 0x0a
     dbc:	20 e0       	ldi	r18, 0x00	; 0
     dbe:	3f ef       	ldi	r19, 0xFF	; 255
     dc0:	4f e7       	ldi	r20, 0x7F	; 127
     dc2:	57 e4       	ldi	r21, 0x47	; 71
     dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dc8:	18 16       	cp	r1, r24
     dca:	4c f5       	brge	.+82     	; 0xe1e <read_password+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dcc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dce:	7c 85       	ldd	r23, Y+12	; 0x0c
     dd0:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd2:	9e 85       	ldd	r25, Y+14	; 0x0e
     dd4:	20 e0       	ldi	r18, 0x00	; 0
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	40 e2       	ldi	r20, 0x20	; 32
     dda:	51 e4       	ldi	r21, 0x41	; 65
     ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     de0:	dc 01       	movw	r26, r24
     de2:	cb 01       	movw	r24, r22
     de4:	bc 01       	movw	r22, r24
     de6:	cd 01       	movw	r24, r26
     de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dec:	dc 01       	movw	r26, r24
     dee:	cb 01       	movw	r24, r22
     df0:	9e 83       	std	Y+6, r25	; 0x06
     df2:	8d 83       	std	Y+5, r24	; 0x05
     df4:	0f c0       	rjmp	.+30     	; 0xe14 <read_password+0xe8>
     df6:	80 ed       	ldi	r24, 0xD0	; 208
     df8:	97 e0       	ldi	r25, 0x07	; 7
     dfa:	9c 83       	std	Y+4, r25	; 0x04
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	8b 81       	ldd	r24, Y+3	; 0x03
     e00:	9c 81       	ldd	r25, Y+4	; 0x04
     e02:	01 97       	sbiw	r24, 0x01	; 1
     e04:	f1 f7       	brne	.-4      	; 0xe02 <read_password+0xd6>
     e06:	9c 83       	std	Y+4, r25	; 0x04
     e08:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e0a:	8d 81       	ldd	r24, Y+5	; 0x05
     e0c:	9e 81       	ldd	r25, Y+6	; 0x06
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	9e 83       	std	Y+6, r25	; 0x06
     e12:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e14:	8d 81       	ldd	r24, Y+5	; 0x05
     e16:	9e 81       	ldd	r25, Y+6	; 0x06
     e18:	00 97       	sbiw	r24, 0x00	; 0
     e1a:	69 f7       	brne	.-38     	; 0xdf6 <read_password+0xca>
     e1c:	14 c0       	rjmp	.+40     	; 0xe46 <read_password+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e1e:	6f 81       	ldd	r22, Y+7	; 0x07
     e20:	78 85       	ldd	r23, Y+8	; 0x08
     e22:	89 85       	ldd	r24, Y+9	; 0x09
     e24:	9a 85       	ldd	r25, Y+10	; 0x0a
     e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e2a:	dc 01       	movw	r26, r24
     e2c:	cb 01       	movw	r24, r22
     e2e:	9e 83       	std	Y+6, r25	; 0x06
     e30:	8d 83       	std	Y+5, r24	; 0x05
     e32:	8d 81       	ldd	r24, Y+5	; 0x05
     e34:	9e 81       	ldd	r25, Y+6	; 0x06
     e36:	9a 83       	std	Y+2, r25	; 0x02
     e38:	89 83       	std	Y+1, r24	; 0x01
     e3a:	89 81       	ldd	r24, Y+1	; 0x01
     e3c:	9a 81       	ldd	r25, Y+2	; 0x02
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	f1 f7       	brne	.-4      	; 0xe3e <read_password+0x112>
     e42:	9a 83       	std	Y+2, r25	; 0x02
     e44:	89 83       	std	Y+1, r24	; 0x01
 */
void read_password(){
	uint8 i;
	uint8 value[5];
/* this for loop is responsible for reading the value in the EEPROM and write it the value array */
	for(i=0;i<NO_OF_PASSWORD_LETTERS;i++){
     e46:	8f 85       	ldd	r24, Y+15	; 0x0f
     e48:	8f 5f       	subi	r24, 0xFF	; 255
     e4a:	8f 87       	std	Y+15, r24	; 0x0f
     e4c:	8f 85       	ldd	r24, Y+15	; 0x0f
     e4e:	85 30       	cpi	r24, 0x05	; 5
     e50:	08 f4       	brcc	.+2      	; 0xe54 <read_password+0x128>
     e52:	78 cf       	rjmp	.-272    	; 0xd44 <read_password+0x18>
		EEPROM_readByte((EEPROM_BASE_ADDRESS+i),&value[i]);
		_delay_ms(10);
		}
/* this for loop is responsible for checking if the input password is the same which is
 *  stored in the EEPROM before */
	for(i=0;i<NO_OF_PASSWORD_LETTERS;i++){
     e54:	1f 86       	std	Y+15, r1	; 0x0f
     e56:	19 c0       	rjmp	.+50     	; 0xe8a <read_password+0x15e>
		if (key2[i] != value[i])
     e58:	8f 85       	ldd	r24, Y+15	; 0x0f
     e5a:	88 2f       	mov	r24, r24
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	fc 01       	movw	r30, r24
     e60:	e7 57       	subi	r30, 0x77	; 119
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	40 81       	ld	r20, Z
     e66:	8f 85       	ldd	r24, Y+15	; 0x0f
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	ce 01       	movw	r24, r28
     e6e:	40 96       	adiw	r24, 0x10	; 16
     e70:	fc 01       	movw	r30, r24
     e72:	e2 0f       	add	r30, r18
     e74:	f3 1f       	adc	r31, r19
     e76:	80 81       	ld	r24, Z
     e78:	48 17       	cp	r20, r24
     e7a:	21 f0       	breq	.+8      	; 0xe84 <read_password+0x158>
		{
/* if there is Mismatch send this command to the interface MCU to let it know and follow the procedure  */
			UART_sendByte(MISMATCH_PASSWORD);
     e7c:	80 e1       	ldi	r24, 0x10	; 16
     e7e:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
     e82:	09 c0       	rjmp	.+18     	; 0xe96 <read_password+0x16a>
		EEPROM_readByte((EEPROM_BASE_ADDRESS+i),&value[i]);
		_delay_ms(10);
		}
/* this for loop is responsible for checking if the input password is the same which is
 *  stored in the EEPROM before */
	for(i=0;i<NO_OF_PASSWORD_LETTERS;i++){
     e84:	8f 85       	ldd	r24, Y+15	; 0x0f
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	8f 87       	std	Y+15, r24	; 0x0f
     e8a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e8c:	85 30       	cpi	r24, 0x05	; 5
     e8e:	20 f3       	brcs	.-56     	; 0xe58 <read_password+0x12c>
/* if there is Mismatch send this command to the interface MCU to let it know and follow the procedure  */
			UART_sendByte(MISMATCH_PASSWORD);
			return;
		}
	}
	UART_sendByte(MATCHED_PASSWORD); /* send this command to let the interface MCU know that all is okay*/
     e90:	81 e1       	ldi	r24, 0x11	; 17
     e92:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
}
     e96:	64 96       	adiw	r28, 0x14	; 20
     e98:	0f b6       	in	r0, 0x3f	; 63
     e9a:	f8 94       	cli
     e9c:	de bf       	out	0x3e, r29	; 62
     e9e:	0f be       	out	0x3f, r0	; 63
     ea0:	cd bf       	out	0x3d, r28	; 61
     ea2:	cf 91       	pop	r28
     ea4:	df 91       	pop	r29
     ea6:	08 95       	ret

00000ea8 <create_password>:

/*Description :
 * after taking the password from the user this function is responsible for creating it
 */

void create_password(){
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	0f 92       	push	r0
     eb2:	cd b7       	in	r28, 0x3d	; 61
     eb4:	de b7       	in	r29, 0x3e	; 62

	UART_sendByte(CREATE_PASSWORD); /* send this command to make the interface MCU know that he is
     eb6:	85 e0       	ldi	r24, 0x05	; 5
     eb8:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
	available now */

	/* Receive the password from the interface MCU*/
	for(uint8 i=0;i<5;i++){
     ebc:	19 82       	std	Y+1, r1	; 0x01
     ebe:	0c c0       	rjmp	.+24     	; 0xed8 <create_password+0x30>
		key[i]=UART_recieveByte();
     ec0:	89 81       	ldd	r24, Y+1	; 0x01
     ec2:	08 2f       	mov	r16, r24
     ec4:	10 e0       	ldi	r17, 0x00	; 0
     ec6:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <UART_recieveByte>
     eca:	f8 01       	movw	r30, r16
     ecc:	ec 57       	subi	r30, 0x7C	; 124
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	80 83       	st	Z, r24

	UART_sendByte(CREATE_PASSWORD); /* send this command to make the interface MCU know that he is
	available now */

	/* Receive the password from the interface MCU*/
	for(uint8 i=0;i<5;i++){
     ed2:	89 81       	ldd	r24, Y+1	; 0x01
     ed4:	8f 5f       	subi	r24, 0xFF	; 255
     ed6:	89 83       	std	Y+1, r24	; 0x01
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	85 30       	cpi	r24, 0x05	; 5
     edc:	88 f3       	brcs	.-30     	; 0xec0 <create_password+0x18>
		key[i]=UART_recieveByte();
	}
	store_password(); /* store the the received password now */
     ede:	0e 94 fa 05 	call	0xbf4	; 0xbf4 <store_password>
}
     ee2:	0f 90       	pop	r0
     ee4:	cf 91       	pop	r28
     ee6:	df 91       	pop	r29
     ee8:	1f 91       	pop	r17
     eea:	0f 91       	pop	r16
     eec:	08 95       	ret

00000eee <check_password>:

/*Description :
 * after taking the password from the user this function is responsible for checking for it
 */

void check_password(){
     eee:	0f 93       	push	r16
     ef0:	1f 93       	push	r17
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	cd b7       	in	r28, 0x3d	; 61
     ef8:	de b7       	in	r29, 0x3e	; 62
     efa:	2f 97       	sbiw	r28, 0x0f	; 15
     efc:	0f b6       	in	r0, 0x3f	; 63
     efe:	f8 94       	cli
     f00:	de bf       	out	0x3e, r29	; 62
     f02:	0f be       	out	0x3f, r0	; 63
     f04:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     f06:	1f 86       	std	Y+15, r1	; 0x0f
	/* send this command to make the interface MCU know that he is available now */
	UART_sendByte(CHECK_PASSWORD);
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>

	/* Receive the password from the interface MCU*/
	for(i=0;i<5;i++){
     f0e:	1f 86       	std	Y+15, r1	; 0x0f
     f10:	7e c0       	rjmp	.+252    	; 0x100e <check_password+0x120>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	a0 e8       	ldi	r26, 0x80	; 128
     f18:	bf e3       	ldi	r27, 0x3F	; 63
     f1a:	8b 87       	std	Y+11, r24	; 0x0b
     f1c:	9c 87       	std	Y+12, r25	; 0x0c
     f1e:	ad 87       	std	Y+13, r26	; 0x0d
     f20:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f22:	6b 85       	ldd	r22, Y+11	; 0x0b
     f24:	7c 85       	ldd	r23, Y+12	; 0x0c
     f26:	8d 85       	ldd	r24, Y+13	; 0x0d
     f28:	9e 85       	ldd	r25, Y+14	; 0x0e
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e4       	ldi	r19, 0x40	; 64
     f2e:	4c e9       	ldi	r20, 0x9C	; 156
     f30:	56 e4       	ldi	r21, 0x46	; 70
     f32:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f36:	dc 01       	movw	r26, r24
     f38:	cb 01       	movw	r24, r22
     f3a:	8f 83       	std	Y+7, r24	; 0x07
     f3c:	98 87       	std	Y+8, r25	; 0x08
     f3e:	a9 87       	std	Y+9, r26	; 0x09
     f40:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f42:	6f 81       	ldd	r22, Y+7	; 0x07
     f44:	78 85       	ldd	r23, Y+8	; 0x08
     f46:	89 85       	ldd	r24, Y+9	; 0x09
     f48:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	40 e8       	ldi	r20, 0x80	; 128
     f50:	5f e3       	ldi	r21, 0x3F	; 63
     f52:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f56:	88 23       	and	r24, r24
     f58:	2c f4       	brge	.+10     	; 0xf64 <check_password+0x76>
		__ticks = 1;
     f5a:	81 e0       	ldi	r24, 0x01	; 1
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	9e 83       	std	Y+6, r25	; 0x06
     f60:	8d 83       	std	Y+5, r24	; 0x05
     f62:	3f c0       	rjmp	.+126    	; 0xfe2 <check_password+0xf4>
	else if (__tmp > 65535)
     f64:	6f 81       	ldd	r22, Y+7	; 0x07
     f66:	78 85       	ldd	r23, Y+8	; 0x08
     f68:	89 85       	ldd	r24, Y+9	; 0x09
     f6a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f6c:	20 e0       	ldi	r18, 0x00	; 0
     f6e:	3f ef       	ldi	r19, 0xFF	; 255
     f70:	4f e7       	ldi	r20, 0x7F	; 127
     f72:	57 e4       	ldi	r21, 0x47	; 71
     f74:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f78:	18 16       	cp	r1, r24
     f7a:	4c f5       	brge	.+82     	; 0xfce <check_password+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f7c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f7e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f80:	8d 85       	ldd	r24, Y+13	; 0x0d
     f82:	9e 85       	ldd	r25, Y+14	; 0x0e
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e2       	ldi	r20, 0x20	; 32
     f8a:	51 e4       	ldi	r21, 0x41	; 65
     f8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f90:	dc 01       	movw	r26, r24
     f92:	cb 01       	movw	r24, r22
     f94:	bc 01       	movw	r22, r24
     f96:	cd 01       	movw	r24, r26
     f98:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9c:	dc 01       	movw	r26, r24
     f9e:	cb 01       	movw	r24, r22
     fa0:	9e 83       	std	Y+6, r25	; 0x06
     fa2:	8d 83       	std	Y+5, r24	; 0x05
     fa4:	0f c0       	rjmp	.+30     	; 0xfc4 <check_password+0xd6>
     fa6:	80 ed       	ldi	r24, 0xD0	; 208
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	9c 83       	std	Y+4, r25	; 0x04
     fac:	8b 83       	std	Y+3, r24	; 0x03
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	9c 81       	ldd	r25, Y+4	; 0x04
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <check_password+0xc4>
     fb6:	9c 83       	std	Y+4, r25	; 0x04
     fb8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fba:	8d 81       	ldd	r24, Y+5	; 0x05
     fbc:	9e 81       	ldd	r25, Y+6	; 0x06
     fbe:	01 97       	sbiw	r24, 0x01	; 1
     fc0:	9e 83       	std	Y+6, r25	; 0x06
     fc2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fc4:	8d 81       	ldd	r24, Y+5	; 0x05
     fc6:	9e 81       	ldd	r25, Y+6	; 0x06
     fc8:	00 97       	sbiw	r24, 0x00	; 0
     fca:	69 f7       	brne	.-38     	; 0xfa6 <check_password+0xb8>
     fcc:	14 c0       	rjmp	.+40     	; 0xff6 <check_password+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fce:	6f 81       	ldd	r22, Y+7	; 0x07
     fd0:	78 85       	ldd	r23, Y+8	; 0x08
     fd2:	89 85       	ldd	r24, Y+9	; 0x09
     fd4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	9e 83       	std	Y+6, r25	; 0x06
     fe0:	8d 83       	std	Y+5, r24	; 0x05
     fe2:	8d 81       	ldd	r24, Y+5	; 0x05
     fe4:	9e 81       	ldd	r25, Y+6	; 0x06
     fe6:	9a 83       	std	Y+2, r25	; 0x02
     fe8:	89 83       	std	Y+1, r24	; 0x01
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	9a 81       	ldd	r25, Y+2	; 0x02
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	f1 f7       	brne	.-4      	; 0xfee <check_password+0x100>
     ff2:	9a 83       	std	Y+2, r25	; 0x02
     ff4:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		key2[i]=UART_recieveByte();
     ff6:	8f 85       	ldd	r24, Y+15	; 0x0f
     ff8:	08 2f       	mov	r16, r24
     ffa:	10 e0       	ldi	r17, 0x00	; 0
     ffc:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <UART_recieveByte>
    1000:	f8 01       	movw	r30, r16
    1002:	e7 57       	subi	r30, 0x77	; 119
    1004:	ff 4f       	sbci	r31, 0xFF	; 255
    1006:	80 83       	st	Z, r24
	uint8 i=0;
	/* send this command to make the interface MCU know that he is available now */
	UART_sendByte(CHECK_PASSWORD);

	/* Receive the password from the interface MCU*/
	for(i=0;i<5;i++){
    1008:	8f 85       	ldd	r24, Y+15	; 0x0f
    100a:	8f 5f       	subi	r24, 0xFF	; 255
    100c:	8f 87       	std	Y+15, r24	; 0x0f
    100e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1010:	85 30       	cpi	r24, 0x05	; 5
    1012:	08 f4       	brcc	.+2      	; 0x1016 <check_password+0x128>
    1014:	7e cf       	rjmp	.-260    	; 0xf12 <check_password+0x24>
		_delay_ms(1);
		key2[i]=UART_recieveByte();
		}
	read_password();	/*check whether the input password is equal to the one which is saved or not*/
    1016:	0e 94 96 06 	call	0xd2c	; 0xd2c <read_password>
}
    101a:	2f 96       	adiw	r28, 0x0f	; 15
    101c:	0f b6       	in	r0, 0x3f	; 63
    101e:	f8 94       	cli
    1020:	de bf       	out	0x3e, r29	; 62
    1022:	0f be       	out	0x3f, r0	; 63
    1024:	cd bf       	out	0x3d, r28	; 61
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	1f 91       	pop	r17
    102c:	0f 91       	pop	r16
    102e:	08 95       	ret

00001030 <ISR_no_of_occurance_door>:

/*Description :
 * check the no of interrupts to adjust the time of opening,holding and closing the door
 */
void ISR_no_of_occurance_door(void){
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	cd b7       	in	r28, 0x3d	; 61
    1036:	de b7       	in	r29, 0x3e	; 62
	static uint16 no_of_entering=0;
	static uint8 open_door_flag=0;
	static uint8 hold_door_flag=1;
	static uint8 close_door_flag=1;
	if((no_of_entering==469) && (open_door_flag==0)){ /* the if condition will be true only after 15sec
    1038:	80 91 7e 00 	lds	r24, 0x007E
    103c:	90 91 7f 00 	lds	r25, 0x007F
    1040:	21 e0       	ldi	r18, 0x01	; 1
    1042:	85 3d       	cpi	r24, 0xD5	; 213
    1044:	92 07       	cpc	r25, r18
    1046:	a1 f4       	brne	.+40     	; 0x1070 <ISR_no_of_occurance_door+0x40>
    1048:	80 91 7d 00 	lds	r24, 0x007D
    104c:	88 23       	and	r24, r24
    104e:	81 f4       	brne	.+32     	; 0x1070 <ISR_no_of_occurance_door+0x40>
	 and then it will hold the door*/

		UART_sendByte(HOLD_DOOR); /* send this command to let the interface MCU know */
    1050:	87 e1       	ldi	r24, 0x17	; 23
    1052:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
		open_door_flag=1;
    1056:	81 e0       	ldi	r24, 0x01	; 1
    1058:	80 93 7d 00 	sts	0x007D, r24
		hold_door_flag=0;
    105c:	10 92 78 00 	sts	0x0078, r1
		no_of_entering=0;
    1060:	10 92 7f 00 	sts	0x007F, r1
    1064:	10 92 7e 00 	sts	0x007E, r1
		DcMotor_Rotate(Off);
    1068:	82 e0       	ldi	r24, 0x02	; 2
    106a:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DcMotor_Rotate>
    106e:	34 c0       	rjmp	.+104    	; 0x10d8 <ISR_no_of_occurance_door+0xa8>
	}

	else if((no_of_entering==94) && (hold_door_flag==0)){/* the if condition will be true only after 3sec
    1070:	80 91 7e 00 	lds	r24, 0x007E
    1074:	90 91 7f 00 	lds	r25, 0x007F
    1078:	8e 35       	cpi	r24, 0x5E	; 94
    107a:	91 05       	cpc	r25, r1
    107c:	a1 f4       	brne	.+40     	; 0x10a6 <ISR_no_of_occurance_door+0x76>
    107e:	80 91 78 00 	lds	r24, 0x0078
    1082:	88 23       	and	r24, r24
    1084:	81 f4       	brne	.+32     	; 0x10a6 <ISR_no_of_occurance_door+0x76>
	 and then it will close the door*/

		UART_sendByte(CLOSE_DOOR); /* send this command to let the interface MCU know */
    1086:	86 e1       	ldi	r24, 0x16	; 22
    1088:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
		hold_door_flag=1;
    108c:	81 e0       	ldi	r24, 0x01	; 1
    108e:	80 93 78 00 	sts	0x0078, r24
		close_door_flag=0;
    1092:	10 92 77 00 	sts	0x0077, r1
		no_of_entering=0;
    1096:	10 92 7f 00 	sts	0x007F, r1
    109a:	10 92 7e 00 	sts	0x007E, r1
		DcMotor_Rotate(CW);
    109e:	80 e0       	ldi	r24, 0x00	; 0
    10a0:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DcMotor_Rotate>
    10a4:	19 c0       	rjmp	.+50     	; 0x10d8 <ISR_no_of_occurance_door+0xa8>
	}
	else if((no_of_entering==469) && (close_door_flag==0)){
    10a6:	80 91 7e 00 	lds	r24, 0x007E
    10aa:	90 91 7f 00 	lds	r25, 0x007F
    10ae:	21 e0       	ldi	r18, 0x01	; 1
    10b0:	85 3d       	cpi	r24, 0xD5	; 213
    10b2:	92 07       	cpc	r25, r18
    10b4:	89 f4       	brne	.+34     	; 0x10d8 <ISR_no_of_occurance_door+0xa8>
    10b6:	80 91 77 00 	lds	r24, 0x0077
    10ba:	88 23       	and	r24, r24
    10bc:	69 f4       	brne	.+26     	; 0x10d8 <ISR_no_of_occurance_door+0xa8>
		/* the if condition will be true only after 15sec and then
		 *  the operation of opening and closing the door will be done*/
		close_door_flag=1;
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	80 93 77 00 	sts	0x0077, r24
		no_of_entering=0;
    10c4:	10 92 7f 00 	sts	0x007F, r1
    10c8:	10 92 7e 00 	sts	0x007E, r1
		DcMotor_Rotate(Off);
    10cc:	82 e0       	ldi	r24, 0x02	; 2
    10ce:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DcMotor_Rotate>
		UART_sendByte(DOOR_DONE); /* send this command to let the interface MCU know */
    10d2:	88 e1       	ldi	r24, 0x18	; 24
    10d4:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
	}
	if(open_door_flag && hold_door_flag && close_door_flag){ /* the function of this if condition is to
    10d8:	80 91 7d 00 	lds	r24, 0x007D
    10dc:	88 23       	and	r24, r24
    10de:	91 f0       	breq	.+36     	; 0x1104 <ISR_no_of_occurance_door+0xd4>
    10e0:	80 91 78 00 	lds	r24, 0x0078
    10e4:	88 23       	and	r24, r24
    10e6:	71 f0       	breq	.+28     	; 0x1104 <ISR_no_of_occurance_door+0xd4>
    10e8:	80 91 77 00 	lds	r24, 0x0077
    10ec:	88 23       	and	r24, r24
    10ee:	51 f0       	breq	.+20     	; 0x1104 <ISR_no_of_occurance_door+0xd4>
	 make it available to open the door again if asked and deinit the timer
	 to not giving anymore interrupts until asked*/
		open_door_flag=0;
    10f0:	10 92 7d 00 	sts	0x007D, r1
		hold_door_flag=1;
    10f4:	81 e0       	ldi	r24, 0x01	; 1
    10f6:	80 93 78 00 	sts	0x0078, r24
		close_door_flag=1;
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	80 93 77 00 	sts	0x0077, r24
		TIMER0_Deinit();
    1100:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <TIMER0_Deinit>

	}
	no_of_entering++;
    1104:	80 91 7e 00 	lds	r24, 0x007E
    1108:	90 91 7f 00 	lds	r25, 0x007F
    110c:	01 96       	adiw	r24, 0x01	; 1
    110e:	90 93 7f 00 	sts	0x007F, r25
    1112:	80 93 7e 00 	sts	0x007E, r24

}
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	08 95       	ret

0000111c <open_door>:
/*Description :
 * after taking the command from the interface this function is responsible for opening the door
 */
void open_door(){
    111c:	df 93       	push	r29
    111e:	cf 93       	push	r28
    1120:	cd b7       	in	r28, 0x3d	; 61
    1122:	de b7       	in	r29, 0x3e	; 62
	DcMotor_Rotate(A_CW); /* rotate the motor anti-CW  "opening the door"*/
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	0e 94 eb 08 	call	0x11d6	; 0x11d6 <DcMotor_Rotate>
	TIMER0_init(&myTIMER0config);
    112a:	8f e6       	ldi	r24, 0x6F	; 111
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <TIMER0_init>
	TIMER0_SetCallBack(ISR_no_of_occurance_door);
    1132:	88 e1       	ldi	r24, 0x18	; 24
    1134:	98 e0       	ldi	r25, 0x08	; 8
    1136:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <TIMER0_SetCallBack>
}
    113a:	cf 91       	pop	r28
    113c:	df 91       	pop	r29
    113e:	08 95       	ret

00001140 <ISR_no_of_occurance_buzzer>:

/*Description :
 * check the no of interrupts to adjust the time of opening and closing the buzzer
 */
void ISR_no_of_occurance_buzzer(){
    1140:	df 93       	push	r29
    1142:	cf 93       	push	r28
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
	static uint16 no=0;
	if(no == 1876){
    1148:	80 91 80 00 	lds	r24, 0x0080
    114c:	90 91 81 00 	lds	r25, 0x0081
    1150:	27 e0       	ldi	r18, 0x07	; 7
    1152:	84 35       	cpi	r24, 0x54	; 84
    1154:	92 07       	cpc	r25, r18
    1156:	61 f4       	brne	.+24     	; 0x1170 <ISR_no_of_occurance_buzzer+0x30>
		buzzer_close();
    1158:	0e 94 b4 05 	call	0xb68	; 0xb68 <buzzer_close>
		no=0;
    115c:	10 92 81 00 	sts	0x0081, r1
    1160:	10 92 80 00 	sts	0x0080, r1
		TIMER0_Deinit();
    1164:	0e 94 a4 0e 	call	0x1d48	; 0x1d48 <TIMER0_Deinit>
		UART_sendByte(THIEF_CAUGHT);
    1168:	80 e2       	ldi	r24, 0x20	; 32
    116a:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
    116e:	09 c0       	rjmp	.+18     	; 0x1182 <ISR_no_of_occurance_buzzer+0x42>
	}
	else
		no++;
    1170:	80 91 80 00 	lds	r24, 0x0080
    1174:	90 91 81 00 	lds	r25, 0x0081
    1178:	01 96       	adiw	r24, 0x01	; 1
    117a:	90 93 81 00 	sts	0x0081, r25
    117e:	80 93 80 00 	sts	0x0080, r24
}
    1182:	cf 91       	pop	r28
    1184:	df 91       	pop	r29
    1186:	08 95       	ret

00001188 <thief>:
/*Description :
 * after taking the command from the interface this function is responsible for opening the buzzer
 */
void thief(){
    1188:	df 93       	push	r29
    118a:	cf 93       	push	r28
    118c:	cd b7       	in	r28, 0x3d	; 61
    118e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_init(&myTIMER0config);
    1190:	8f e6       	ldi	r24, 0x6F	; 111
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <TIMER0_init>
	TIMER0_SetCallBack(ISR_no_of_occurance_buzzer);
    1198:	80 ea       	ldi	r24, 0xA0	; 160
    119a:	98 e0       	ldi	r25, 0x08	; 8
    119c:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <TIMER0_SetCallBack>
	buzzer_open(); /* open the buzzer */
    11a0:	0e 94 a3 05 	call	0xb46	; 0xb46 <buzzer_open>
}
    11a4:	cf 91       	pop	r28
    11a6:	df 91       	pop	r29
    11a8:	08 95       	ret

000011aa <DcMotor_init>:
/*
 * Description :
 * Function responsible for initialize the DC-motor.
 */

void DcMotor_init(void){
    11aa:	df 93       	push	r29
    11ac:	cf 93       	push	r28
    11ae:	cd b7       	in	r28, 0x3d	; 61
    11b0:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(DC_MOTOR_1ST_PORT_ID,DC_MOTOR_1ST_PIN_ID,PIN_OUTPUT);
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	60 e0       	ldi	r22, 0x00	; 0
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_2ST_PORT_ID,DC_MOTOR_2ST_PIN_ID,PIN_OUTPUT);
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	61 e0       	ldi	r22, 0x01	; 1
    11c0:	41 e0       	ldi	r20, 0x01	; 1
    11c2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_E_PORT_ID,DC_MOTOR_E_PIN_ID,PIN_OUTPUT);
    11c6:	81 e0       	ldi	r24, 0x01	; 1
    11c8:	62 e0       	ldi	r22, 0x02	; 2
    11ca:	41 e0       	ldi	r20, 0x01	; 1
    11cc:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <GPIO_setupPinDirection>
}
    11d0:	cf 91       	pop	r28
    11d2:	df 91       	pop	r29
    11d4:	08 95       	ret

000011d6 <DcMotor_Rotate>:
/*
 * Description :
 * Function responsible for configuring the Speed and the direction of rotation of the motor with respect to
 * the parameters passed to the function
 */
void DcMotor_Rotate(Dc_Motor_State state){
    11d6:	df 93       	push	r29
    11d8:	cf 93       	push	r28
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DcMotor_Rotate+0x6>
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
	/*configuring the motor according to the passed state parameter.*/
	switch (state){
    11e4:	89 81       	ldd	r24, Y+1	; 0x01
    11e6:	28 2f       	mov	r18, r24
    11e8:	30 e0       	ldi	r19, 0x00	; 0
    11ea:	3b 83       	std	Y+3, r19	; 0x03
    11ec:	2a 83       	std	Y+2, r18	; 0x02
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	9b 81       	ldd	r25, Y+3	; 0x03
    11f2:	81 30       	cpi	r24, 0x01	; 1
    11f4:	91 05       	cpc	r25, r1
    11f6:	d1 f0       	breq	.+52     	; 0x122c <DcMotor_Rotate+0x56>
    11f8:	2a 81       	ldd	r18, Y+2	; 0x02
    11fa:	3b 81       	ldd	r19, Y+3	; 0x03
    11fc:	22 30       	cpi	r18, 0x02	; 2
    11fe:	31 05       	cpc	r19, r1
    1200:	29 f0       	breq	.+10     	; 0x120c <DcMotor_Rotate+0x36>
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	9b 81       	ldd	r25, Y+3	; 0x03
    1206:	00 97       	sbiw	r24, 0x00	; 0
    1208:	09 f1       	breq	.+66     	; 0x124c <DcMotor_Rotate+0x76>
    120a:	2f c0       	rjmp	.+94     	; 0x126a <DcMotor_Rotate+0x94>
	case Off:
		//PWM_Timer0_Start(0); /*make PWM with 0% duty cycle*/
		/* Reseting both PINS which are responsible for the direction of the motor
		 * therefore, it stops the motor
		 */
		GPIO_writePin(DC_MOTOR_2ST_PORT_ID,DC_MOTOR_2ST_PIN_ID,LOGIC_LOW);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	61 e0       	ldi	r22, 0x01	; 1
    1210:	40 e0       	ldi	r20, 0x00	; 0
    1212:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_1ST_PORT_ID,DC_MOTOR_1ST_PIN_ID,LOGIC_LOW);
    1216:	81 e0       	ldi	r24, 0x01	; 1
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	40 e0       	ldi	r20, 0x00	; 0
    121c:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_E_PORT_ID,DC_MOTOR_E_PIN_ID,LOGIC_LOW);
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	40 e0       	ldi	r20, 0x00	; 0
    1226:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
    122a:	1f c0       	rjmp	.+62     	; 0x126a <DcMotor_Rotate+0x94>
		break;
	case A_CW:
		/* Writing to both PINS which are responsible for the direction of the motor
		 * therefore, it rotates Anti_ Clock wise
		 */
		GPIO_writePin(DC_MOTOR_2ST_PORT_ID,DC_MOTOR_2ST_PIN_ID,LOGIC_LOW);
    122c:	81 e0       	ldi	r24, 0x01	; 1
    122e:	61 e0       	ldi	r22, 0x01	; 1
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_1ST_PORT_ID,DC_MOTOR_1ST_PIN_ID,LOGIC_HIGH);
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	60 e0       	ldi	r22, 0x00	; 0
    123a:	41 e0       	ldi	r20, 0x01	; 1
    123c:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_E_PORT_ID,DC_MOTOR_E_PIN_ID,LOGIC_HIGH);
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	62 e0       	ldi	r22, 0x02	; 2
    1244:	41 e0       	ldi	r20, 0x01	; 1
    1246:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
    124a:	0f c0       	rjmp	.+30     	; 0x126a <DcMotor_Rotate+0x94>
		break;
	case CW:
		/* Writing to both PINS which are responsible for the direction of the motor
		 * therefore, it rotates Clock wise
		 */
		GPIO_writePin(DC_MOTOR_1ST_PORT_ID,DC_MOTOR_1ST_PIN_ID,LOGIC_LOW);
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	60 e0       	ldi	r22, 0x00	; 0
    1250:	40 e0       	ldi	r20, 0x00	; 0
    1252:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_2ST_PORT_ID,DC_MOTOR_2ST_PIN_ID,LOGIC_HIGH);
    1256:	81 e0       	ldi	r24, 0x01	; 1
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	41 e0       	ldi	r20, 0x01	; 1
    125c:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
		GPIO_writePin(DC_MOTOR_E_PORT_ID,DC_MOTOR_E_PIN_ID,LOGIC_HIGH);
    1260:	81 e0       	ldi	r24, 0x01	; 1
    1262:	62 e0       	ldi	r22, 0x02	; 2
    1264:	41 e0       	ldi	r20, 0x01	; 1
    1266:	0e 94 c7 0a 	call	0x158e	; 0x158e <GPIO_writePin>
		/* Make PWM with (speed%) duty cycle*/
		//PWM_Timer0_Start(speed);
		break;
	}
}
    126a:	0f 90       	pop	r0
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "i2c.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	00 d0       	rcall	.+0      	; 0x127c <EEPROM_writeByte+0x6>
    127c:	00 d0       	rcall	.+0      	; 0x127e <EEPROM_writeByte+0x8>
    127e:	cd b7       	in	r28, 0x3d	; 61
    1280:	de b7       	in	r29, 0x3e	; 62
    1282:	9a 83       	std	Y+2, r25	; 0x02
    1284:	89 83       	std	Y+1, r24	; 0x01
    1286:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1288:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TWI_start>
    if (TWI_getStatus() != TWI_START)
    128c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    1290:	88 30       	cpi	r24, 0x08	; 8
    1292:	11 f0       	breq	.+4      	; 0x1298 <EEPROM_writeByte+0x22>
        return ERROR;
    1294:	1c 82       	std	Y+4, r1	; 0x04
    1296:	28 c0       	rjmp	.+80     	; 0x12e8 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1298:	89 81       	ldd	r24, Y+1	; 0x01
    129a:	9a 81       	ldd	r25, Y+2	; 0x02
    129c:	80 70       	andi	r24, 0x00	; 0
    129e:	97 70       	andi	r25, 0x07	; 7
    12a0:	88 0f       	add	r24, r24
    12a2:	89 2f       	mov	r24, r25
    12a4:	88 1f       	adc	r24, r24
    12a6:	99 0b       	sbc	r25, r25
    12a8:	91 95       	neg	r25
    12aa:	80 6a       	ori	r24, 0xA0	; 160
    12ac:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    12b0:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    12b4:	88 31       	cpi	r24, 0x18	; 24
    12b6:	11 f0       	breq	.+4      	; 0x12bc <EEPROM_writeByte+0x46>
        return ERROR; 
    12b8:	1c 82       	std	Y+4, r1	; 0x04
    12ba:	16 c0       	rjmp	.+44     	; 0x12e8 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    12bc:	89 81       	ldd	r24, Y+1	; 0x01
    12be:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12c2:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    12c6:	88 32       	cpi	r24, 0x28	; 40
    12c8:	11 f0       	breq	.+4      	; 0x12ce <EEPROM_writeByte+0x58>
        return ERROR;
    12ca:	1c 82       	std	Y+4, r1	; 0x04
    12cc:	0d c0       	rjmp	.+26     	; 0x12e8 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    12ce:	8b 81       	ldd	r24, Y+3	; 0x03
    12d0:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    12d4:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    12d8:	88 32       	cpi	r24, 0x28	; 40
    12da:	11 f0       	breq	.+4      	; 0x12e0 <EEPROM_writeByte+0x6a>
        return ERROR;
    12dc:	1c 82       	std	Y+4, r1	; 0x04
    12de:	04 c0       	rjmp	.+8      	; 0x12e8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    12e0:	0e 94 67 0d 	call	0x1ace	; 0x1ace <TWI_stop>
	
    return SUCCESS;
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	8c 83       	std	Y+4, r24	; 0x04
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    12ea:	0f 90       	pop	r0
    12ec:	0f 90       	pop	r0
    12ee:	0f 90       	pop	r0
    12f0:	0f 90       	pop	r0
    12f2:	cf 91       	pop	r28
    12f4:	df 91       	pop	r29
    12f6:	08 95       	ret

000012f8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    12f8:	df 93       	push	r29
    12fa:	cf 93       	push	r28
    12fc:	00 d0       	rcall	.+0      	; 0x12fe <EEPROM_readByte+0x6>
    12fe:	00 d0       	rcall	.+0      	; 0x1300 <EEPROM_readByte+0x8>
    1300:	0f 92       	push	r0
    1302:	cd b7       	in	r28, 0x3d	; 61
    1304:	de b7       	in	r29, 0x3e	; 62
    1306:	9a 83       	std	Y+2, r25	; 0x02
    1308:	89 83       	std	Y+1, r24	; 0x01
    130a:	7c 83       	std	Y+4, r23	; 0x04
    130c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    130e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1312:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    1316:	88 30       	cpi	r24, 0x08	; 8
    1318:	11 f0       	breq	.+4      	; 0x131e <EEPROM_readByte+0x26>
        return ERROR;
    131a:	1d 82       	std	Y+5, r1	; 0x05
    131c:	44 c0       	rjmp	.+136    	; 0x13a6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    131e:	89 81       	ldd	r24, Y+1	; 0x01
    1320:	9a 81       	ldd	r25, Y+2	; 0x02
    1322:	80 70       	andi	r24, 0x00	; 0
    1324:	97 70       	andi	r25, 0x07	; 7
    1326:	88 0f       	add	r24, r24
    1328:	89 2f       	mov	r24, r25
    132a:	88 1f       	adc	r24, r24
    132c:	99 0b       	sbc	r25, r25
    132e:	91 95       	neg	r25
    1330:	80 6a       	ori	r24, 0xA0	; 160
    1332:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1336:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    133a:	88 31       	cpi	r24, 0x18	; 24
    133c:	11 f0       	breq	.+4      	; 0x1342 <EEPROM_readByte+0x4a>
        return ERROR;
    133e:	1d 82       	std	Y+5, r1	; 0x05
    1340:	32 c0       	rjmp	.+100    	; 0x13a6 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1342:	89 81       	ldd	r24, Y+1	; 0x01
    1344:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1348:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    134c:	88 32       	cpi	r24, 0x28	; 40
    134e:	11 f0       	breq	.+4      	; 0x1354 <EEPROM_readByte+0x5c>
        return ERROR;
    1350:	1d 82       	std	Y+5, r1	; 0x05
    1352:	29 c0       	rjmp	.+82     	; 0x13a6 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1354:	0e 94 57 0d 	call	0x1aae	; 0x1aae <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1358:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    135c:	80 31       	cpi	r24, 0x10	; 16
    135e:	11 f0       	breq	.+4      	; 0x1364 <EEPROM_readByte+0x6c>
        return ERROR;
    1360:	1d 82       	std	Y+5, r1	; 0x05
    1362:	21 c0       	rjmp	.+66     	; 0x13a6 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1364:	89 81       	ldd	r24, Y+1	; 0x01
    1366:	9a 81       	ldd	r25, Y+2	; 0x02
    1368:	80 70       	andi	r24, 0x00	; 0
    136a:	97 70       	andi	r25, 0x07	; 7
    136c:	88 0f       	add	r24, r24
    136e:	89 2f       	mov	r24, r25
    1370:	88 1f       	adc	r24, r24
    1372:	99 0b       	sbc	r25, r25
    1374:	91 95       	neg	r25
    1376:	81 6a       	ori	r24, 0xA1	; 161
    1378:	0e 94 72 0d 	call	0x1ae4	; 0x1ae4 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    137c:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    1380:	80 34       	cpi	r24, 0x40	; 64
    1382:	11 f0       	breq	.+4      	; 0x1388 <EEPROM_readByte+0x90>
        return ERROR;
    1384:	1d 82       	std	Y+5, r1	; 0x05
    1386:	0f c0       	rjmp	.+30     	; 0x13a6 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1388:	0e 94 9c 0d 	call	0x1b38	; 0x1b38 <TWI_readByteWithNACK>
    138c:	eb 81       	ldd	r30, Y+3	; 0x03
    138e:	fc 81       	ldd	r31, Y+4	; 0x04
    1390:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1392:	0e 94 af 0d 	call	0x1b5e	; 0x1b5e <TWI_getStatus>
    1396:	88 35       	cpi	r24, 0x58	; 88
    1398:	11 f0       	breq	.+4      	; 0x139e <EEPROM_readByte+0xa6>
        return ERROR;
    139a:	1d 82       	std	Y+5, r1	; 0x05
    139c:	04 c0       	rjmp	.+8      	; 0x13a6 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    139e:	0e 94 67 0d 	call	0x1ace	; 0x1ace <TWI_stop>

    return SUCCESS;
    13a2:	81 e0       	ldi	r24, 0x01	; 1
    13a4:	8d 83       	std	Y+5, r24	; 0x05
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    13a8:	0f 90       	pop	r0
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <GPIO_setupPinDirection+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <GPIO_setupPinDirection+0x8>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	89 83       	std	Y+1, r24	; 0x01
    13c8:	6a 83       	std	Y+2, r22	; 0x02
    13ca:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13cc:	8a 81       	ldd	r24, Y+2	; 0x02
    13ce:	88 30       	cpi	r24, 0x08	; 8
    13d0:	08 f0       	brcs	.+2      	; 0x13d4 <GPIO_setupPinDirection+0x1c>
    13d2:	d5 c0       	rjmp	.+426    	; 0x157e <GPIO_setupPinDirection+0x1c6>
    13d4:	89 81       	ldd	r24, Y+1	; 0x01
    13d6:	84 30       	cpi	r24, 0x04	; 4
    13d8:	08 f0       	brcs	.+2      	; 0x13dc <GPIO_setupPinDirection+0x24>
    13da:	d1 c0       	rjmp	.+418    	; 0x157e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13dc:	89 81       	ldd	r24, Y+1	; 0x01
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	3d 83       	std	Y+5, r19	; 0x05
    13e4:	2c 83       	std	Y+4, r18	; 0x04
    13e6:	8c 81       	ldd	r24, Y+4	; 0x04
    13e8:	9d 81       	ldd	r25, Y+5	; 0x05
    13ea:	81 30       	cpi	r24, 0x01	; 1
    13ec:	91 05       	cpc	r25, r1
    13ee:	09 f4       	brne	.+2      	; 0x13f2 <GPIO_setupPinDirection+0x3a>
    13f0:	43 c0       	rjmp	.+134    	; 0x1478 <GPIO_setupPinDirection+0xc0>
    13f2:	2c 81       	ldd	r18, Y+4	; 0x04
    13f4:	3d 81       	ldd	r19, Y+5	; 0x05
    13f6:	22 30       	cpi	r18, 0x02	; 2
    13f8:	31 05       	cpc	r19, r1
    13fa:	2c f4       	brge	.+10     	; 0x1406 <GPIO_setupPinDirection+0x4e>
    13fc:	8c 81       	ldd	r24, Y+4	; 0x04
    13fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1400:	00 97       	sbiw	r24, 0x00	; 0
    1402:	71 f0       	breq	.+28     	; 0x1420 <GPIO_setupPinDirection+0x68>
    1404:	bc c0       	rjmp	.+376    	; 0x157e <GPIO_setupPinDirection+0x1c6>
    1406:	2c 81       	ldd	r18, Y+4	; 0x04
    1408:	3d 81       	ldd	r19, Y+5	; 0x05
    140a:	22 30       	cpi	r18, 0x02	; 2
    140c:	31 05       	cpc	r19, r1
    140e:	09 f4       	brne	.+2      	; 0x1412 <GPIO_setupPinDirection+0x5a>
    1410:	5f c0       	rjmp	.+190    	; 0x14d0 <GPIO_setupPinDirection+0x118>
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	83 30       	cpi	r24, 0x03	; 3
    1418:	91 05       	cpc	r25, r1
    141a:	09 f4       	brne	.+2      	; 0x141e <GPIO_setupPinDirection+0x66>
    141c:	85 c0       	rjmp	.+266    	; 0x1528 <GPIO_setupPinDirection+0x170>
    141e:	af c0       	rjmp	.+350    	; 0x157e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	a1 f4       	brne	.+40     	; 0x144e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1426:	aa e3       	ldi	r26, 0x3A	; 58
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	ea e3       	ldi	r30, 0x3A	; 58
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_setupPinDirection+0x8c>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_setupPinDirection+0x88>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	98 c0       	rjmp	.+304    	; 0x157e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    144e:	aa e3       	ldi	r26, 0x3A	; 58
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	ea e3       	ldi	r30, 0x3A	; 58
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_setupPinDirection+0xb4>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_setupPinDirection+0xb0>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
    1476:	83 c0       	rjmp	.+262    	; 0x157e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1478:	8b 81       	ldd	r24, Y+3	; 0x03
    147a:	81 30       	cpi	r24, 0x01	; 1
    147c:	a1 f4       	brne	.+40     	; 0x14a6 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    147e:	a7 e3       	ldi	r26, 0x37	; 55
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	e7 e3       	ldi	r30, 0x37	; 55
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	48 2f       	mov	r20, r24
    148a:	8a 81       	ldd	r24, Y+2	; 0x02
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	81 e0       	ldi	r24, 0x01	; 1
    1492:	90 e0       	ldi	r25, 0x00	; 0
    1494:	02 2e       	mov	r0, r18
    1496:	02 c0       	rjmp	.+4      	; 0x149c <GPIO_setupPinDirection+0xe4>
    1498:	88 0f       	add	r24, r24
    149a:	99 1f       	adc	r25, r25
    149c:	0a 94       	dec	r0
    149e:	e2 f7       	brpl	.-8      	; 0x1498 <GPIO_setupPinDirection+0xe0>
    14a0:	84 2b       	or	r24, r20
    14a2:	8c 93       	st	X, r24
    14a4:	6c c0       	rjmp	.+216    	; 0x157e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14a6:	a7 e3       	ldi	r26, 0x37	; 55
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e7 e3       	ldi	r30, 0x37	; 55
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	48 2f       	mov	r20, r24
    14b2:	8a 81       	ldd	r24, Y+2	; 0x02
    14b4:	28 2f       	mov	r18, r24
    14b6:	30 e0       	ldi	r19, 0x00	; 0
    14b8:	81 e0       	ldi	r24, 0x01	; 1
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	02 2e       	mov	r0, r18
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <GPIO_setupPinDirection+0x10c>
    14c0:	88 0f       	add	r24, r24
    14c2:	99 1f       	adc	r25, r25
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <GPIO_setupPinDirection+0x108>
    14c8:	80 95       	com	r24
    14ca:	84 23       	and	r24, r20
    14cc:	8c 93       	st	X, r24
    14ce:	57 c0       	rjmp	.+174    	; 0x157e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14d0:	8b 81       	ldd	r24, Y+3	; 0x03
    14d2:	81 30       	cpi	r24, 0x01	; 1
    14d4:	a1 f4       	brne	.+40     	; 0x14fe <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14d6:	a4 e3       	ldi	r26, 0x34	; 52
    14d8:	b0 e0       	ldi	r27, 0x00	; 0
    14da:	e4 e3       	ldi	r30, 0x34	; 52
    14dc:	f0 e0       	ldi	r31, 0x00	; 0
    14de:	80 81       	ld	r24, Z
    14e0:	48 2f       	mov	r20, r24
    14e2:	8a 81       	ldd	r24, Y+2	; 0x02
    14e4:	28 2f       	mov	r18, r24
    14e6:	30 e0       	ldi	r19, 0x00	; 0
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	02 2e       	mov	r0, r18
    14ee:	02 c0       	rjmp	.+4      	; 0x14f4 <GPIO_setupPinDirection+0x13c>
    14f0:	88 0f       	add	r24, r24
    14f2:	99 1f       	adc	r25, r25
    14f4:	0a 94       	dec	r0
    14f6:	e2 f7       	brpl	.-8      	; 0x14f0 <GPIO_setupPinDirection+0x138>
    14f8:	84 2b       	or	r24, r20
    14fa:	8c 93       	st	X, r24
    14fc:	40 c0       	rjmp	.+128    	; 0x157e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14fe:	a4 e3       	ldi	r26, 0x34	; 52
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e4 e3       	ldi	r30, 0x34	; 52
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <GPIO_setupPinDirection+0x164>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <GPIO_setupPinDirection+0x160>
    1520:	80 95       	com	r24
    1522:	84 23       	and	r24, r20
    1524:	8c 93       	st	X, r24
    1526:	2b c0       	rjmp	.+86     	; 0x157e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	81 30       	cpi	r24, 0x01	; 1
    152c:	a1 f4       	brne	.+40     	; 0x1556 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    152e:	a1 e3       	ldi	r26, 0x31	; 49
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e1 e3       	ldi	r30, 0x31	; 49
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	48 2f       	mov	r20, r24
    153a:	8a 81       	ldd	r24, Y+2	; 0x02
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	81 e0       	ldi	r24, 0x01	; 1
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	02 2e       	mov	r0, r18
    1546:	02 c0       	rjmp	.+4      	; 0x154c <GPIO_setupPinDirection+0x194>
    1548:	88 0f       	add	r24, r24
    154a:	99 1f       	adc	r25, r25
    154c:	0a 94       	dec	r0
    154e:	e2 f7       	brpl	.-8      	; 0x1548 <GPIO_setupPinDirection+0x190>
    1550:	84 2b       	or	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	14 c0       	rjmp	.+40     	; 0x157e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1556:	a1 e3       	ldi	r26, 0x31	; 49
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e1 e3       	ldi	r30, 0x31	; 49
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_setupPinDirection+0x1bc>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_setupPinDirection+0x1b8>
    1578:	80 95       	com	r24
    157a:	84 23       	and	r24, r20
    157c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	0f 90       	pop	r0
    1584:	0f 90       	pop	r0
    1586:	0f 90       	pop	r0
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	00 d0       	rcall	.+0      	; 0x1594 <GPIO_writePin+0x6>
    1594:	00 d0       	rcall	.+0      	; 0x1596 <GPIO_writePin+0x8>
    1596:	0f 92       	push	r0
    1598:	cd b7       	in	r28, 0x3d	; 61
    159a:	de b7       	in	r29, 0x3e	; 62
    159c:	89 83       	std	Y+1, r24	; 0x01
    159e:	6a 83       	std	Y+2, r22	; 0x02
    15a0:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	88 30       	cpi	r24, 0x08	; 8
    15a6:	08 f0       	brcs	.+2      	; 0x15aa <GPIO_writePin+0x1c>
    15a8:	d5 c0       	rjmp	.+426    	; 0x1754 <GPIO_writePin+0x1c6>
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
    15ac:	84 30       	cpi	r24, 0x04	; 4
    15ae:	08 f0       	brcs	.+2      	; 0x15b2 <GPIO_writePin+0x24>
    15b0:	d1 c0       	rjmp	.+418    	; 0x1754 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15b2:	89 81       	ldd	r24, Y+1	; 0x01
    15b4:	28 2f       	mov	r18, r24
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	3d 83       	std	Y+5, r19	; 0x05
    15ba:	2c 83       	std	Y+4, r18	; 0x04
    15bc:	8c 81       	ldd	r24, Y+4	; 0x04
    15be:	9d 81       	ldd	r25, Y+5	; 0x05
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	91 05       	cpc	r25, r1
    15c4:	09 f4       	brne	.+2      	; 0x15c8 <GPIO_writePin+0x3a>
    15c6:	43 c0       	rjmp	.+134    	; 0x164e <GPIO_writePin+0xc0>
    15c8:	2c 81       	ldd	r18, Y+4	; 0x04
    15ca:	3d 81       	ldd	r19, Y+5	; 0x05
    15cc:	22 30       	cpi	r18, 0x02	; 2
    15ce:	31 05       	cpc	r19, r1
    15d0:	2c f4       	brge	.+10     	; 0x15dc <GPIO_writePin+0x4e>
    15d2:	8c 81       	ldd	r24, Y+4	; 0x04
    15d4:	9d 81       	ldd	r25, Y+5	; 0x05
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	71 f0       	breq	.+28     	; 0x15f6 <GPIO_writePin+0x68>
    15da:	bc c0       	rjmp	.+376    	; 0x1754 <GPIO_writePin+0x1c6>
    15dc:	2c 81       	ldd	r18, Y+4	; 0x04
    15de:	3d 81       	ldd	r19, Y+5	; 0x05
    15e0:	22 30       	cpi	r18, 0x02	; 2
    15e2:	31 05       	cpc	r19, r1
    15e4:	09 f4       	brne	.+2      	; 0x15e8 <GPIO_writePin+0x5a>
    15e6:	5f c0       	rjmp	.+190    	; 0x16a6 <GPIO_writePin+0x118>
    15e8:	8c 81       	ldd	r24, Y+4	; 0x04
    15ea:	9d 81       	ldd	r25, Y+5	; 0x05
    15ec:	83 30       	cpi	r24, 0x03	; 3
    15ee:	91 05       	cpc	r25, r1
    15f0:	09 f4       	brne	.+2      	; 0x15f4 <GPIO_writePin+0x66>
    15f2:	85 c0       	rjmp	.+266    	; 0x16fe <GPIO_writePin+0x170>
    15f4:	af c0       	rjmp	.+350    	; 0x1754 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15f6:	8b 81       	ldd	r24, Y+3	; 0x03
    15f8:	81 30       	cpi	r24, 0x01	; 1
    15fa:	a1 f4       	brne	.+40     	; 0x1624 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15fc:	ab e3       	ldi	r26, 0x3B	; 59
    15fe:	b0 e0       	ldi	r27, 0x00	; 0
    1600:	eb e3       	ldi	r30, 0x3B	; 59
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	80 81       	ld	r24, Z
    1606:	48 2f       	mov	r20, r24
    1608:	8a 81       	ldd	r24, Y+2	; 0x02
    160a:	28 2f       	mov	r18, r24
    160c:	30 e0       	ldi	r19, 0x00	; 0
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	90 e0       	ldi	r25, 0x00	; 0
    1612:	02 2e       	mov	r0, r18
    1614:	02 c0       	rjmp	.+4      	; 0x161a <GPIO_writePin+0x8c>
    1616:	88 0f       	add	r24, r24
    1618:	99 1f       	adc	r25, r25
    161a:	0a 94       	dec	r0
    161c:	e2 f7       	brpl	.-8      	; 0x1616 <GPIO_writePin+0x88>
    161e:	84 2b       	or	r24, r20
    1620:	8c 93       	st	X, r24
    1622:	98 c0       	rjmp	.+304    	; 0x1754 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1624:	ab e3       	ldi	r26, 0x3B	; 59
    1626:	b0 e0       	ldi	r27, 0x00	; 0
    1628:	eb e3       	ldi	r30, 0x3B	; 59
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	80 81       	ld	r24, Z
    162e:	48 2f       	mov	r20, r24
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	81 e0       	ldi	r24, 0x01	; 1
    1638:	90 e0       	ldi	r25, 0x00	; 0
    163a:	02 2e       	mov	r0, r18
    163c:	02 c0       	rjmp	.+4      	; 0x1642 <GPIO_writePin+0xb4>
    163e:	88 0f       	add	r24, r24
    1640:	99 1f       	adc	r25, r25
    1642:	0a 94       	dec	r0
    1644:	e2 f7       	brpl	.-8      	; 0x163e <GPIO_writePin+0xb0>
    1646:	80 95       	com	r24
    1648:	84 23       	and	r24, r20
    164a:	8c 93       	st	X, r24
    164c:	83 c0       	rjmp	.+262    	; 0x1754 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	a1 f4       	brne	.+40     	; 0x167c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1654:	a8 e3       	ldi	r26, 0x38	; 56
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	e8 e3       	ldi	r30, 0x38	; 56
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GPIO_writePin+0xe4>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <GPIO_writePin+0xe0>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	6c c0       	rjmp	.+216    	; 0x1754 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    167c:	a8 e3       	ldi	r26, 0x38	; 56
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	e8 e3       	ldi	r30, 0x38	; 56
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_writePin+0x10c>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_writePin+0x108>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	57 c0       	rjmp	.+174    	; 0x1754 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	a1 f4       	brne	.+40     	; 0x16d4 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16ac:	a5 e3       	ldi	r26, 0x35	; 53
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e5 e3       	ldi	r30, 0x35	; 53
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <GPIO_writePin+0x13c>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <GPIO_writePin+0x138>
    16ce:	84 2b       	or	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	40 c0       	rjmp	.+128    	; 0x1754 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16d4:	a5 e3       	ldi	r26, 0x35	; 53
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e5 e3       	ldi	r30, 0x35	; 53
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_writePin+0x164>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_writePin+0x160>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	2b c0       	rjmp	.+86     	; 0x1754 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	a1 f4       	brne	.+40     	; 0x172c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1704:	a2 e3       	ldi	r26, 0x32	; 50
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e2 e3       	ldi	r30, 0x32	; 50
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_writePin+0x194>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_writePin+0x190>
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	14 c0       	rjmp	.+40     	; 0x1754 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    172c:	a2 e3       	ldi	r26, 0x32	; 50
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e2 e3       	ldi	r30, 0x32	; 50
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_writePin+0x1bc>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_writePin+0x1b8>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	0f 90       	pop	r0
    175e:	cf 91       	pop	r28
    1760:	df 91       	pop	r29
    1762:	08 95       	ret

00001764 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	00 d0       	rcall	.+0      	; 0x176a <GPIO_readPin+0x6>
    176a:	00 d0       	rcall	.+0      	; 0x176c <GPIO_readPin+0x8>
    176c:	0f 92       	push	r0
    176e:	cd b7       	in	r28, 0x3d	; 61
    1770:	de b7       	in	r29, 0x3e	; 62
    1772:	8a 83       	std	Y+2, r24	; 0x02
    1774:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1776:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	88 30       	cpi	r24, 0x08	; 8
    177c:	08 f0       	brcs	.+2      	; 0x1780 <GPIO_readPin+0x1c>
    177e:	84 c0       	rjmp	.+264    	; 0x1888 <GPIO_readPin+0x124>
    1780:	8a 81       	ldd	r24, Y+2	; 0x02
    1782:	84 30       	cpi	r24, 0x04	; 4
    1784:	08 f0       	brcs	.+2      	; 0x1788 <GPIO_readPin+0x24>
    1786:	80 c0       	rjmp	.+256    	; 0x1888 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1788:	8a 81       	ldd	r24, Y+2	; 0x02
    178a:	28 2f       	mov	r18, r24
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	3d 83       	std	Y+5, r19	; 0x05
    1790:	2c 83       	std	Y+4, r18	; 0x04
    1792:	4c 81       	ldd	r20, Y+4	; 0x04
    1794:	5d 81       	ldd	r21, Y+5	; 0x05
    1796:	41 30       	cpi	r20, 0x01	; 1
    1798:	51 05       	cpc	r21, r1
    179a:	79 f1       	breq	.+94     	; 0x17fa <GPIO_readPin+0x96>
    179c:	8c 81       	ldd	r24, Y+4	; 0x04
    179e:	9d 81       	ldd	r25, Y+5	; 0x05
    17a0:	82 30       	cpi	r24, 0x02	; 2
    17a2:	91 05       	cpc	r25, r1
    17a4:	34 f4       	brge	.+12     	; 0x17b2 <GPIO_readPin+0x4e>
    17a6:	2c 81       	ldd	r18, Y+4	; 0x04
    17a8:	3d 81       	ldd	r19, Y+5	; 0x05
    17aa:	21 15       	cp	r18, r1
    17ac:	31 05       	cpc	r19, r1
    17ae:	69 f0       	breq	.+26     	; 0x17ca <GPIO_readPin+0x66>
    17b0:	6b c0       	rjmp	.+214    	; 0x1888 <GPIO_readPin+0x124>
    17b2:	4c 81       	ldd	r20, Y+4	; 0x04
    17b4:	5d 81       	ldd	r21, Y+5	; 0x05
    17b6:	42 30       	cpi	r20, 0x02	; 2
    17b8:	51 05       	cpc	r21, r1
    17ba:	b9 f1       	breq	.+110    	; 0x182a <GPIO_readPin+0xc6>
    17bc:	8c 81       	ldd	r24, Y+4	; 0x04
    17be:	9d 81       	ldd	r25, Y+5	; 0x05
    17c0:	83 30       	cpi	r24, 0x03	; 3
    17c2:	91 05       	cpc	r25, r1
    17c4:	09 f4       	brne	.+2      	; 0x17c8 <GPIO_readPin+0x64>
    17c6:	49 c0       	rjmp	.+146    	; 0x185a <GPIO_readPin+0xf6>
    17c8:	5f c0       	rjmp	.+190    	; 0x1888 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17ca:	e9 e3       	ldi	r30, 0x39	; 57
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	8b 81       	ldd	r24, Y+3	; 0x03
    17d6:	88 2f       	mov	r24, r24
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	a9 01       	movw	r20, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_readPin+0x7e>
    17de:	55 95       	asr	r21
    17e0:	47 95       	ror	r20
    17e2:	8a 95       	dec	r24
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_readPin+0x7a>
    17e6:	ca 01       	movw	r24, r20
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	88 23       	and	r24, r24
    17ee:	19 f0       	breq	.+6      	; 0x17f6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17f0:	81 e0       	ldi	r24, 0x01	; 1
    17f2:	89 83       	std	Y+1, r24	; 0x01
    17f4:	49 c0       	rjmp	.+146    	; 0x1888 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17f6:	19 82       	std	Y+1, r1	; 0x01
    17f8:	47 c0       	rjmp	.+142    	; 0x1888 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17fa:	e6 e3       	ldi	r30, 0x36	; 54
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	28 2f       	mov	r18, r24
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	8b 81       	ldd	r24, Y+3	; 0x03
    1806:	88 2f       	mov	r24, r24
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a9 01       	movw	r20, r18
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <GPIO_readPin+0xae>
    180e:	55 95       	asr	r21
    1810:	47 95       	ror	r20
    1812:	8a 95       	dec	r24
    1814:	e2 f7       	brpl	.-8      	; 0x180e <GPIO_readPin+0xaa>
    1816:	ca 01       	movw	r24, r20
    1818:	81 70       	andi	r24, 0x01	; 1
    181a:	90 70       	andi	r25, 0x00	; 0
    181c:	88 23       	and	r24, r24
    181e:	19 f0       	breq	.+6      	; 0x1826 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	89 83       	std	Y+1, r24	; 0x01
    1824:	31 c0       	rjmp	.+98     	; 0x1888 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1826:	19 82       	std	Y+1, r1	; 0x01
    1828:	2f c0       	rjmp	.+94     	; 0x1888 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    182a:	e3 e3       	ldi	r30, 0x33	; 51
    182c:	f0 e0       	ldi	r31, 0x00	; 0
    182e:	80 81       	ld	r24, Z
    1830:	28 2f       	mov	r18, r24
    1832:	30 e0       	ldi	r19, 0x00	; 0
    1834:	8b 81       	ldd	r24, Y+3	; 0x03
    1836:	88 2f       	mov	r24, r24
    1838:	90 e0       	ldi	r25, 0x00	; 0
    183a:	a9 01       	movw	r20, r18
    183c:	02 c0       	rjmp	.+4      	; 0x1842 <GPIO_readPin+0xde>
    183e:	55 95       	asr	r21
    1840:	47 95       	ror	r20
    1842:	8a 95       	dec	r24
    1844:	e2 f7       	brpl	.-8      	; 0x183e <GPIO_readPin+0xda>
    1846:	ca 01       	movw	r24, r20
    1848:	81 70       	andi	r24, 0x01	; 1
    184a:	90 70       	andi	r25, 0x00	; 0
    184c:	88 23       	and	r24, r24
    184e:	19 f0       	breq	.+6      	; 0x1856 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1850:	81 e0       	ldi	r24, 0x01	; 1
    1852:	89 83       	std	Y+1, r24	; 0x01
    1854:	19 c0       	rjmp	.+50     	; 0x1888 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1856:	19 82       	std	Y+1, r1	; 0x01
    1858:	17 c0       	rjmp	.+46     	; 0x1888 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    185a:	e0 e3       	ldi	r30, 0x30	; 48
    185c:	f0 e0       	ldi	r31, 0x00	; 0
    185e:	80 81       	ld	r24, Z
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	8b 81       	ldd	r24, Y+3	; 0x03
    1866:	88 2f       	mov	r24, r24
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	a9 01       	movw	r20, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <GPIO_readPin+0x10e>
    186e:	55 95       	asr	r21
    1870:	47 95       	ror	r20
    1872:	8a 95       	dec	r24
    1874:	e2 f7       	brpl	.-8      	; 0x186e <GPIO_readPin+0x10a>
    1876:	ca 01       	movw	r24, r20
    1878:	81 70       	andi	r24, 0x01	; 1
    187a:	90 70       	andi	r25, 0x00	; 0
    187c:	88 23       	and	r24, r24
    187e:	19 f0       	breq	.+6      	; 0x1886 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	89 83       	std	Y+1, r24	; 0x01
    1884:	01 c0       	rjmp	.+2      	; 0x1888 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1886:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1888:	89 81       	ldd	r24, Y+1	; 0x01
}
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	cf 91       	pop	r28
    1896:	df 91       	pop	r29
    1898:	08 95       	ret

0000189a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    189a:	df 93       	push	r29
    189c:	cf 93       	push	r28
    189e:	00 d0       	rcall	.+0      	; 0x18a0 <GPIO_setupPortDirection+0x6>
    18a0:	00 d0       	rcall	.+0      	; 0x18a2 <GPIO_setupPortDirection+0x8>
    18a2:	cd b7       	in	r28, 0x3d	; 61
    18a4:	de b7       	in	r29, 0x3e	; 62
    18a6:	89 83       	std	Y+1, r24	; 0x01
    18a8:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	84 30       	cpi	r24, 0x04	; 4
    18ae:	90 f5       	brcc	.+100    	; 0x1914 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18b0:	89 81       	ldd	r24, Y+1	; 0x01
    18b2:	28 2f       	mov	r18, r24
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	3c 83       	std	Y+4, r19	; 0x04
    18b8:	2b 83       	std	Y+3, r18	; 0x03
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	9c 81       	ldd	r25, Y+4	; 0x04
    18be:	81 30       	cpi	r24, 0x01	; 1
    18c0:	91 05       	cpc	r25, r1
    18c2:	d1 f0       	breq	.+52     	; 0x18f8 <GPIO_setupPortDirection+0x5e>
    18c4:	2b 81       	ldd	r18, Y+3	; 0x03
    18c6:	3c 81       	ldd	r19, Y+4	; 0x04
    18c8:	22 30       	cpi	r18, 0x02	; 2
    18ca:	31 05       	cpc	r19, r1
    18cc:	2c f4       	brge	.+10     	; 0x18d8 <GPIO_setupPortDirection+0x3e>
    18ce:	8b 81       	ldd	r24, Y+3	; 0x03
    18d0:	9c 81       	ldd	r25, Y+4	; 0x04
    18d2:	00 97       	sbiw	r24, 0x00	; 0
    18d4:	61 f0       	breq	.+24     	; 0x18ee <GPIO_setupPortDirection+0x54>
    18d6:	1e c0       	rjmp	.+60     	; 0x1914 <GPIO_setupPortDirection+0x7a>
    18d8:	2b 81       	ldd	r18, Y+3	; 0x03
    18da:	3c 81       	ldd	r19, Y+4	; 0x04
    18dc:	22 30       	cpi	r18, 0x02	; 2
    18de:	31 05       	cpc	r19, r1
    18e0:	81 f0       	breq	.+32     	; 0x1902 <GPIO_setupPortDirection+0x68>
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	83 30       	cpi	r24, 0x03	; 3
    18e8:	91 05       	cpc	r25, r1
    18ea:	81 f0       	breq	.+32     	; 0x190c <GPIO_setupPortDirection+0x72>
    18ec:	13 c0       	rjmp	.+38     	; 0x1914 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18ee:	ea e3       	ldi	r30, 0x3A	; 58
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	8a 81       	ldd	r24, Y+2	; 0x02
    18f4:	80 83       	st	Z, r24
    18f6:	0e c0       	rjmp	.+28     	; 0x1914 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18f8:	e7 e3       	ldi	r30, 0x37	; 55
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	8a 81       	ldd	r24, Y+2	; 0x02
    18fe:	80 83       	st	Z, r24
    1900:	09 c0       	rjmp	.+18     	; 0x1914 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1902:	e4 e3       	ldi	r30, 0x34	; 52
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	8a 81       	ldd	r24, Y+2	; 0x02
    1908:	80 83       	st	Z, r24
    190a:	04 c0       	rjmp	.+8      	; 0x1914 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    190c:	e1 e3       	ldi	r30, 0x31	; 49
    190e:	f0 e0       	ldi	r31, 0x00	; 0
    1910:	8a 81       	ldd	r24, Y+2	; 0x02
    1912:	80 83       	st	Z, r24
			break;
		}
	}
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	0f 90       	pop	r0
    191a:	0f 90       	pop	r0
    191c:	cf 91       	pop	r28
    191e:	df 91       	pop	r29
    1920:	08 95       	ret

00001922 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1922:	df 93       	push	r29
    1924:	cf 93       	push	r28
    1926:	00 d0       	rcall	.+0      	; 0x1928 <GPIO_writePort+0x6>
    1928:	00 d0       	rcall	.+0      	; 0x192a <GPIO_writePort+0x8>
    192a:	cd b7       	in	r28, 0x3d	; 61
    192c:	de b7       	in	r29, 0x3e	; 62
    192e:	89 83       	std	Y+1, r24	; 0x01
    1930:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	84 30       	cpi	r24, 0x04	; 4
    1936:	90 f5       	brcc	.+100    	; 0x199c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1938:	89 81       	ldd	r24, Y+1	; 0x01
    193a:	28 2f       	mov	r18, r24
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	3c 83       	std	Y+4, r19	; 0x04
    1940:	2b 83       	std	Y+3, r18	; 0x03
    1942:	8b 81       	ldd	r24, Y+3	; 0x03
    1944:	9c 81       	ldd	r25, Y+4	; 0x04
    1946:	81 30       	cpi	r24, 0x01	; 1
    1948:	91 05       	cpc	r25, r1
    194a:	d1 f0       	breq	.+52     	; 0x1980 <GPIO_writePort+0x5e>
    194c:	2b 81       	ldd	r18, Y+3	; 0x03
    194e:	3c 81       	ldd	r19, Y+4	; 0x04
    1950:	22 30       	cpi	r18, 0x02	; 2
    1952:	31 05       	cpc	r19, r1
    1954:	2c f4       	brge	.+10     	; 0x1960 <GPIO_writePort+0x3e>
    1956:	8b 81       	ldd	r24, Y+3	; 0x03
    1958:	9c 81       	ldd	r25, Y+4	; 0x04
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	61 f0       	breq	.+24     	; 0x1976 <GPIO_writePort+0x54>
    195e:	1e c0       	rjmp	.+60     	; 0x199c <GPIO_writePort+0x7a>
    1960:	2b 81       	ldd	r18, Y+3	; 0x03
    1962:	3c 81       	ldd	r19, Y+4	; 0x04
    1964:	22 30       	cpi	r18, 0x02	; 2
    1966:	31 05       	cpc	r19, r1
    1968:	81 f0       	breq	.+32     	; 0x198a <GPIO_writePort+0x68>
    196a:	8b 81       	ldd	r24, Y+3	; 0x03
    196c:	9c 81       	ldd	r25, Y+4	; 0x04
    196e:	83 30       	cpi	r24, 0x03	; 3
    1970:	91 05       	cpc	r25, r1
    1972:	81 f0       	breq	.+32     	; 0x1994 <GPIO_writePort+0x72>
    1974:	13 c0       	rjmp	.+38     	; 0x199c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1976:	eb e3       	ldi	r30, 0x3B	; 59
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	8a 81       	ldd	r24, Y+2	; 0x02
    197c:	80 83       	st	Z, r24
    197e:	0e c0       	rjmp	.+28     	; 0x199c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1980:	e8 e3       	ldi	r30, 0x38	; 56
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	80 83       	st	Z, r24
    1988:	09 c0       	rjmp	.+18     	; 0x199c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    198a:	e5 e3       	ldi	r30, 0x35	; 53
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	8a 81       	ldd	r24, Y+2	; 0x02
    1990:	80 83       	st	Z, r24
    1992:	04 c0       	rjmp	.+8      	; 0x199c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1994:	e2 e3       	ldi	r30, 0x32	; 50
    1996:	f0 e0       	ldi	r31, 0x00	; 0
    1998:	8a 81       	ldd	r24, Y+2	; 0x02
    199a:	80 83       	st	Z, r24
			break;
		}
	}
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <GPIO_readPort+0x6>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <GPIO_readPort+0x8>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19b8:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	84 30       	cpi	r24, 0x04	; 4
    19be:	90 f5       	brcc	.+100    	; 0x1a24 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19c0:	8a 81       	ldd	r24, Y+2	; 0x02
    19c2:	28 2f       	mov	r18, r24
    19c4:	30 e0       	ldi	r19, 0x00	; 0
    19c6:	3c 83       	std	Y+4, r19	; 0x04
    19c8:	2b 83       	std	Y+3, r18	; 0x03
    19ca:	8b 81       	ldd	r24, Y+3	; 0x03
    19cc:	9c 81       	ldd	r25, Y+4	; 0x04
    19ce:	81 30       	cpi	r24, 0x01	; 1
    19d0:	91 05       	cpc	r25, r1
    19d2:	d1 f0       	breq	.+52     	; 0x1a08 <GPIO_readPort+0x5e>
    19d4:	2b 81       	ldd	r18, Y+3	; 0x03
    19d6:	3c 81       	ldd	r19, Y+4	; 0x04
    19d8:	22 30       	cpi	r18, 0x02	; 2
    19da:	31 05       	cpc	r19, r1
    19dc:	2c f4       	brge	.+10     	; 0x19e8 <GPIO_readPort+0x3e>
    19de:	8b 81       	ldd	r24, Y+3	; 0x03
    19e0:	9c 81       	ldd	r25, Y+4	; 0x04
    19e2:	00 97       	sbiw	r24, 0x00	; 0
    19e4:	61 f0       	breq	.+24     	; 0x19fe <GPIO_readPort+0x54>
    19e6:	1e c0       	rjmp	.+60     	; 0x1a24 <GPIO_readPort+0x7a>
    19e8:	2b 81       	ldd	r18, Y+3	; 0x03
    19ea:	3c 81       	ldd	r19, Y+4	; 0x04
    19ec:	22 30       	cpi	r18, 0x02	; 2
    19ee:	31 05       	cpc	r19, r1
    19f0:	81 f0       	breq	.+32     	; 0x1a12 <GPIO_readPort+0x68>
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	9c 81       	ldd	r25, Y+4	; 0x04
    19f6:	83 30       	cpi	r24, 0x03	; 3
    19f8:	91 05       	cpc	r25, r1
    19fa:	81 f0       	breq	.+32     	; 0x1a1c <GPIO_readPort+0x72>
    19fc:	13 c0       	rjmp	.+38     	; 0x1a24 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19fe:	e9 e3       	ldi	r30, 0x39	; 57
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	89 83       	std	Y+1, r24	; 0x01
    1a06:	0e c0       	rjmp	.+28     	; 0x1a24 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a08:	e6 e3       	ldi	r30, 0x36	; 54
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	80 81       	ld	r24, Z
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	09 c0       	rjmp	.+18     	; 0x1a24 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a12:	e3 e3       	ldi	r30, 0x33	; 51
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	89 83       	std	Y+1, r24	; 0x01
    1a1a:	04 c0       	rjmp	.+8      	; 0x1a24 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a1c:	e0 e3       	ldi	r30, 0x30	; 48
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a24:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a26:	0f 90       	pop	r0
    1a28:	0f 90       	pop	r0
    1a2a:	0f 90       	pop	r0
    1a2c:	0f 90       	pop	r0
    1a2e:	cf 91       	pop	r28
    1a30:	df 91       	pop	r29
    1a32:	08 95       	ret

00001a34 <TWI_init>:
#include "i2c.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const I2C_ConfigType* Config_Ptr)
{
    1a34:	df 93       	push	r29
    1a36:	cf 93       	push	r28
    1a38:	00 d0       	rcall	.+0      	; 0x1a3a <TWI_init+0x6>
    1a3a:	cd b7       	in	r28, 0x3d	; 61
    1a3c:	de b7       	in	r29, 0x3e	; 62
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
	if((Config_Ptr->Bit_rate)==400){
    1a42:	e9 81       	ldd	r30, Y+1	; 0x01
    1a44:	fa 81       	ldd	r31, Y+2	; 0x02
    1a46:	80 81       	ld	r24, Z
    1a48:	91 81       	ldd	r25, Z+1	; 0x01
    1a4a:	21 e0       	ldi	r18, 0x01	; 1
    1a4c:	80 39       	cpi	r24, 0x90	; 144
    1a4e:	92 07       	cpc	r25, r18
    1a50:	61 f4       	brne	.+24     	; 0x1a6a <TWI_init+0x36>
		TWBR=0X02;
    1a52:	e0 e2       	ldi	r30, 0x20	; 32
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	82 e0       	ldi	r24, 0x02	; 2
    1a58:	80 83       	st	Z, r24
		TWSR &=0XFC; /* make the prescale equal 1*/
    1a5a:	a1 e2       	ldi	r26, 0x21	; 33
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e1 e2       	ldi	r30, 0x21	; 33
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	8c 7f       	andi	r24, 0xFC	; 252
    1a66:	8c 93       	st	X, r24
    1a68:	13 c0       	rjmp	.+38     	; 0x1a90 <TWI_init+0x5c>
	}
	else if((Config_Ptr->Bit_rate)==100){
    1a6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1a6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1a6e:	80 81       	ld	r24, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	84 36       	cpi	r24, 0x64	; 100
    1a74:	91 05       	cpc	r25, r1
    1a76:	61 f4       	brne	.+24     	; 0x1a90 <TWI_init+0x5c>
		TWBR=0X02;
    1a78:	e0 e2       	ldi	r30, 0x20	; 32
    1a7a:	f0 e0       	ldi	r31, 0x00	; 0
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	80 83       	st	Z, r24
		TWSR =(TWSR & 0XFC) |(1<<TWPS0);  /* make the prescale equal 4*/
    1a80:	a1 e2       	ldi	r26, 0x21	; 33
    1a82:	b0 e0       	ldi	r27, 0x00	; 0
    1a84:	e1 e2       	ldi	r30, 0x21	; 33
    1a86:	f0 e0       	ldi	r31, 0x00	; 0
    1a88:	80 81       	ld	r24, Z
    1a8a:	8c 7f       	andi	r24, 0xFC	; 252
    1a8c:	81 60       	ori	r24, 0x01	; 1
    1a8e:	8c 93       	st	X, r24
	}
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; /* configuring the address for the device*/
    1a90:	a2 e2       	ldi	r26, 0x22	; 34
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	82 81       	ldd	r24, Z+2	; 0x02
    1a9a:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    1a9c:	e6 e5       	ldi	r30, 0x56	; 86
    1a9e:	f0 e0       	ldi	r31, 0x00	; 0
    1aa0:	84 e0       	ldi	r24, 0x04	; 4
    1aa2:	80 83       	st	Z, r24
}
    1aa4:	0f 90       	pop	r0
    1aa6:	0f 90       	pop	r0
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <TWI_start>:



void TWI_start(void)
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1ab6:	e6 e5       	ldi	r30, 0x56	; 86
    1ab8:	f0 e0       	ldi	r31, 0x00	; 0
    1aba:	84 ea       	ldi	r24, 0xA4	; 164
    1abc:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1abe:	e6 e5       	ldi	r30, 0x56	; 86
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	88 23       	and	r24, r24
    1ac6:	dc f7       	brge	.-10     	; 0x1abe <TWI_start+0x10>
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <TWI_stop>:

void TWI_stop(void)
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1ad6:	e6 e5       	ldi	r30, 0x56	; 86
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	84 e9       	ldi	r24, 0x94	; 148
    1adc:	80 83       	st	Z, r24
}
    1ade:	cf 91       	pop	r28
    1ae0:	df 91       	pop	r29
    1ae2:	08 95       	ret

00001ae4 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1ae4:	df 93       	push	r29
    1ae6:	cf 93       	push	r28
    1ae8:	0f 92       	push	r0
    1aea:	cd b7       	in	r28, 0x3d	; 61
    1aec:	de b7       	in	r29, 0x3e	; 62
    1aee:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    1af0:	e3 e2       	ldi	r30, 0x23	; 35
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	89 81       	ldd	r24, Y+1	; 0x01
    1af6:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1af8:	e6 e5       	ldi	r30, 0x56	; 86
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	84 e8       	ldi	r24, 0x84	; 132
    1afe:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b00:	e6 e5       	ldi	r30, 0x56	; 86
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	80 81       	ld	r24, Z
    1b06:	88 23       	and	r24, r24
    1b08:	dc f7       	brge	.-10     	; 0x1b00 <TWI_writeByte+0x1c>
}
    1b0a:	0f 90       	pop	r0
    1b0c:	cf 91       	pop	r28
    1b0e:	df 91       	pop	r29
    1b10:	08 95       	ret

00001b12 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    1b12:	df 93       	push	r29
    1b14:	cf 93       	push	r28
    1b16:	cd b7       	in	r28, 0x3d	; 61
    1b18:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b1a:	e6 e5       	ldi	r30, 0x56	; 86
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	84 ec       	ldi	r24, 0xC4	; 196
    1b20:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b22:	e6 e5       	ldi	r30, 0x56	; 86
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	88 23       	and	r24, r24
    1b2a:	dc f7       	brge	.-10     	; 0x1b22 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    1b2c:	e3 e2       	ldi	r30, 0x23	; 35
    1b2e:	f0 e0       	ldi	r31, 0x00	; 0
    1b30:	80 81       	ld	r24, Z
}
    1b32:	cf 91       	pop	r28
    1b34:	df 91       	pop	r29
    1b36:	08 95       	ret

00001b38 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    1b38:	df 93       	push	r29
    1b3a:	cf 93       	push	r28
    1b3c:	cd b7       	in	r28, 0x3d	; 61
    1b3e:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    1b40:	e6 e5       	ldi	r30, 0x56	; 86
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	84 e8       	ldi	r24, 0x84	; 132
    1b46:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    1b48:	e6 e5       	ldi	r30, 0x56	; 86
    1b4a:	f0 e0       	ldi	r31, 0x00	; 0
    1b4c:	80 81       	ld	r24, Z
    1b4e:	88 23       	and	r24, r24
    1b50:	dc f7       	brge	.-10     	; 0x1b48 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    1b52:	e3 e2       	ldi	r30, 0x23	; 35
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
}
    1b58:	cf 91       	pop	r28
    1b5a:	df 91       	pop	r29
    1b5c:	08 95       	ret

00001b5e <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1b5e:	df 93       	push	r29
    1b60:	cf 93       	push	r28
    1b62:	0f 92       	push	r0
    1b64:	cd b7       	in	r28, 0x3d	; 61
    1b66:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    1b68:	e1 e2       	ldi	r30, 0x21	; 33
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	88 7f       	andi	r24, 0xF8	; 248
    1b70:	89 83       	std	Y+1, r24	; 0x01
    return status;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b74:	0f 90       	pop	r0
    1b76:	cf 91       	pop	r28
    1b78:	df 91       	pop	r29
    1b7a:	08 95       	ret

00001b7c <__vector_9>:
static volatile void (*g_callBackPtr)(void)=NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    1b7c:	1f 92       	push	r1
    1b7e:	0f 92       	push	r0
    1b80:	0f b6       	in	r0, 0x3f	; 63
    1b82:	0f 92       	push	r0
    1b84:	11 24       	eor	r1, r1
    1b86:	2f 93       	push	r18
    1b88:	3f 93       	push	r19
    1b8a:	4f 93       	push	r20
    1b8c:	5f 93       	push	r21
    1b8e:	6f 93       	push	r22
    1b90:	7f 93       	push	r23
    1b92:	8f 93       	push	r24
    1b94:	9f 93       	push	r25
    1b96:	af 93       	push	r26
    1b98:	bf 93       	push	r27
    1b9a:	ef 93       	push	r30
    1b9c:	ff 93       	push	r31
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the edge is detected */
	if(g_callBackPtr !=NULL_PTR){
    1ba6:	80 91 82 00 	lds	r24, 0x0082
    1baa:	90 91 83 00 	lds	r25, 0x0083
    1bae:	00 97       	sbiw	r24, 0x00	; 0
    1bb0:	29 f0       	breq	.+10     	; 0x1bbc <__vector_9+0x40>
		g_callBackPtr();
    1bb2:	e0 91 82 00 	lds	r30, 0x0082
    1bb6:	f0 91 83 00 	lds	r31, 0x0083
    1bba:	09 95       	icall
	}
}
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	ff 91       	pop	r31
    1bc2:	ef 91       	pop	r30
    1bc4:	bf 91       	pop	r27
    1bc6:	af 91       	pop	r26
    1bc8:	9f 91       	pop	r25
    1bca:	8f 91       	pop	r24
    1bcc:	7f 91       	pop	r23
    1bce:	6f 91       	pop	r22
    1bd0:	5f 91       	pop	r21
    1bd2:	4f 91       	pop	r20
    1bd4:	3f 91       	pop	r19
    1bd6:	2f 91       	pop	r18
    1bd8:	0f 90       	pop	r0
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	0f 90       	pop	r0
    1bde:	1f 90       	pop	r1
    1be0:	18 95       	reti

00001be2 <__vector_19>:
ISR(TIMER0_COMP_vect){
    1be2:	1f 92       	push	r1
    1be4:	0f 92       	push	r0
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	0f 92       	push	r0
    1bea:	11 24       	eor	r1, r1
    1bec:	2f 93       	push	r18
    1bee:	3f 93       	push	r19
    1bf0:	4f 93       	push	r20
    1bf2:	5f 93       	push	r21
    1bf4:	6f 93       	push	r22
    1bf6:	7f 93       	push	r23
    1bf8:	8f 93       	push	r24
    1bfa:	9f 93       	push	r25
    1bfc:	af 93       	push	r26
    1bfe:	bf 93       	push	r27
    1c00:	ef 93       	push	r30
    1c02:	ff 93       	push	r31
    1c04:	df 93       	push	r29
    1c06:	cf 93       	push	r28
    1c08:	cd b7       	in	r28, 0x3d	; 61
    1c0a:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the edge is detected */
	if(g_callBackPtr !=NULL_PTR){
    1c0c:	80 91 82 00 	lds	r24, 0x0082
    1c10:	90 91 83 00 	lds	r25, 0x0083
    1c14:	00 97       	sbiw	r24, 0x00	; 0
    1c16:	29 f0       	breq	.+10     	; 0x1c22 <__vector_19+0x40>
		g_callBackPtr();
    1c18:	e0 91 82 00 	lds	r30, 0x0082
    1c1c:	f0 91 83 00 	lds	r31, 0x0083
    1c20:	09 95       	icall
	}
}
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	ff 91       	pop	r31
    1c28:	ef 91       	pop	r30
    1c2a:	bf 91       	pop	r27
    1c2c:	af 91       	pop	r26
    1c2e:	9f 91       	pop	r25
    1c30:	8f 91       	pop	r24
    1c32:	7f 91       	pop	r23
    1c34:	6f 91       	pop	r22
    1c36:	5f 91       	pop	r21
    1c38:	4f 91       	pop	r20
    1c3a:	3f 91       	pop	r19
    1c3c:	2f 91       	pop	r18
    1c3e:	0f 90       	pop	r0
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	0f 90       	pop	r0
    1c44:	1f 90       	pop	r1
    1c46:	18 95       	reti

00001c48 <TIMER0_init>:
 * 	2. Set the prescaler.
 * 	3. Enable the interrupt for compare or for overflow mode depending on what is the mode of the timer0.
 * 	4. set the initial value for the timer0
 * 	5. set the compare value for timer0 if operating on compare mode
 */
void TIMER0_init(const Timer0_ConfigType* Config_Ptr){
    1c48:	df 93       	push	r29
    1c4a:	cf 93       	push	r28
    1c4c:	00 d0       	rcall	.+0      	; 0x1c4e <TIMER0_init+0x6>
    1c4e:	cd b7       	in	r28, 0x3d	; 61
    1c50:	de b7       	in	r29, 0x3e	; 62
    1c52:	9a 83       	std	Y+2, r25	; 0x02
    1c54:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |=(1<<FOC0); /* set FOC0 cause we are using non PWM mode*/
    1c56:	a3 e5       	ldi	r26, 0x53	; 83
    1c58:	b0 e0       	ldi	r27, 0x00	; 0
    1c5a:	e3 e5       	ldi	r30, 0x53	; 83
    1c5c:	f0 e0       	ldi	r31, 0x00	; 0
    1c5e:	80 81       	ld	r24, Z
    1c60:	80 68       	ori	r24, 0x80	; 128
    1c62:	8c 93       	st	X, r24
	TCCR0 =(TCCR0 &0XB7) | ((Config_Ptr->Mode)<<WGM01); /* enable WGM01 if we are using compare mode*/
    1c64:	a3 e5       	ldi	r26, 0x53	; 83
    1c66:	b0 e0       	ldi	r27, 0x00	; 0
    1c68:	e3 e5       	ldi	r30, 0x53	; 83
    1c6a:	f0 e0       	ldi	r31, 0x00	; 0
    1c6c:	80 81       	ld	r24, Z
    1c6e:	28 2f       	mov	r18, r24
    1c70:	27 7b       	andi	r18, 0xB7	; 183
    1c72:	e9 81       	ldd	r30, Y+1	; 0x01
    1c74:	fa 81       	ldd	r31, Y+2	; 0x02
    1c76:	80 81       	ld	r24, Z
    1c78:	88 2f       	mov	r24, r24
    1c7a:	90 e0       	ldi	r25, 0x00	; 0
    1c7c:	88 0f       	add	r24, r24
    1c7e:	99 1f       	adc	r25, r25
    1c80:	88 0f       	add	r24, r24
    1c82:	99 1f       	adc	r25, r25
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	82 2b       	or	r24, r18
    1c8a:	8c 93       	st	X, r24
	if((Config_Ptr->Mode)==Compare_Mode)
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	80 81       	ld	r24, Z
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	a1 f4       	brne	.+40     	; 0x1cbe <TIMER0_init+0x76>
		TCCR0 = (TCCR0 &0XCF) |((Config_Ptr->Compare_Mode)<<4); /* configure the mode of compare such as toggle or clear when the compare matches*/
    1c96:	a3 e5       	ldi	r26, 0x53	; 83
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e3 e5       	ldi	r30, 0x53	; 83
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	28 2f       	mov	r18, r24
    1ca2:	2f 7c       	andi	r18, 0xCF	; 207
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	81 81       	ldd	r24, Z+1	; 0x01
    1caa:	88 2f       	mov	r24, r24
    1cac:	90 e0       	ldi	r25, 0x00	; 0
    1cae:	82 95       	swap	r24
    1cb0:	92 95       	swap	r25
    1cb2:	90 7f       	andi	r25, 0xF0	; 240
    1cb4:	98 27       	eor	r25, r24
    1cb6:	80 7f       	andi	r24, 0xF0	; 240
    1cb8:	98 27       	eor	r25, r24
    1cba:	82 2b       	or	r24, r18
    1cbc:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 &0XF8) |((Config_Ptr->Prescale)); /*configuring the prescale */
    1cbe:	a3 e5       	ldi	r26, 0x53	; 83
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	e3 e5       	ldi	r30, 0x53	; 83
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	98 2f       	mov	r25, r24
    1cca:	98 7f       	andi	r25, 0xF8	; 248
    1ccc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cce:	fa 81       	ldd	r31, Y+2	; 0x02
    1cd0:	82 81       	ldd	r24, Z+2	; 0x02
    1cd2:	89 2b       	or	r24, r25
    1cd4:	8c 93       	st	X, r24
	TCNT0=Config_Ptr->intial_value; /* configure the initial value */
    1cd6:	a2 e5       	ldi	r26, 0x52	; 82
    1cd8:	b0 e0       	ldi	r27, 0x00	; 0
    1cda:	e9 81       	ldd	r30, Y+1	; 0x01
    1cdc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cde:	83 81       	ldd	r24, Z+3	; 0x03
    1ce0:	8c 93       	st	X, r24
	if((Config_Ptr->Mode)==Compare_Mode){
    1ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce6:	80 81       	ld	r24, Z
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	79 f4       	brne	.+30     	; 0x1d0a <TIMER0_init+0xc2>
		OCR0=Config_Ptr->compare_value;  /* configure the compare value if the timer is operating on compare mode only*/
    1cec:	ac e5       	ldi	r26, 0x5C	; 92
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf2:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf4:	84 81       	ldd	r24, Z+4	; 0x04
    1cf6:	8c 93       	st	X, r24
		TIMSK =(TIMSK&0XFC) |(1<<OCIE0); /* enable interrupt for compare mode */
    1cf8:	a9 e5       	ldi	r26, 0x59	; 89
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e9 e5       	ldi	r30, 0x59	; 89
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8c 7f       	andi	r24, 0xFC	; 252
    1d04:	82 60       	ori	r24, 0x02	; 2
    1d06:	8c 93       	st	X, r24
    1d08:	08 c0       	rjmp	.+16     	; 0x1d1a <TIMER0_init+0xd2>
	}
	else
		TIMSK =(TIMSK&0XFC) |(1<<TOIE0); /*enable interrupt for overflow mode*/
    1d0a:	a9 e5       	ldi	r26, 0x59	; 89
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e9 e5       	ldi	r30, 0x59	; 89
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	8c 7f       	andi	r24, 0xFC	; 252
    1d16:	81 60       	ori	r24, 0x01	; 1
    1d18:	8c 93       	st	X, r24
}
    1d1a:	0f 90       	pop	r0
    1d1c:	0f 90       	pop	r0
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <TIMER0_SetCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void TIMER0_SetCallBack(void(*a_ptr)(void)){
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	00 d0       	rcall	.+0      	; 0x1d2a <TIMER0_SetCallBack+0x6>
    1d2a:	cd b7       	in	r28, 0x3d	; 61
    1d2c:	de b7       	in	r29, 0x3e	; 62
    1d2e:	9a 83       	std	Y+2, r25	; 0x02
    1d30:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr; /* Save the address of the Call back function in a global variable */
    1d32:	89 81       	ldd	r24, Y+1	; 0x01
    1d34:	9a 81       	ldd	r25, Y+2	; 0x02
    1d36:	90 93 83 00 	sts	0x0083, r25
    1d3a:	80 93 82 00 	sts	0x0082, r24
}
    1d3e:	0f 90       	pop	r0
    1d40:	0f 90       	pop	r0
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	08 95       	ret

00001d48 <TIMER0_Deinit>:

/*
 * Description: Function to De-initlize the timer to start from beginning again .
 */
void TIMER0_Deinit(){
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    1d50:	e3 e5       	ldi	r30, 0x53	; 83
    1d52:	f0 e0       	ldi	r31, 0x00	; 0
    1d54:	10 82       	st	Z, r1
	TCNT0=0;
    1d56:	e2 e5       	ldi	r30, 0x52	; 82
    1d58:	f0 e0       	ldi	r31, 0x00	; 0
    1d5a:	10 82       	st	Z, r1
	OCR0=0;
    1d5c:	ec e5       	ldi	r30, 0x5C	; 92
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	10 82       	st	Z, r1
	TIMSK =(TIMSK&0XFC);
    1d62:	a9 e5       	ldi	r26, 0x59	; 89
    1d64:	b0 e0       	ldi	r27, 0x00	; 0
    1d66:	e9 e5       	ldi	r30, 0x59	; 89
    1d68:	f0 e0       	ldi	r31, 0x00	; 0
    1d6a:	80 81       	ld	r24, Z
    1d6c:	8c 7f       	andi	r24, 0xFC	; 252
    1d6e:	8c 93       	st	X, r24
}
    1d70:	cf 91       	pop	r28
    1d72:	df 91       	pop	r29
    1d74:	08 95       	ret

00001d76 <UART_init>:

#include "uart.h"
#include "common_macros.h"
#include <avr/io.h>

void UART_init(const UART_ConfigType* Config_Ptr){
    1d76:	df 93       	push	r29
    1d78:	cf 93       	push	r28
    1d7a:	00 d0       	rcall	.+0      	; 0x1d7c <UART_init+0x6>
    1d7c:	00 d0       	rcall	.+0      	; 0x1d7e <UART_init+0x8>
    1d7e:	cd b7       	in	r28, 0x3d	; 61
    1d80:	de b7       	in	r29, 0x3e	; 62
    1d82:	9c 83       	std	Y+4, r25	; 0x04
    1d84:	8b 83       	std	Y+3, r24	; 0x03
	uint16 myUbrr=0;
    1d86:	1a 82       	std	Y+2, r1	; 0x02
    1d88:	19 82       	std	Y+1, r1	; 0x01
	UCSRA |= (1<<U2X); /* U2X = 1 for double transmission speed */
    1d8a:	ab e2       	ldi	r26, 0x2B	; 43
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	eb e2       	ldi	r30, 0x2B	; 43
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	82 60       	ori	r24, 0x02	; 2
    1d96:	8c 93       	st	X, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 will be configured later
		 ***********************************************************************/
	UCSRB =(1<<RXEN) |(1<<TXEN);
    1d98:	ea e2       	ldi	r30, 0x2A	; 42
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	88 e1       	ldi	r24, 0x18	; 24
    1d9e:	80 83       	st	Z, r24
	if(Config_Ptr->BitSize ==9)
    1da0:	eb 81       	ldd	r30, Y+3	; 0x03
    1da2:	fc 81       	ldd	r31, Y+4	; 0x04
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	89 30       	cpi	r24, 0x09	; 9
    1da8:	39 f4       	brne	.+14     	; 0x1db8 <UART_init+0x42>
		UCSRB |=(1<<UCSZ2); /* UCSZ2 must be set in 9 Bit Mode */
    1daa:	aa e2       	ldi	r26, 0x2A	; 42
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	ea e2       	ldi	r30, 0x2A	; 42
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	84 60       	ori	r24, 0x04	; 4
    1db6:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
		 * URSEL   = 1 The URSEL must be one when writing the UCSRC
		 * UMSEL   = 0 Asynchronous Operation
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
	UCSRC =(1<<URSEL);
    1db8:	e0 e4       	ldi	r30, 0x40	; 64
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 e8       	ldi	r24, 0x80	; 128
    1dbe:	80 83       	st	Z, r24
	if(Config_Ptr->BitSize ==9){
    1dc0:	eb 81       	ldd	r30, Y+3	; 0x03
    1dc2:	fc 81       	ldd	r31, Y+4	; 0x04
    1dc4:	82 81       	ldd	r24, Z+2	; 0x02
    1dc6:	89 30       	cpi	r24, 0x09	; 9
    1dc8:	91 f4       	brne	.+36     	; 0x1dee <UART_init+0x78>
			UCSRC =(UCSRC &0XF9) |(((Config_Ptr->BitSize)-4)<<1); /* configuring the Bit Size*/
    1dca:	a0 e4       	ldi	r26, 0x40	; 64
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	e0 e4       	ldi	r30, 0x40	; 64
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	29 7f       	andi	r18, 0xF9	; 249
    1dd8:	eb 81       	ldd	r30, Y+3	; 0x03
    1dda:	fc 81       	ldd	r31, Y+4	; 0x04
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	88 2f       	mov	r24, r24
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	04 97       	sbiw	r24, 0x04	; 4
    1de4:	88 0f       	add	r24, r24
    1de6:	99 1f       	adc	r25, r25
    1de8:	82 2b       	or	r24, r18
    1dea:	8c 93       	st	X, r24
    1dec:	10 c0       	rjmp	.+32     	; 0x1e0e <UART_init+0x98>
			//UCSRB |=(1<<UCSZ2); /* UCSZ2 must be set in 9 Bit Mode */
		}
		else
			UCSRC =(UCSRC &0XF9) |((Config_Ptr->BitSize)<<1); /* configuring the Bit Size*/
    1dee:	a0 e4       	ldi	r26, 0x40	; 64
    1df0:	b0 e0       	ldi	r27, 0x00	; 0
    1df2:	e0 e4       	ldi	r30, 0x40	; 64
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	28 2f       	mov	r18, r24
    1dfa:	29 7f       	andi	r18, 0xF9	; 249
    1dfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1dfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	88 2f       	mov	r24, r24
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	88 0f       	add	r24, r24
    1e08:	99 1f       	adc	r25, r25
    1e0a:	82 2b       	or	r24, r18
    1e0c:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityMode)<<4);/* configuring the Parity Mode*/
    1e0e:	a0 e4       	ldi	r26, 0x40	; 64
    1e10:	b0 e0       	ldi	r27, 0x00	; 0
    1e12:	e0 e4       	ldi	r30, 0x40	; 64
    1e14:	f0 e0       	ldi	r31, 0x00	; 0
    1e16:	80 81       	ld	r24, Z
    1e18:	28 2f       	mov	r18, r24
    1e1a:	2f 7c       	andi	r18, 0xCF	; 207
    1e1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1e1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1e20:	80 81       	ld	r24, Z
    1e22:	88 2f       	mov	r24, r24
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	82 95       	swap	r24
    1e28:	92 95       	swap	r25
    1e2a:	90 7f       	andi	r25, 0xF0	; 240
    1e2c:	98 27       	eor	r25, r24
    1e2e:	80 7f       	andi	r24, 0xF0	; 240
    1e30:	98 27       	eor	r25, r24
    1e32:	82 2b       	or	r24, r18
    1e34:	8c 93       	st	X, r24
	UCSRC = (UCSRC &0XF7) |(Config_Ptr->StopBit<<3); /* configuring the number of Stop Bit */
    1e36:	a0 e4       	ldi	r26, 0x40	; 64
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	e0 e4       	ldi	r30, 0x40	; 64
    1e3c:	f0 e0       	ldi	r31, 0x00	; 0
    1e3e:	80 81       	ld	r24, Z
    1e40:	28 2f       	mov	r18, r24
    1e42:	27 7f       	andi	r18, 0xF7	; 247
    1e44:	eb 81       	ldd	r30, Y+3	; 0x03
    1e46:	fc 81       	ldd	r31, Y+4	; 0x04
    1e48:	81 81       	ldd	r24, Z+1	; 0x01
    1e4a:	88 2f       	mov	r24, r24
    1e4c:	90 e0       	ldi	r25, 0x00	; 0
    1e4e:	88 0f       	add	r24, r24
    1e50:	99 1f       	adc	r25, r25
    1e52:	88 0f       	add	r24, r24
    1e54:	99 1f       	adc	r25, r25
    1e56:	88 0f       	add	r24, r24
    1e58:	99 1f       	adc	r25, r25
    1e5a:	82 2b       	or	r24, r18
    1e5c:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	myUbrr = (uint16)(((F_CPU / ((Config_Ptr->Baud_Rate) * 8UL))) - 1);
    1e5e:	eb 81       	ldd	r30, Y+3	; 0x03
    1e60:	fc 81       	ldd	r31, Y+4	; 0x04
    1e62:	83 81       	ldd	r24, Z+3	; 0x03
    1e64:	94 81       	ldd	r25, Z+4	; 0x04
    1e66:	a5 81       	ldd	r26, Z+5	; 0x05
    1e68:	b6 81       	ldd	r27, Z+6	; 0x06
    1e6a:	88 0f       	add	r24, r24
    1e6c:	99 1f       	adc	r25, r25
    1e6e:	aa 1f       	adc	r26, r26
    1e70:	bb 1f       	adc	r27, r27
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	aa 1f       	adc	r26, r26
    1e78:	bb 1f       	adc	r27, r27
    1e7a:	88 0f       	add	r24, r24
    1e7c:	99 1f       	adc	r25, r25
    1e7e:	aa 1f       	adc	r26, r26
    1e80:	bb 1f       	adc	r27, r27
    1e82:	9c 01       	movw	r18, r24
    1e84:	ad 01       	movw	r20, r26
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	94 eb       	ldi	r25, 0xB4	; 180
    1e8a:	a4 ec       	ldi	r26, 0xC4	; 196
    1e8c:	b4 e0       	ldi	r27, 0x04	; 4
    1e8e:	bc 01       	movw	r22, r24
    1e90:	cd 01       	movw	r24, r26
    1e92:	0e 94 f4 0f 	call	0x1fe8	; 0x1fe8 <__udivmodsi4>
    1e96:	da 01       	movw	r26, r20
    1e98:	c9 01       	movw	r24, r18
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	9a 83       	std	Y+2, r25	; 0x02
    1e9e:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = myUbrr;
    1ea0:	e9 e2       	ldi	r30, 0x29	; 41
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	89 81       	ldd	r24, Y+1	; 0x01
    1ea6:	80 83       	st	Z, r24
	UBRRH = myUbrr>>8;
    1ea8:	e0 e4       	ldi	r30, 0x40	; 64
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	89 81       	ldd	r24, Y+1	; 0x01
    1eae:	9a 81       	ldd	r25, Y+2	; 0x02
    1eb0:	89 2f       	mov	r24, r25
    1eb2:	99 27       	eor	r25, r25
    1eb4:	80 83       	st	Z, r24

}
    1eb6:	0f 90       	pop	r0
    1eb8:	0f 90       	pop	r0
    1eba:	0f 90       	pop	r0
    1ebc:	0f 90       	pop	r0
    1ebe:	cf 91       	pop	r28
    1ec0:	df 91       	pop	r29
    1ec2:	08 95       	ret

00001ec4 <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    1ec4:	df 93       	push	r29
    1ec6:	cf 93       	push	r28
    1ec8:	0f 92       	push	r0
    1eca:	cd b7       	in	r28, 0x3d	; 61
    1ecc:	de b7       	in	r29, 0x3e	; 62
    1ece:	89 83       	std	Y+1, r24	; 0x01
	//UCSRB |= ((data<<8)<<TXB8); /*when using 9 bit mode , we have to put the 9th bit in TXB8 first*/
	/*
	* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	* transmitting a new byte so wait until this flag is set to one
	*/
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    1ed0:	eb e2       	ldi	r30, 0x2B	; 43
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	80 72       	andi	r24, 0x20	; 32
    1edc:	90 70       	andi	r25, 0x00	; 0
    1ede:	00 97       	sbiw	r24, 0x00	; 0
    1ee0:	b9 f3       	breq	.-18     	; 0x1ed0 <UART_sendByte+0xc>
	/*
	* Put the required data in the UDR register and it also clear the UDRE flag as
	* the UDR register is not empty now
	*/
	UDR=data;
    1ee2:	ec e2       	ldi	r30, 0x2C	; 44
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	89 81       	ldd	r24, Y+1	; 0x01
    1ee8:	80 83       	st	Z, r24
}
    1eea:	0f 90       	pop	r0
    1eec:	cf 91       	pop	r28
    1eee:	df 91       	pop	r29
    1ef0:	08 95       	ret

00001ef2 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
    1ef2:	df 93       	push	r29
    1ef4:	cf 93       	push	r28
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    1efa:	eb e2       	ldi	r30, 0x2B	; 43
    1efc:	f0 e0       	ldi	r31, 0x00	; 0
    1efe:	80 81       	ld	r24, Z
    1f00:	88 23       	and	r24, r24
    1f02:	dc f7       	brge	.-10     	; 0x1efa <UART_recieveByte+0x8>
	/*
	* Read the received data from the Rx buffer (UDR)
	* The RXC flag will be cleared after read the data
	*/
	return UDR;
    1f04:	ec e2       	ldi	r30, 0x2C	; 44
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
}
    1f0a:	cf 91       	pop	r28
    1f0c:	df 91       	pop	r29
    1f0e:	08 95       	ret

00001f10 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <UART_sendString+0x6>
    1f16:	0f 92       	push	r0
    1f18:	cd b7       	in	r28, 0x3d	; 61
    1f1a:	de b7       	in	r29, 0x3e	; 62
    1f1c:	9b 83       	std	Y+3, r25	; 0x03
    1f1e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f20:	19 82       	std	Y+1, r1	; 0x01
    1f22:	0e c0       	rjmp	.+28     	; 0x1f40 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    1f24:	89 81       	ldd	r24, Y+1	; 0x01
    1f26:	28 2f       	mov	r18, r24
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f2e:	fc 01       	movw	r30, r24
    1f30:	e2 0f       	add	r30, r18
    1f32:	f3 1f       	adc	r31, r19
    1f34:	80 81       	ld	r24, Z
    1f36:	0e 94 62 0f 	call	0x1ec4	; 0x1ec4 <UART_sendByte>
		i++;
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	8f 5f       	subi	r24, 0xFF	; 255
    1f3e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
    1f42:	28 2f       	mov	r18, r24
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	8a 81       	ldd	r24, Y+2	; 0x02
    1f48:	9b 81       	ldd	r25, Y+3	; 0x03
    1f4a:	fc 01       	movw	r30, r24
    1f4c:	e2 0f       	add	r30, r18
    1f4e:	f3 1f       	adc	r31, r19
    1f50:	80 81       	ld	r24, Z
    1f52:	88 23       	and	r24, r24
    1f54:	39 f7       	brne	.-50     	; 0x1f24 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    1f56:	0f 90       	pop	r0
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    1f62:	0f 93       	push	r16
    1f64:	1f 93       	push	r17
    1f66:	df 93       	push	r29
    1f68:	cf 93       	push	r28
    1f6a:	00 d0       	rcall	.+0      	; 0x1f6c <UART_receiveString+0xa>
    1f6c:	0f 92       	push	r0
    1f6e:	cd b7       	in	r28, 0x3d	; 61
    1f70:	de b7       	in	r29, 0x3e	; 62
    1f72:	9b 83       	std	Y+3, r25	; 0x03
    1f74:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    1f76:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    1f78:	89 81       	ldd	r24, Y+1	; 0x01
    1f7a:	28 2f       	mov	r18, r24
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f80:	9b 81       	ldd	r25, Y+3	; 0x03
    1f82:	8c 01       	movw	r16, r24
    1f84:	02 0f       	add	r16, r18
    1f86:	13 1f       	adc	r17, r19
    1f88:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <UART_recieveByte>
    1f8c:	f8 01       	movw	r30, r16
    1f8e:	80 83       	st	Z, r24
    1f90:	0f c0       	rjmp	.+30     	; 0x1fb0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    1f92:	89 81       	ldd	r24, Y+1	; 0x01
    1f94:	8f 5f       	subi	r24, 0xFF	; 255
    1f96:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    1f98:	89 81       	ldd	r24, Y+1	; 0x01
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    1fa2:	8c 01       	movw	r16, r24
    1fa4:	02 0f       	add	r16, r18
    1fa6:	13 1f       	adc	r17, r19
    1fa8:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <UART_recieveByte>
    1fac:	f8 01       	movw	r30, r16
    1fae:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1fba:	fc 01       	movw	r30, r24
    1fbc:	e2 0f       	add	r30, r18
    1fbe:	f3 1f       	adc	r31, r19
    1fc0:	80 81       	ld	r24, Z
    1fc2:	83 32       	cpi	r24, 0x23	; 35
    1fc4:	31 f7       	brne	.-52     	; 0x1f92 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	8a 81       	ldd	r24, Y+2	; 0x02
    1fce:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	e2 0f       	add	r30, r18
    1fd4:	f3 1f       	adc	r31, r19
    1fd6:	10 82       	st	Z, r1
}
    1fd8:	0f 90       	pop	r0
    1fda:	0f 90       	pop	r0
    1fdc:	0f 90       	pop	r0
    1fde:	cf 91       	pop	r28
    1fe0:	df 91       	pop	r29
    1fe2:	1f 91       	pop	r17
    1fe4:	0f 91       	pop	r16
    1fe6:	08 95       	ret

00001fe8 <__udivmodsi4>:
    1fe8:	a1 e2       	ldi	r26, 0x21	; 33
    1fea:	1a 2e       	mov	r1, r26
    1fec:	aa 1b       	sub	r26, r26
    1fee:	bb 1b       	sub	r27, r27
    1ff0:	fd 01       	movw	r30, r26
    1ff2:	0d c0       	rjmp	.+26     	; 0x200e <__udivmodsi4_ep>

00001ff4 <__udivmodsi4_loop>:
    1ff4:	aa 1f       	adc	r26, r26
    1ff6:	bb 1f       	adc	r27, r27
    1ff8:	ee 1f       	adc	r30, r30
    1ffa:	ff 1f       	adc	r31, r31
    1ffc:	a2 17       	cp	r26, r18
    1ffe:	b3 07       	cpc	r27, r19
    2000:	e4 07       	cpc	r30, r20
    2002:	f5 07       	cpc	r31, r21
    2004:	20 f0       	brcs	.+8      	; 0x200e <__udivmodsi4_ep>
    2006:	a2 1b       	sub	r26, r18
    2008:	b3 0b       	sbc	r27, r19
    200a:	e4 0b       	sbc	r30, r20
    200c:	f5 0b       	sbc	r31, r21

0000200e <__udivmodsi4_ep>:
    200e:	66 1f       	adc	r22, r22
    2010:	77 1f       	adc	r23, r23
    2012:	88 1f       	adc	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	1a 94       	dec	r1
    2018:	69 f7       	brne	.-38     	; 0x1ff4 <__udivmodsi4_loop>
    201a:	60 95       	com	r22
    201c:	70 95       	com	r23
    201e:	80 95       	com	r24
    2020:	90 95       	com	r25
    2022:	9b 01       	movw	r18, r22
    2024:	ac 01       	movw	r20, r24
    2026:	bd 01       	movw	r22, r26
    2028:	cf 01       	movw	r24, r30
    202a:	08 95       	ret

0000202c <__prologue_saves__>:
    202c:	2f 92       	push	r2
    202e:	3f 92       	push	r3
    2030:	4f 92       	push	r4
    2032:	5f 92       	push	r5
    2034:	6f 92       	push	r6
    2036:	7f 92       	push	r7
    2038:	8f 92       	push	r8
    203a:	9f 92       	push	r9
    203c:	af 92       	push	r10
    203e:	bf 92       	push	r11
    2040:	cf 92       	push	r12
    2042:	df 92       	push	r13
    2044:	ef 92       	push	r14
    2046:	ff 92       	push	r15
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	cf 93       	push	r28
    204e:	df 93       	push	r29
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	ca 1b       	sub	r28, r26
    2056:	db 0b       	sbc	r29, r27
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	09 94       	ijmp

00002064 <__epilogue_restores__>:
    2064:	2a 88       	ldd	r2, Y+18	; 0x12
    2066:	39 88       	ldd	r3, Y+17	; 0x11
    2068:	48 88       	ldd	r4, Y+16	; 0x10
    206a:	5f 84       	ldd	r5, Y+15	; 0x0f
    206c:	6e 84       	ldd	r6, Y+14	; 0x0e
    206e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2070:	8c 84       	ldd	r8, Y+12	; 0x0c
    2072:	9b 84       	ldd	r9, Y+11	; 0x0b
    2074:	aa 84       	ldd	r10, Y+10	; 0x0a
    2076:	b9 84       	ldd	r11, Y+9	; 0x09
    2078:	c8 84       	ldd	r12, Y+8	; 0x08
    207a:	df 80       	ldd	r13, Y+7	; 0x07
    207c:	ee 80       	ldd	r14, Y+6	; 0x06
    207e:	fd 80       	ldd	r15, Y+5	; 0x05
    2080:	0c 81       	ldd	r16, Y+4	; 0x04
    2082:	1b 81       	ldd	r17, Y+3	; 0x03
    2084:	aa 81       	ldd	r26, Y+2	; 0x02
    2086:	b9 81       	ldd	r27, Y+1	; 0x01
    2088:	ce 0f       	add	r28, r30
    208a:	d1 1d       	adc	r29, r1
    208c:	0f b6       	in	r0, 0x3f	; 63
    208e:	f8 94       	cli
    2090:	de bf       	out	0x3e, r29	; 62
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	cd bf       	out	0x3d, r28	; 61
    2096:	ed 01       	movw	r28, r26
    2098:	08 95       	ret

0000209a <_exit>:
    209a:	f8 94       	cli

0000209c <__stop_program>:
    209c:	ff cf       	rjmp	.-2      	; 0x209c <__stop_program>
