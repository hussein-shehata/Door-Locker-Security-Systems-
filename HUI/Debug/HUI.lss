
HUI.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a00  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008e  00800060  00002a00  00002a94  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000ee  008000ee  00002b22  2**0
                  ALLOC
  3 .stab         00002760  00000000  00000000  00002b24  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000124a  00000000  00000000  00005284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000064ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000660e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000677e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  000083c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000092b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a060  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a44d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ac1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 2a 12 	jmp	0x2454	; 0x2454 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 5d 12 	jmp	0x24ba	; 0x24ba <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e0       	ldi	r30, 0x00	; 0
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3e       	cpi	r26, 0xEE	; 238
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ae ee       	ldi	r26, 0xEE	; 238
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3f       	cpi	r26, 0xF7	; 247
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <main>
      8a:	0c 94 fe 14 	jmp	0x29fc	; 0x29fc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ae ed       	ldi	r26, 0xDE	; 222
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 82 14 	jmp	0x2904	; 0x2904 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8e ed       	ldi	r24, 0xDE	; 222
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9e 14 	jmp	0x293c	; 0x293c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8e 14 	jmp	0x291c	; 0x291c <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 92 14 	jmp	0x2924	; 0x2924 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ae 14 	jmp	0x295c	; 0x295c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_init>:
 * Description :
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
		GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
     b4e:	81 e0       	ldi	r24, 0x01	; 1
     b50:	60 e0       	ldi	r22, 0x00	; 0
     b52:	41 e0       	ldi	r20, 0x01	; 1
     b54:	0e 94 48 0a 	call	0x1490	; 0x1490 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	61 e0       	ldi	r22, 0x01	; 1
     b5c:	41 e0       	ldi	r20, 0x01	; 1
     b5e:	0e 94 48 0a 	call	0x1490	; 0x1490 <GPIO_setupPinDirection>
		GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	62 e0       	ldi	r22, 0x02	; 2
     b66:	41 e0       	ldi	r20, 0x01	; 1
     b68:	0e 94 48 0a 	call	0x1490	; 0x1490 <GPIO_setupPinDirection>

		/* Configure the data port as output port */
		GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	6f ef       	ldi	r22, 0xFF	; 255
     b70:	0e 94 b9 0c 	call	0x1972	; 0x1972 <GPIO_setupPortDirection>

		LCD_sendCommand(LCD_OPERATING_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
     b74:	88 e3       	ldi	r24, 0x38	; 56
     b76:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>

		LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
     b7a:	8c e0       	ldi	r24, 0x0C	; 12
     b7c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>

		LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
     b86:	cf 91       	pop	r28
     b88:	df 91       	pop	r29
     b8a:	08 95       	ret

00000b8c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command){
     b8c:	df 93       	push	r29
     b8e:	cf 93       	push	r28
     b90:	cd b7       	in	r28, 0x3d	; 61
     b92:	de b7       	in	r29, 0x3e	; 62
     b94:	e9 97       	sbiw	r28, 0x39	; 57
     b96:	0f b6       	in	r0, 0x3f	; 63
     b98:	f8 94       	cli
     b9a:	de bf       	out	0x3e, r29	; 62
     b9c:	0f be       	out	0x3f, r0	; 63
     b9e:	cd bf       	out	0x3d, r28	; 61
     ba0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	60 e0       	ldi	r22, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	61 e0       	ldi	r22, 0x01	; 1
     bb0:	40 e0       	ldi	r20, 0x00	; 0
     bb2:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
     bb6:	80 e0       	ldi	r24, 0x00	; 0
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	a0 e8       	ldi	r26, 0x80	; 128
     bbc:	bf e3       	ldi	r27, 0x3F	; 63
     bbe:	8d ab       	std	Y+53, r24	; 0x35
     bc0:	9e ab       	std	Y+54, r25	; 0x36
     bc2:	af ab       	std	Y+55, r26	; 0x37
     bc4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bc6:	6d a9       	ldd	r22, Y+53	; 0x35
     bc8:	7e a9       	ldd	r23, Y+54	; 0x36
     bca:	8f a9       	ldd	r24, Y+55	; 0x37
     bcc:	98 ad       	ldd	r25, Y+56	; 0x38
     bce:	20 e0       	ldi	r18, 0x00	; 0
     bd0:	30 e4       	ldi	r19, 0x40	; 64
     bd2:	4c e9       	ldi	r20, 0x9C	; 156
     bd4:	56 e4       	ldi	r21, 0x46	; 70
     bd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     bda:	dc 01       	movw	r26, r24
     bdc:	cb 01       	movw	r24, r22
     bde:	89 ab       	std	Y+49, r24	; 0x31
     be0:	9a ab       	std	Y+50, r25	; 0x32
     be2:	ab ab       	std	Y+51, r26	; 0x33
     be4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     be6:	69 a9       	ldd	r22, Y+49	; 0x31
     be8:	7a a9       	ldd	r23, Y+50	; 0x32
     bea:	8b a9       	ldd	r24, Y+51	; 0x33
     bec:	9c a9       	ldd	r25, Y+52	; 0x34
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	40 e8       	ldi	r20, 0x80	; 128
     bf4:	5f e3       	ldi	r21, 0x3F	; 63
     bf6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bfa:	88 23       	and	r24, r24
     bfc:	2c f4       	brge	.+10     	; 0xc08 <LCD_sendCommand+0x7c>
		__ticks = 1;
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	98 ab       	std	Y+48, r25	; 0x30
     c04:	8f a7       	std	Y+47, r24	; 0x2f
     c06:	3f c0       	rjmp	.+126    	; 0xc86 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
     c08:	69 a9       	ldd	r22, Y+49	; 0x31
     c0a:	7a a9       	ldd	r23, Y+50	; 0x32
     c0c:	8b a9       	ldd	r24, Y+51	; 0x33
     c0e:	9c a9       	ldd	r25, Y+52	; 0x34
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	3f ef       	ldi	r19, 0xFF	; 255
     c14:	4f e7       	ldi	r20, 0x7F	; 127
     c16:	57 e4       	ldi	r21, 0x47	; 71
     c18:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c1c:	18 16       	cp	r1, r24
     c1e:	4c f5       	brge	.+82     	; 0xc72 <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c20:	6d a9       	ldd	r22, Y+53	; 0x35
     c22:	7e a9       	ldd	r23, Y+54	; 0x36
     c24:	8f a9       	ldd	r24, Y+55	; 0x37
     c26:	98 ad       	ldd	r25, Y+56	; 0x38
     c28:	20 e0       	ldi	r18, 0x00	; 0
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	40 e2       	ldi	r20, 0x20	; 32
     c2e:	51 e4       	ldi	r21, 0x41	; 65
     c30:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c34:	dc 01       	movw	r26, r24
     c36:	cb 01       	movw	r24, r22
     c38:	bc 01       	movw	r22, r24
     c3a:	cd 01       	movw	r24, r26
     c3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c40:	dc 01       	movw	r26, r24
     c42:	cb 01       	movw	r24, r22
     c44:	98 ab       	std	Y+48, r25	; 0x30
     c46:	8f a7       	std	Y+47, r24	; 0x2f
     c48:	0f c0       	rjmp	.+30     	; 0xc68 <LCD_sendCommand+0xdc>
     c4a:	80 ed       	ldi	r24, 0xD0	; 208
     c4c:	97 e0       	ldi	r25, 0x07	; 7
     c4e:	9e a7       	std	Y+46, r25	; 0x2e
     c50:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c52:	8d a5       	ldd	r24, Y+45	; 0x2d
     c54:	9e a5       	ldd	r25, Y+46	; 0x2e
     c56:	01 97       	sbiw	r24, 0x01	; 1
     c58:	f1 f7       	brne	.-4      	; 0xc56 <LCD_sendCommand+0xca>
     c5a:	9e a7       	std	Y+46, r25	; 0x2e
     c5c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c5e:	8f a5       	ldd	r24, Y+47	; 0x2f
     c60:	98 a9       	ldd	r25, Y+48	; 0x30
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	98 ab       	std	Y+48, r25	; 0x30
     c66:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c68:	8f a5       	ldd	r24, Y+47	; 0x2f
     c6a:	98 a9       	ldd	r25, Y+48	; 0x30
     c6c:	00 97       	sbiw	r24, 0x00	; 0
     c6e:	69 f7       	brne	.-38     	; 0xc4a <LCD_sendCommand+0xbe>
     c70:	14 c0       	rjmp	.+40     	; 0xc9a <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c72:	69 a9       	ldd	r22, Y+49	; 0x31
     c74:	7a a9       	ldd	r23, Y+50	; 0x32
     c76:	8b a9       	ldd	r24, Y+51	; 0x33
     c78:	9c a9       	ldd	r25, Y+52	; 0x34
     c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	98 ab       	std	Y+48, r25	; 0x30
     c84:	8f a7       	std	Y+47, r24	; 0x2f
     c86:	8f a5       	ldd	r24, Y+47	; 0x2f
     c88:	98 a9       	ldd	r25, Y+48	; 0x30
     c8a:	9c a7       	std	Y+44, r25	; 0x2c
     c8c:	8b a7       	std	Y+43, r24	; 0x2b
     c8e:	8b a5       	ldd	r24, Y+43	; 0x2b
     c90:	9c a5       	ldd	r25, Y+44	; 0x2c
     c92:	01 97       	sbiw	r24, 0x01	; 1
     c94:	f1 f7       	brne	.-4      	; 0xc92 <LCD_sendCommand+0x106>
     c96:	9c a7       	std	Y+44, r25	; 0x2c
     c98:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	62 e0       	ldi	r22, 0x02	; 2
     c9e:	41 e0       	ldi	r20, 0x01	; 1
     ca0:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	a0 e8       	ldi	r26, 0x80	; 128
     caa:	bf e3       	ldi	r27, 0x3F	; 63
     cac:	8f a3       	std	Y+39, r24	; 0x27
     cae:	98 a7       	std	Y+40, r25	; 0x28
     cb0:	a9 a7       	std	Y+41, r26	; 0x29
     cb2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cb4:	6f a1       	ldd	r22, Y+39	; 0x27
     cb6:	78 a5       	ldd	r23, Y+40	; 0x28
     cb8:	89 a5       	ldd	r24, Y+41	; 0x29
     cba:	9a a5       	ldd	r25, Y+42	; 0x2a
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e4       	ldi	r19, 0x40	; 64
     cc0:	4c e9       	ldi	r20, 0x9C	; 156
     cc2:	56 e4       	ldi	r21, 0x46	; 70
     cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	8b a3       	std	Y+35, r24	; 0x23
     cce:	9c a3       	std	Y+36, r25	; 0x24
     cd0:	ad a3       	std	Y+37, r26	; 0x25
     cd2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     cd4:	6b a1       	ldd	r22, Y+35	; 0x23
     cd6:	7c a1       	ldd	r23, Y+36	; 0x24
     cd8:	8d a1       	ldd	r24, Y+37	; 0x25
     cda:	9e a1       	ldd	r25, Y+38	; 0x26
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e8       	ldi	r20, 0x80	; 128
     ce2:	5f e3       	ldi	r21, 0x3F	; 63
     ce4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ce8:	88 23       	and	r24, r24
     cea:	2c f4       	brge	.+10     	; 0xcf6 <LCD_sendCommand+0x16a>
		__ticks = 1;
     cec:	81 e0       	ldi	r24, 0x01	; 1
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	9a a3       	std	Y+34, r25	; 0x22
     cf2:	89 a3       	std	Y+33, r24	; 0x21
     cf4:	3f c0       	rjmp	.+126    	; 0xd74 <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
     cf6:	6b a1       	ldd	r22, Y+35	; 0x23
     cf8:	7c a1       	ldd	r23, Y+36	; 0x24
     cfa:	8d a1       	ldd	r24, Y+37	; 0x25
     cfc:	9e a1       	ldd	r25, Y+38	; 0x26
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	3f ef       	ldi	r19, 0xFF	; 255
     d02:	4f e7       	ldi	r20, 0x7F	; 127
     d04:	57 e4       	ldi	r21, 0x47	; 71
     d06:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d0a:	18 16       	cp	r1, r24
     d0c:	4c f5       	brge	.+82     	; 0xd60 <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d0e:	6f a1       	ldd	r22, Y+39	; 0x27
     d10:	78 a5       	ldd	r23, Y+40	; 0x28
     d12:	89 a5       	ldd	r24, Y+41	; 0x29
     d14:	9a a5       	ldd	r25, Y+42	; 0x2a
     d16:	20 e0       	ldi	r18, 0x00	; 0
     d18:	30 e0       	ldi	r19, 0x00	; 0
     d1a:	40 e2       	ldi	r20, 0x20	; 32
     d1c:	51 e4       	ldi	r21, 0x41	; 65
     d1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	bc 01       	movw	r22, r24
     d28:	cd 01       	movw	r24, r26
     d2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	9a a3       	std	Y+34, r25	; 0x22
     d34:	89 a3       	std	Y+33, r24	; 0x21
     d36:	0f c0       	rjmp	.+30     	; 0xd56 <LCD_sendCommand+0x1ca>
     d38:	80 ed       	ldi	r24, 0xD0	; 208
     d3a:	97 e0       	ldi	r25, 0x07	; 7
     d3c:	98 a3       	std	Y+32, r25	; 0x20
     d3e:	8f 8f       	std	Y+31, r24	; 0x1f
     d40:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d42:	98 a1       	ldd	r25, Y+32	; 0x20
     d44:	01 97       	sbiw	r24, 0x01	; 1
     d46:	f1 f7       	brne	.-4      	; 0xd44 <LCD_sendCommand+0x1b8>
     d48:	98 a3       	std	Y+32, r25	; 0x20
     d4a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d4c:	89 a1       	ldd	r24, Y+33	; 0x21
     d4e:	9a a1       	ldd	r25, Y+34	; 0x22
     d50:	01 97       	sbiw	r24, 0x01	; 1
     d52:	9a a3       	std	Y+34, r25	; 0x22
     d54:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d56:	89 a1       	ldd	r24, Y+33	; 0x21
     d58:	9a a1       	ldd	r25, Y+34	; 0x22
     d5a:	00 97       	sbiw	r24, 0x00	; 0
     d5c:	69 f7       	brne	.-38     	; 0xd38 <LCD_sendCommand+0x1ac>
     d5e:	14 c0       	rjmp	.+40     	; 0xd88 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d60:	6b a1       	ldd	r22, Y+35	; 0x23
     d62:	7c a1       	ldd	r23, Y+36	; 0x24
     d64:	8d a1       	ldd	r24, Y+37	; 0x25
     d66:	9e a1       	ldd	r25, Y+38	; 0x26
     d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9a a3       	std	Y+34, r25	; 0x22
     d72:	89 a3       	std	Y+33, r24	; 0x21
     d74:	89 a1       	ldd	r24, Y+33	; 0x21
     d76:	9a a1       	ldd	r25, Y+34	; 0x22
     d78:	9e 8f       	std	Y+30, r25	; 0x1e
     d7a:	8d 8f       	std	Y+29, r24	; 0x1d
     d7c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     d7e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     d80:	01 97       	sbiw	r24, 0x01	; 1
     d82:	f1 f7       	brne	.-4      	; 0xd80 <LCD_sendCommand+0x1f4>
     d84:	9e 8f       	std	Y+30, r25	; 0x1e
     d86:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
     d88:	80 e0       	ldi	r24, 0x00	; 0
     d8a:	69 ad       	ldd	r22, Y+57	; 0x39
     d8c:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <GPIO_writePort>
     d90:	80 e0       	ldi	r24, 0x00	; 0
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	a0 e8       	ldi	r26, 0x80	; 128
     d96:	bf e3       	ldi	r27, 0x3F	; 63
     d98:	89 8f       	std	Y+25, r24	; 0x19
     d9a:	9a 8f       	std	Y+26, r25	; 0x1a
     d9c:	ab 8f       	std	Y+27, r26	; 0x1b
     d9e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da0:	69 8d       	ldd	r22, Y+25	; 0x19
     da2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     da8:	20 e0       	ldi	r18, 0x00	; 0
     daa:	30 e4       	ldi	r19, 0x40	; 64
     dac:	4c e9       	ldi	r20, 0x9C	; 156
     dae:	56 e4       	ldi	r21, 0x46	; 70
     db0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db4:	dc 01       	movw	r26, r24
     db6:	cb 01       	movw	r24, r22
     db8:	8d 8b       	std	Y+21, r24	; 0x15
     dba:	9e 8b       	std	Y+22, r25	; 0x16
     dbc:	af 8b       	std	Y+23, r26	; 0x17
     dbe:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dc0:	6d 89       	ldd	r22, Y+21	; 0x15
     dc2:	7e 89       	ldd	r23, Y+22	; 0x16
     dc4:	8f 89       	ldd	r24, Y+23	; 0x17
     dc6:	98 8d       	ldd	r25, Y+24	; 0x18
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 e8       	ldi	r20, 0x80	; 128
     dce:	5f e3       	ldi	r21, 0x3F	; 63
     dd0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd4:	88 23       	and	r24, r24
     dd6:	2c f4       	brge	.+10     	; 0xde2 <LCD_sendCommand+0x256>
		__ticks = 1;
     dd8:	81 e0       	ldi	r24, 0x01	; 1
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	9c 8b       	std	Y+20, r25	; 0x14
     dde:	8b 8b       	std	Y+19, r24	; 0x13
     de0:	3f c0       	rjmp	.+126    	; 0xe60 <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
     de2:	6d 89       	ldd	r22, Y+21	; 0x15
     de4:	7e 89       	ldd	r23, Y+22	; 0x16
     de6:	8f 89       	ldd	r24, Y+23	; 0x17
     de8:	98 8d       	ldd	r25, Y+24	; 0x18
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	3f ef       	ldi	r19, 0xFF	; 255
     dee:	4f e7       	ldi	r20, 0x7F	; 127
     df0:	57 e4       	ldi	r21, 0x47	; 71
     df2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df6:	18 16       	cp	r1, r24
     df8:	4c f5       	brge	.+82     	; 0xe4c <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfa:	69 8d       	ldd	r22, Y+25	; 0x19
     dfc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     dfe:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e00:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e02:	20 e0       	ldi	r18, 0x00	; 0
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	40 e2       	ldi	r20, 0x20	; 32
     e08:	51 e4       	ldi	r21, 0x41	; 65
     e0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e0e:	dc 01       	movw	r26, r24
     e10:	cb 01       	movw	r24, r22
     e12:	bc 01       	movw	r22, r24
     e14:	cd 01       	movw	r24, r26
     e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1a:	dc 01       	movw	r26, r24
     e1c:	cb 01       	movw	r24, r22
     e1e:	9c 8b       	std	Y+20, r25	; 0x14
     e20:	8b 8b       	std	Y+19, r24	; 0x13
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <LCD_sendCommand+0x2b6>
     e24:	80 ed       	ldi	r24, 0xD0	; 208
     e26:	97 e0       	ldi	r25, 0x07	; 7
     e28:	9a 8b       	std	Y+18, r25	; 0x12
     e2a:	89 8b       	std	Y+17, r24	; 0x11
     e2c:	89 89       	ldd	r24, Y+17	; 0x11
     e2e:	9a 89       	ldd	r25, Y+18	; 0x12
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <LCD_sendCommand+0x2a4>
     e34:	9a 8b       	std	Y+18, r25	; 0x12
     e36:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e38:	8b 89       	ldd	r24, Y+19	; 0x13
     e3a:	9c 89       	ldd	r25, Y+20	; 0x14
     e3c:	01 97       	sbiw	r24, 0x01	; 1
     e3e:	9c 8b       	std	Y+20, r25	; 0x14
     e40:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e42:	8b 89       	ldd	r24, Y+19	; 0x13
     e44:	9c 89       	ldd	r25, Y+20	; 0x14
     e46:	00 97       	sbiw	r24, 0x00	; 0
     e48:	69 f7       	brne	.-38     	; 0xe24 <LCD_sendCommand+0x298>
     e4a:	14 c0       	rjmp	.+40     	; 0xe74 <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4c:	6d 89       	ldd	r22, Y+21	; 0x15
     e4e:	7e 89       	ldd	r23, Y+22	; 0x16
     e50:	8f 89       	ldd	r24, Y+23	; 0x17
     e52:	98 8d       	ldd	r25, Y+24	; 0x18
     e54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e58:	dc 01       	movw	r26, r24
     e5a:	cb 01       	movw	r24, r22
     e5c:	9c 8b       	std	Y+20, r25	; 0x14
     e5e:	8b 8b       	std	Y+19, r24	; 0x13
     e60:	8b 89       	ldd	r24, Y+19	; 0x13
     e62:	9c 89       	ldd	r25, Y+20	; 0x14
     e64:	98 8b       	std	Y+16, r25	; 0x10
     e66:	8f 87       	std	Y+15, r24	; 0x0f
     e68:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6a:	98 89       	ldd	r25, Y+16	; 0x10
     e6c:	01 97       	sbiw	r24, 0x01	; 1
     e6e:	f1 f7       	brne	.-4      	; 0xe6c <LCD_sendCommand+0x2e0>
     e70:	98 8b       	std	Y+16, r25	; 0x10
     e72:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
     e74:	81 e0       	ldi	r24, 0x01	; 1
     e76:	62 e0       	ldi	r22, 0x02	; 2
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
     e7e:	80 e0       	ldi	r24, 0x00	; 0
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	a0 e8       	ldi	r26, 0x80	; 128
     e84:	bf e3       	ldi	r27, 0x3F	; 63
     e86:	8b 87       	std	Y+11, r24	; 0x0b
     e88:	9c 87       	std	Y+12, r25	; 0x0c
     e8a:	ad 87       	std	Y+13, r26	; 0x0d
     e8c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e8e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e90:	7c 85       	ldd	r23, Y+12	; 0x0c
     e92:	8d 85       	ldd	r24, Y+13	; 0x0d
     e94:	9e 85       	ldd	r25, Y+14	; 0x0e
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e4       	ldi	r19, 0x40	; 64
     e9a:	4c e9       	ldi	r20, 0x9C	; 156
     e9c:	56 e4       	ldi	r21, 0x46	; 70
     e9e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ea2:	dc 01       	movw	r26, r24
     ea4:	cb 01       	movw	r24, r22
     ea6:	8f 83       	std	Y+7, r24	; 0x07
     ea8:	98 87       	std	Y+8, r25	; 0x08
     eaa:	a9 87       	std	Y+9, r26	; 0x09
     eac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     eae:	6f 81       	ldd	r22, Y+7	; 0x07
     eb0:	78 85       	ldd	r23, Y+8	; 0x08
     eb2:	89 85       	ldd	r24, Y+9	; 0x09
     eb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb6:	20 e0       	ldi	r18, 0x00	; 0
     eb8:	30 e0       	ldi	r19, 0x00	; 0
     eba:	40 e8       	ldi	r20, 0x80	; 128
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ec2:	88 23       	and	r24, r24
     ec4:	2c f4       	brge	.+10     	; 0xed0 <LCD_sendCommand+0x344>
		__ticks = 1;
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	9e 83       	std	Y+6, r25	; 0x06
     ecc:	8d 83       	std	Y+5, r24	; 0x05
     ece:	3f c0       	rjmp	.+126    	; 0xf4e <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
     ed0:	6f 81       	ldd	r22, Y+7	; 0x07
     ed2:	78 85       	ldd	r23, Y+8	; 0x08
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	3f ef       	ldi	r19, 0xFF	; 255
     edc:	4f e7       	ldi	r20, 0x7F	; 127
     ede:	57 e4       	ldi	r21, 0x47	; 71
     ee0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	4c f5       	brge	.+82     	; 0xf3a <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eea:	7c 85       	ldd	r23, Y+12	; 0x0c
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	20 e0       	ldi	r18, 0x00	; 0
     ef2:	30 e0       	ldi	r19, 0x00	; 0
     ef4:	40 e2       	ldi	r20, 0x20	; 32
     ef6:	51 e4       	ldi	r21, 0x41	; 65
     ef8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efc:	dc 01       	movw	r26, r24
     efe:	cb 01       	movw	r24, r22
     f00:	bc 01       	movw	r22, r24
     f02:	cd 01       	movw	r24, r26
     f04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	0f c0       	rjmp	.+30     	; 0xf30 <LCD_sendCommand+0x3a4>
     f12:	80 ed       	ldi	r24, 0xD0	; 208
     f14:	97 e0       	ldi	r25, 0x07	; 7
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
     f1a:	8b 81       	ldd	r24, Y+3	; 0x03
     f1c:	9c 81       	ldd	r25, Y+4	; 0x04
     f1e:	01 97       	sbiw	r24, 0x01	; 1
     f20:	f1 f7       	brne	.-4      	; 0xf1e <LCD_sendCommand+0x392>
     f22:	9c 83       	std	Y+4, r25	; 0x04
     f24:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f26:	8d 81       	ldd	r24, Y+5	; 0x05
     f28:	9e 81       	ldd	r25, Y+6	; 0x06
     f2a:	01 97       	sbiw	r24, 0x01	; 1
     f2c:	9e 83       	std	Y+6, r25	; 0x06
     f2e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f30:	8d 81       	ldd	r24, Y+5	; 0x05
     f32:	9e 81       	ldd	r25, Y+6	; 0x06
     f34:	00 97       	sbiw	r24, 0x00	; 0
     f36:	69 f7       	brne	.-38     	; 0xf12 <LCD_sendCommand+0x386>
     f38:	14 c0       	rjmp	.+40     	; 0xf62 <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f3a:	6f 81       	ldd	r22, Y+7	; 0x07
     f3c:	78 85       	ldd	r23, Y+8	; 0x08
     f3e:	89 85       	ldd	r24, Y+9	; 0x09
     f40:	9a 85       	ldd	r25, Y+10	; 0x0a
     f42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f46:	dc 01       	movw	r26, r24
     f48:	cb 01       	movw	r24, r22
     f4a:	9e 83       	std	Y+6, r25	; 0x06
     f4c:	8d 83       	std	Y+5, r24	; 0x05
     f4e:	8d 81       	ldd	r24, Y+5	; 0x05
     f50:	9e 81       	ldd	r25, Y+6	; 0x06
     f52:	9a 83       	std	Y+2, r25	; 0x02
     f54:	89 83       	std	Y+1, r24	; 0x01
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	9a 81       	ldd	r25, Y+2	; 0x02
     f5a:	01 97       	sbiw	r24, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <LCD_sendCommand+0x3ce>
     f5e:	9a 83       	std	Y+2, r25	; 0x02
     f60:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
     f62:	e9 96       	adiw	r28, 0x39	; 57
     f64:	0f b6       	in	r0, 0x3f	; 63
     f66:	f8 94       	cli
     f68:	de bf       	out	0x3e, r29	; 62
     f6a:	0f be       	out	0x3f, r0	; 63
     f6c:	cd bf       	out	0x3d, r28	; 61
     f6e:	cf 91       	pop	r28
     f70:	df 91       	pop	r29
     f72:	08 95       	ret

00000f74 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data){
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	e9 97       	sbiw	r28, 0x39	; 57
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
     f88:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	41 e0       	ldi	r20, 0x01	; 1
     f90:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	61 e0       	ldi	r22, 0x01	; 1
     f98:	40 e0       	ldi	r20, 0x00	; 0
     f9a:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	a0 e8       	ldi	r26, 0x80	; 128
     fa4:	bf e3       	ldi	r27, 0x3F	; 63
     fa6:	8d ab       	std	Y+53, r24	; 0x35
     fa8:	9e ab       	std	Y+54, r25	; 0x36
     faa:	af ab       	std	Y+55, r26	; 0x37
     fac:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fae:	6d a9       	ldd	r22, Y+53	; 0x35
     fb0:	7e a9       	ldd	r23, Y+54	; 0x36
     fb2:	8f a9       	ldd	r24, Y+55	; 0x37
     fb4:	98 ad       	ldd	r25, Y+56	; 0x38
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e4       	ldi	r19, 0x40	; 64
     fba:	4c e9       	ldi	r20, 0x9C	; 156
     fbc:	56 e4       	ldi	r21, 0x46	; 70
     fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc2:	dc 01       	movw	r26, r24
     fc4:	cb 01       	movw	r24, r22
     fc6:	89 ab       	std	Y+49, r24	; 0x31
     fc8:	9a ab       	std	Y+50, r25	; 0x32
     fca:	ab ab       	std	Y+51, r26	; 0x33
     fcc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     fce:	69 a9       	ldd	r22, Y+49	; 0x31
     fd0:	7a a9       	ldd	r23, Y+50	; 0x32
     fd2:	8b a9       	ldd	r24, Y+51	; 0x33
     fd4:	9c a9       	ldd	r25, Y+52	; 0x34
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e8       	ldi	r20, 0x80	; 128
     fdc:	5f e3       	ldi	r21, 0x3F	; 63
     fde:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fe2:	88 23       	and	r24, r24
     fe4:	2c f4       	brge	.+10     	; 0xff0 <LCD_displayCharacter+0x7c>
		__ticks = 1;
     fe6:	81 e0       	ldi	r24, 0x01	; 1
     fe8:	90 e0       	ldi	r25, 0x00	; 0
     fea:	98 ab       	std	Y+48, r25	; 0x30
     fec:	8f a7       	std	Y+47, r24	; 0x2f
     fee:	3f c0       	rjmp	.+126    	; 0x106e <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
     ff0:	69 a9       	ldd	r22, Y+49	; 0x31
     ff2:	7a a9       	ldd	r23, Y+50	; 0x32
     ff4:	8b a9       	ldd	r24, Y+51	; 0x33
     ff6:	9c a9       	ldd	r25, Y+52	; 0x34
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	3f ef       	ldi	r19, 0xFF	; 255
     ffc:	4f e7       	ldi	r20, 0x7F	; 127
     ffe:	57 e4       	ldi	r21, 0x47	; 71
    1000:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1004:	18 16       	cp	r1, r24
    1006:	4c f5       	brge	.+82     	; 0x105a <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1008:	6d a9       	ldd	r22, Y+53	; 0x35
    100a:	7e a9       	ldd	r23, Y+54	; 0x36
    100c:	8f a9       	ldd	r24, Y+55	; 0x37
    100e:	98 ad       	ldd	r25, Y+56	; 0x38
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e2       	ldi	r20, 0x20	; 32
    1016:	51 e4       	ldi	r21, 0x41	; 65
    1018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101c:	dc 01       	movw	r26, r24
    101e:	cb 01       	movw	r24, r22
    1020:	bc 01       	movw	r22, r24
    1022:	cd 01       	movw	r24, r26
    1024:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	98 ab       	std	Y+48, r25	; 0x30
    102e:	8f a7       	std	Y+47, r24	; 0x2f
    1030:	0f c0       	rjmp	.+30     	; 0x1050 <LCD_displayCharacter+0xdc>
    1032:	80 ed       	ldi	r24, 0xD0	; 208
    1034:	97 e0       	ldi	r25, 0x07	; 7
    1036:	9e a7       	std	Y+46, r25	; 0x2e
    1038:	8d a7       	std	Y+45, r24	; 0x2d
    103a:	8d a5       	ldd	r24, Y+45	; 0x2d
    103c:	9e a5       	ldd	r25, Y+46	; 0x2e
    103e:	01 97       	sbiw	r24, 0x01	; 1
    1040:	f1 f7       	brne	.-4      	; 0x103e <LCD_displayCharacter+0xca>
    1042:	9e a7       	std	Y+46, r25	; 0x2e
    1044:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1046:	8f a5       	ldd	r24, Y+47	; 0x2f
    1048:	98 a9       	ldd	r25, Y+48	; 0x30
    104a:	01 97       	sbiw	r24, 0x01	; 1
    104c:	98 ab       	std	Y+48, r25	; 0x30
    104e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1050:	8f a5       	ldd	r24, Y+47	; 0x2f
    1052:	98 a9       	ldd	r25, Y+48	; 0x30
    1054:	00 97       	sbiw	r24, 0x00	; 0
    1056:	69 f7       	brne	.-38     	; 0x1032 <LCD_displayCharacter+0xbe>
    1058:	14 c0       	rjmp	.+40     	; 0x1082 <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    105a:	69 a9       	ldd	r22, Y+49	; 0x31
    105c:	7a a9       	ldd	r23, Y+50	; 0x32
    105e:	8b a9       	ldd	r24, Y+51	; 0x33
    1060:	9c a9       	ldd	r25, Y+52	; 0x34
    1062:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1066:	dc 01       	movw	r26, r24
    1068:	cb 01       	movw	r24, r22
    106a:	98 ab       	std	Y+48, r25	; 0x30
    106c:	8f a7       	std	Y+47, r24	; 0x2f
    106e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1070:	98 a9       	ldd	r25, Y+48	; 0x30
    1072:	9c a7       	std	Y+44, r25	; 0x2c
    1074:	8b a7       	std	Y+43, r24	; 0x2b
    1076:	8b a5       	ldd	r24, Y+43	; 0x2b
    1078:	9c a5       	ldd	r25, Y+44	; 0x2c
    107a:	01 97       	sbiw	r24, 0x01	; 1
    107c:	f1 f7       	brne	.-4      	; 0x107a <LCD_displayCharacter+0x106>
    107e:	9c a7       	std	Y+44, r25	; 0x2c
    1080:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1082:	81 e0       	ldi	r24, 0x01	; 1
    1084:	62 e0       	ldi	r22, 0x02	; 2
    1086:	41 e0       	ldi	r20, 0x01	; 1
    1088:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e0       	ldi	r25, 0x00	; 0
    1090:	a0 e8       	ldi	r26, 0x80	; 128
    1092:	bf e3       	ldi	r27, 0x3F	; 63
    1094:	8f a3       	std	Y+39, r24	; 0x27
    1096:	98 a7       	std	Y+40, r25	; 0x28
    1098:	a9 a7       	std	Y+41, r26	; 0x29
    109a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    109c:	6f a1       	ldd	r22, Y+39	; 0x27
    109e:	78 a5       	ldd	r23, Y+40	; 0x28
    10a0:	89 a5       	ldd	r24, Y+41	; 0x29
    10a2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	30 e4       	ldi	r19, 0x40	; 64
    10a8:	4c e9       	ldi	r20, 0x9C	; 156
    10aa:	56 e4       	ldi	r21, 0x46	; 70
    10ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10b0:	dc 01       	movw	r26, r24
    10b2:	cb 01       	movw	r24, r22
    10b4:	8b a3       	std	Y+35, r24	; 0x23
    10b6:	9c a3       	std	Y+36, r25	; 0x24
    10b8:	ad a3       	std	Y+37, r26	; 0x25
    10ba:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10bc:	6b a1       	ldd	r22, Y+35	; 0x23
    10be:	7c a1       	ldd	r23, Y+36	; 0x24
    10c0:	8d a1       	ldd	r24, Y+37	; 0x25
    10c2:	9e a1       	ldd	r25, Y+38	; 0x26
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e8       	ldi	r20, 0x80	; 128
    10ca:	5f e3       	ldi	r21, 0x3F	; 63
    10cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10d0:	88 23       	and	r24, r24
    10d2:	2c f4       	brge	.+10     	; 0x10de <LCD_displayCharacter+0x16a>
		__ticks = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	90 e0       	ldi	r25, 0x00	; 0
    10d8:	9a a3       	std	Y+34, r25	; 0x22
    10da:	89 a3       	std	Y+33, r24	; 0x21
    10dc:	3f c0       	rjmp	.+126    	; 0x115c <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    10de:	6b a1       	ldd	r22, Y+35	; 0x23
    10e0:	7c a1       	ldd	r23, Y+36	; 0x24
    10e2:	8d a1       	ldd	r24, Y+37	; 0x25
    10e4:	9e a1       	ldd	r25, Y+38	; 0x26
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	3f ef       	ldi	r19, 0xFF	; 255
    10ea:	4f e7       	ldi	r20, 0x7F	; 127
    10ec:	57 e4       	ldi	r21, 0x47	; 71
    10ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10f2:	18 16       	cp	r1, r24
    10f4:	4c f5       	brge	.+82     	; 0x1148 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10f6:	6f a1       	ldd	r22, Y+39	; 0x27
    10f8:	78 a5       	ldd	r23, Y+40	; 0x28
    10fa:	89 a5       	ldd	r24, Y+41	; 0x29
    10fc:	9a a5       	ldd	r25, Y+42	; 0x2a
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e2       	ldi	r20, 0x20	; 32
    1104:	51 e4       	ldi	r21, 0x41	; 65
    1106:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	bc 01       	movw	r22, r24
    1110:	cd 01       	movw	r24, r26
    1112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9a a3       	std	Y+34, r25	; 0x22
    111c:	89 a3       	std	Y+33, r24	; 0x21
    111e:	0f c0       	rjmp	.+30     	; 0x113e <LCD_displayCharacter+0x1ca>
    1120:	80 ed       	ldi	r24, 0xD0	; 208
    1122:	97 e0       	ldi	r25, 0x07	; 7
    1124:	98 a3       	std	Y+32, r25	; 0x20
    1126:	8f 8f       	std	Y+31, r24	; 0x1f
    1128:	8f 8d       	ldd	r24, Y+31	; 0x1f
    112a:	98 a1       	ldd	r25, Y+32	; 0x20
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <LCD_displayCharacter+0x1b8>
    1130:	98 a3       	std	Y+32, r25	; 0x20
    1132:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1134:	89 a1       	ldd	r24, Y+33	; 0x21
    1136:	9a a1       	ldd	r25, Y+34	; 0x22
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	9a a3       	std	Y+34, r25	; 0x22
    113c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    113e:	89 a1       	ldd	r24, Y+33	; 0x21
    1140:	9a a1       	ldd	r25, Y+34	; 0x22
    1142:	00 97       	sbiw	r24, 0x00	; 0
    1144:	69 f7       	brne	.-38     	; 0x1120 <LCD_displayCharacter+0x1ac>
    1146:	14 c0       	rjmp	.+40     	; 0x1170 <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1148:	6b a1       	ldd	r22, Y+35	; 0x23
    114a:	7c a1       	ldd	r23, Y+36	; 0x24
    114c:	8d a1       	ldd	r24, Y+37	; 0x25
    114e:	9e a1       	ldd	r25, Y+38	; 0x26
    1150:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1154:	dc 01       	movw	r26, r24
    1156:	cb 01       	movw	r24, r22
    1158:	9a a3       	std	Y+34, r25	; 0x22
    115a:	89 a3       	std	Y+33, r24	; 0x21
    115c:	89 a1       	ldd	r24, Y+33	; 0x21
    115e:	9a a1       	ldd	r25, Y+34	; 0x22
    1160:	9e 8f       	std	Y+30, r25	; 0x1e
    1162:	8d 8f       	std	Y+29, r24	; 0x1d
    1164:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1166:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1168:	01 97       	sbiw	r24, 0x01	; 1
    116a:	f1 f7       	brne	.-4      	; 0x1168 <LCD_displayCharacter+0x1f4>
    116c:	9e 8f       	std	Y+30, r25	; 0x1e
    116e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    1170:	80 e0       	ldi	r24, 0x00	; 0
    1172:	69 ad       	ldd	r22, Y+57	; 0x39
    1174:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <GPIO_writePort>
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	a0 e8       	ldi	r26, 0x80	; 128
    117e:	bf e3       	ldi	r27, 0x3F	; 63
    1180:	89 8f       	std	Y+25, r24	; 0x19
    1182:	9a 8f       	std	Y+26, r25	; 0x1a
    1184:	ab 8f       	std	Y+27, r26	; 0x1b
    1186:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1188:	69 8d       	ldd	r22, Y+25	; 0x19
    118a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    118c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    118e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1190:	20 e0       	ldi	r18, 0x00	; 0
    1192:	30 e4       	ldi	r19, 0x40	; 64
    1194:	4c e9       	ldi	r20, 0x9C	; 156
    1196:	56 e4       	ldi	r21, 0x46	; 70
    1198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    119c:	dc 01       	movw	r26, r24
    119e:	cb 01       	movw	r24, r22
    11a0:	8d 8b       	std	Y+21, r24	; 0x15
    11a2:	9e 8b       	std	Y+22, r25	; 0x16
    11a4:	af 8b       	std	Y+23, r26	; 0x17
    11a6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    11a8:	6d 89       	ldd	r22, Y+21	; 0x15
    11aa:	7e 89       	ldd	r23, Y+22	; 0x16
    11ac:	8f 89       	ldd	r24, Y+23	; 0x17
    11ae:	98 8d       	ldd	r25, Y+24	; 0x18
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	40 e8       	ldi	r20, 0x80	; 128
    11b6:	5f e3       	ldi	r21, 0x3F	; 63
    11b8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11bc:	88 23       	and	r24, r24
    11be:	2c f4       	brge	.+10     	; 0x11ca <LCD_displayCharacter+0x256>
		__ticks = 1;
    11c0:	81 e0       	ldi	r24, 0x01	; 1
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	9c 8b       	std	Y+20, r25	; 0x14
    11c6:	8b 8b       	std	Y+19, r24	; 0x13
    11c8:	3f c0       	rjmp	.+126    	; 0x1248 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    11ca:	6d 89       	ldd	r22, Y+21	; 0x15
    11cc:	7e 89       	ldd	r23, Y+22	; 0x16
    11ce:	8f 89       	ldd	r24, Y+23	; 0x17
    11d0:	98 8d       	ldd	r25, Y+24	; 0x18
    11d2:	20 e0       	ldi	r18, 0x00	; 0
    11d4:	3f ef       	ldi	r19, 0xFF	; 255
    11d6:	4f e7       	ldi	r20, 0x7F	; 127
    11d8:	57 e4       	ldi	r21, 0x47	; 71
    11da:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11de:	18 16       	cp	r1, r24
    11e0:	4c f5       	brge	.+82     	; 0x1234 <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11e2:	69 8d       	ldd	r22, Y+25	; 0x19
    11e4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11e6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11e8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ea:	20 e0       	ldi	r18, 0x00	; 0
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e2       	ldi	r20, 0x20	; 32
    11f0:	51 e4       	ldi	r21, 0x41	; 65
    11f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	bc 01       	movw	r22, r24
    11fc:	cd 01       	movw	r24, r26
    11fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	9c 8b       	std	Y+20, r25	; 0x14
    1208:	8b 8b       	std	Y+19, r24	; 0x13
    120a:	0f c0       	rjmp	.+30     	; 0x122a <LCD_displayCharacter+0x2b6>
    120c:	80 ed       	ldi	r24, 0xD0	; 208
    120e:	97 e0       	ldi	r25, 0x07	; 7
    1210:	9a 8b       	std	Y+18, r25	; 0x12
    1212:	89 8b       	std	Y+17, r24	; 0x11
    1214:	89 89       	ldd	r24, Y+17	; 0x11
    1216:	9a 89       	ldd	r25, Y+18	; 0x12
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <LCD_displayCharacter+0x2a4>
    121c:	9a 8b       	std	Y+18, r25	; 0x12
    121e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1220:	8b 89       	ldd	r24, Y+19	; 0x13
    1222:	9c 89       	ldd	r25, Y+20	; 0x14
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	9c 8b       	std	Y+20, r25	; 0x14
    1228:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    122a:	8b 89       	ldd	r24, Y+19	; 0x13
    122c:	9c 89       	ldd	r25, Y+20	; 0x14
    122e:	00 97       	sbiw	r24, 0x00	; 0
    1230:	69 f7       	brne	.-38     	; 0x120c <LCD_displayCharacter+0x298>
    1232:	14 c0       	rjmp	.+40     	; 0x125c <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1234:	6d 89       	ldd	r22, Y+21	; 0x15
    1236:	7e 89       	ldd	r23, Y+22	; 0x16
    1238:	8f 89       	ldd	r24, Y+23	; 0x17
    123a:	98 8d       	ldd	r25, Y+24	; 0x18
    123c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9c 8b       	std	Y+20, r25	; 0x14
    1246:	8b 8b       	std	Y+19, r24	; 0x13
    1248:	8b 89       	ldd	r24, Y+19	; 0x13
    124a:	9c 89       	ldd	r25, Y+20	; 0x14
    124c:	98 8b       	std	Y+16, r25	; 0x10
    124e:	8f 87       	std	Y+15, r24	; 0x0f
    1250:	8f 85       	ldd	r24, Y+15	; 0x0f
    1252:	98 89       	ldd	r25, Y+16	; 0x10
    1254:	01 97       	sbiw	r24, 0x01	; 1
    1256:	f1 f7       	brne	.-4      	; 0x1254 <LCD_displayCharacter+0x2e0>
    1258:	98 8b       	std	Y+16, r25	; 0x10
    125a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	62 e0       	ldi	r22, 0x02	; 2
    1260:	40 e0       	ldi	r20, 0x00	; 0
    1262:	0e 94 33 0b 	call	0x1666	; 0x1666 <GPIO_writePin>
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	90 e0       	ldi	r25, 0x00	; 0
    126a:	a0 e8       	ldi	r26, 0x80	; 128
    126c:	bf e3       	ldi	r27, 0x3F	; 63
    126e:	8b 87       	std	Y+11, r24	; 0x0b
    1270:	9c 87       	std	Y+12, r25	; 0x0c
    1272:	ad 87       	std	Y+13, r26	; 0x0d
    1274:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1276:	6b 85       	ldd	r22, Y+11	; 0x0b
    1278:	7c 85       	ldd	r23, Y+12	; 0x0c
    127a:	8d 85       	ldd	r24, Y+13	; 0x0d
    127c:	9e 85       	ldd	r25, Y+14	; 0x0e
    127e:	20 e0       	ldi	r18, 0x00	; 0
    1280:	30 e4       	ldi	r19, 0x40	; 64
    1282:	4c e9       	ldi	r20, 0x9C	; 156
    1284:	56 e4       	ldi	r21, 0x46	; 70
    1286:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    128a:	dc 01       	movw	r26, r24
    128c:	cb 01       	movw	r24, r22
    128e:	8f 83       	std	Y+7, r24	; 0x07
    1290:	98 87       	std	Y+8, r25	; 0x08
    1292:	a9 87       	std	Y+9, r26	; 0x09
    1294:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1296:	6f 81       	ldd	r22, Y+7	; 0x07
    1298:	78 85       	ldd	r23, Y+8	; 0x08
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	40 e8       	ldi	r20, 0x80	; 128
    12a4:	5f e3       	ldi	r21, 0x3F	; 63
    12a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12aa:	88 23       	and	r24, r24
    12ac:	2c f4       	brge	.+10     	; 0x12b8 <LCD_displayCharacter+0x344>
		__ticks = 1;
    12ae:	81 e0       	ldi	r24, 0x01	; 1
    12b0:	90 e0       	ldi	r25, 0x00	; 0
    12b2:	9e 83       	std	Y+6, r25	; 0x06
    12b4:	8d 83       	std	Y+5, r24	; 0x05
    12b6:	3f c0       	rjmp	.+126    	; 0x1336 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    12b8:	6f 81       	ldd	r22, Y+7	; 0x07
    12ba:	78 85       	ldd	r23, Y+8	; 0x08
    12bc:	89 85       	ldd	r24, Y+9	; 0x09
    12be:	9a 85       	ldd	r25, Y+10	; 0x0a
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	3f ef       	ldi	r19, 0xFF	; 255
    12c4:	4f e7       	ldi	r20, 0x7F	; 127
    12c6:	57 e4       	ldi	r21, 0x47	; 71
    12c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12cc:	18 16       	cp	r1, r24
    12ce:	4c f5       	brge	.+82     	; 0x1322 <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    12d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    12d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    12d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e2       	ldi	r20, 0x20	; 32
    12de:	51 e4       	ldi	r21, 0x41	; 65
    12e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	bc 01       	movw	r22, r24
    12ea:	cd 01       	movw	r24, r26
    12ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	9e 83       	std	Y+6, r25	; 0x06
    12f6:	8d 83       	std	Y+5, r24	; 0x05
    12f8:	0f c0       	rjmp	.+30     	; 0x1318 <LCD_displayCharacter+0x3a4>
    12fa:	80 ed       	ldi	r24, 0xD0	; 208
    12fc:	97 e0       	ldi	r25, 0x07	; 7
    12fe:	9c 83       	std	Y+4, r25	; 0x04
    1300:	8b 83       	std	Y+3, r24	; 0x03
    1302:	8b 81       	ldd	r24, Y+3	; 0x03
    1304:	9c 81       	ldd	r25, Y+4	; 0x04
    1306:	01 97       	sbiw	r24, 0x01	; 1
    1308:	f1 f7       	brne	.-4      	; 0x1306 <LCD_displayCharacter+0x392>
    130a:	9c 83       	std	Y+4, r25	; 0x04
    130c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	01 97       	sbiw	r24, 0x01	; 1
    1314:	9e 83       	std	Y+6, r25	; 0x06
    1316:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1318:	8d 81       	ldd	r24, Y+5	; 0x05
    131a:	9e 81       	ldd	r25, Y+6	; 0x06
    131c:	00 97       	sbiw	r24, 0x00	; 0
    131e:	69 f7       	brne	.-38     	; 0x12fa <LCD_displayCharacter+0x386>
    1320:	14 c0       	rjmp	.+40     	; 0x134a <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1322:	6f 81       	ldd	r22, Y+7	; 0x07
    1324:	78 85       	ldd	r23, Y+8	; 0x08
    1326:	89 85       	ldd	r24, Y+9	; 0x09
    1328:	9a 85       	ldd	r25, Y+10	; 0x0a
    132a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	9e 83       	std	Y+6, r25	; 0x06
    1334:	8d 83       	std	Y+5, r24	; 0x05
    1336:	8d 81       	ldd	r24, Y+5	; 0x05
    1338:	9e 81       	ldd	r25, Y+6	; 0x06
    133a:	9a 83       	std	Y+2, r25	; 0x02
    133c:	89 83       	std	Y+1, r24	; 0x01
    133e:	89 81       	ldd	r24, Y+1	; 0x01
    1340:	9a 81       	ldd	r25, Y+2	; 0x02
    1342:	01 97       	sbiw	r24, 0x01	; 1
    1344:	f1 f7       	brne	.-4      	; 0x1342 <LCD_displayCharacter+0x3ce>
    1346:	9a 83       	std	Y+2, r25	; 0x02
    1348:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    134a:	e9 96       	adiw	r28, 0x39	; 57
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	de bf       	out	0x3e, r29	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	cd bf       	out	0x3d, r28	; 61
    1356:	cf 91       	pop	r28
    1358:	df 91       	pop	r29
    135a:	08 95       	ret

0000135c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */

void LCD_displayString(const char* str){
    135c:	df 93       	push	r29
    135e:	cf 93       	push	r28
    1360:	00 d0       	rcall	.+0      	; 0x1362 <LCD_displayString+0x6>
    1362:	0f 92       	push	r0
    1364:	cd b7       	in	r28, 0x3d	; 61
    1366:	de b7       	in	r29, 0x3e	; 62
    1368:	9b 83       	std	Y+3, r25	; 0x03
    136a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i=0;
    136c:	19 82       	std	Y+1, r1	; 0x01
    136e:	0e c0       	rjmp	.+28     	; 0x138c <LCD_displayString+0x30>
	while(str[i] !='\0'){
		LCD_displayCharacter(str[i]);
    1370:	89 81       	ldd	r24, Y+1	; 0x01
    1372:	28 2f       	mov	r18, r24
    1374:	30 e0       	ldi	r19, 0x00	; 0
    1376:	8a 81       	ldd	r24, Y+2	; 0x02
    1378:	9b 81       	ldd	r25, Y+3	; 0x03
    137a:	fc 01       	movw	r30, r24
    137c:	e2 0f       	add	r30, r18
    137e:	f3 1f       	adc	r31, r19
    1380:	80 81       	ld	r24, Z
    1382:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_displayCharacter>
		i++;
    1386:	89 81       	ldd	r24, Y+1	; 0x01
    1388:	8f 5f       	subi	r24, 0xFF	; 255
    138a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */

void LCD_displayString(const char* str){
	uint8 i=0;
	while(str[i] !='\0'){
    138c:	89 81       	ldd	r24, Y+1	; 0x01
    138e:	28 2f       	mov	r18, r24
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	9b 81       	ldd	r25, Y+3	; 0x03
    1396:	fc 01       	movw	r30, r24
    1398:	e2 0f       	add	r30, r18
    139a:	f3 1f       	adc	r31, r19
    139c:	80 81       	ld	r24, Z
    139e:	88 23       	and	r24, r24
    13a0:	39 f7       	brne	.-50     	; 0x1370 <LCD_displayString+0x14>
		LCD_displayCharacter(str[i]);
		i++;
	}
}
    13a2:	0f 90       	pop	r0
    13a4:	0f 90       	pop	r0
    13a6:	0f 90       	pop	r0
    13a8:	cf 91       	pop	r28
    13aa:	df 91       	pop	r29
    13ac:	08 95       	ret

000013ae <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    13ae:	df 93       	push	r29
    13b0:	cf 93       	push	r28
    13b2:	00 d0       	rcall	.+0      	; 0x13b4 <LCD_moveCursor+0x6>
    13b4:	00 d0       	rcall	.+0      	; 0x13b6 <LCD_moveCursor+0x8>
    13b6:	0f 92       	push	r0
    13b8:	cd b7       	in	r28, 0x3d	; 61
    13ba:	de b7       	in	r29, 0x3e	; 62
    13bc:	8a 83       	std	Y+2, r24	; 0x02
    13be:	6b 83       	std	Y+3, r22	; 0x03
	uint8 memory_address;
	/* Calculate the required address in the LCD DDRAM */
	switch(row){
    13c0:	8a 81       	ldd	r24, Y+2	; 0x02
    13c2:	28 2f       	mov	r18, r24
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	3d 83       	std	Y+5, r19	; 0x05
    13c8:	2c 83       	std	Y+4, r18	; 0x04
    13ca:	8c 81       	ldd	r24, Y+4	; 0x04
    13cc:	9d 81       	ldd	r25, Y+5	; 0x05
    13ce:	81 30       	cpi	r24, 0x01	; 1
    13d0:	91 05       	cpc	r25, r1
    13d2:	c1 f0       	breq	.+48     	; 0x1404 <LCD_moveCursor+0x56>
    13d4:	2c 81       	ldd	r18, Y+4	; 0x04
    13d6:	3d 81       	ldd	r19, Y+5	; 0x05
    13d8:	22 30       	cpi	r18, 0x02	; 2
    13da:	31 05       	cpc	r19, r1
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <LCD_moveCursor+0x3a>
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	00 97       	sbiw	r24, 0x00	; 0
    13e4:	61 f0       	breq	.+24     	; 0x13fe <LCD_moveCursor+0x50>
    13e6:	19 c0       	rjmp	.+50     	; 0x141a <LCD_moveCursor+0x6c>
    13e8:	2c 81       	ldd	r18, Y+4	; 0x04
    13ea:	3d 81       	ldd	r19, Y+5	; 0x05
    13ec:	22 30       	cpi	r18, 0x02	; 2
    13ee:	31 05       	cpc	r19, r1
    13f0:	69 f0       	breq	.+26     	; 0x140c <LCD_moveCursor+0x5e>
    13f2:	8c 81       	ldd	r24, Y+4	; 0x04
    13f4:	9d 81       	ldd	r25, Y+5	; 0x05
    13f6:	83 30       	cpi	r24, 0x03	; 3
    13f8:	91 05       	cpc	r25, r1
    13fa:	61 f0       	breq	.+24     	; 0x1414 <LCD_moveCursor+0x66>
    13fc:	0e c0       	rjmp	.+28     	; 0x141a <LCD_moveCursor+0x6c>

	case 0:
		memory_address=col;
    13fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1400:	89 83       	std	Y+1, r24	; 0x01
    1402:	0b c0       	rjmp	.+22     	; 0x141a <LCD_moveCursor+0x6c>
		break;
	case 1:
		memory_address= col+0x40;
    1404:	8b 81       	ldd	r24, Y+3	; 0x03
    1406:	80 5c       	subi	r24, 0xC0	; 192
    1408:	89 83       	std	Y+1, r24	; 0x01
    140a:	07 c0       	rjmp	.+14     	; 0x141a <LCD_moveCursor+0x6c>
		break;
	case 2:
		memory_address=col+0x10;
    140c:	8b 81       	ldd	r24, Y+3	; 0x03
    140e:	80 5f       	subi	r24, 0xF0	; 240
    1410:	89 83       	std	Y+1, r24	; 0x01
    1412:	03 c0       	rjmp	.+6      	; 0x141a <LCD_moveCursor+0x6c>
		break;
	case 3:
		memory_address=col+0x50;
    1414:	8b 81       	ldd	r24, Y+3	; 0x03
    1416:	80 5b       	subi	r24, 0xB0	; 176
    1418:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
		/* Move the LCD cursor to this specific address */
	LCD_sendCommand(memory_address | LCD_SET_CURSOR_LOCATION);
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	80 68       	ori	r24, 0x80	; 128
    141e:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>

}
    1422:	0f 90       	pop	r0
    1424:	0f 90       	pop	r0
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	0f 90       	pop	r0
    142c:	cf 91       	pop	r28
    142e:	df 91       	pop	r29
    1430:	08 95       	ret

00001432 <LCD_clearScreen>:

/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(){
    1432:	df 93       	push	r29
    1434:	cf 93       	push	r28
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND);
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	0e 94 c6 05 	call	0xb8c	; 0xb8c <LCD_sendCommand>
}
    1440:	cf 91       	pop	r28
    1442:	df 91       	pop	r29
    1444:	08 95       	ret

00001446 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(uint32 data)
{
    1446:	df 93       	push	r29
    1448:	cf 93       	push	r28
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62
    144e:	64 97       	sbiw	r28, 0x14	; 20
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	69 8b       	std	Y+17, r22	; 0x11
    145c:	7a 8b       	std	Y+18, r23	; 0x12
    145e:	8b 8b       	std	Y+19, r24	; 0x13
    1460:	9c 8b       	std	Y+20, r25	; 0x14
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    1462:	89 89       	ldd	r24, Y+17	; 0x11
    1464:	9a 89       	ldd	r25, Y+18	; 0x12
    1466:	9e 01       	movw	r18, r28
    1468:	2f 5f       	subi	r18, 0xFF	; 255
    146a:	3f 4f       	sbci	r19, 0xFF	; 255
    146c:	b9 01       	movw	r22, r18
    146e:	4a e0       	ldi	r20, 0x0A	; 10
    1470:	50 e0       	ldi	r21, 0x00	; 0
    1472:	0e 94 b9 14 	call	0x2972	; 0x2972 <itoa>
   LCD_displayString(buff); /* Display the string */
    1476:	ce 01       	movw	r24, r28
    1478:	01 96       	adiw	r24, 0x01	; 1
    147a:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
}
    147e:	64 96       	adiw	r28, 0x14	; 20
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	de bf       	out	0x3e, r29	; 62
    1486:	0f be       	out	0x3f, r0	; 63
    1488:	cd bf       	out	0x3d, r28	; 61
    148a:	cf 91       	pop	r28
    148c:	df 91       	pop	r29
    148e:	08 95       	ret

00001490 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	00 d0       	rcall	.+0      	; 0x1496 <GPIO_setupPinDirection+0x6>
    1496:	00 d0       	rcall	.+0      	; 0x1498 <GPIO_setupPinDirection+0x8>
    1498:	0f 92       	push	r0
    149a:	cd b7       	in	r28, 0x3d	; 61
    149c:	de b7       	in	r29, 0x3e	; 62
    149e:	89 83       	std	Y+1, r24	; 0x01
    14a0:	6a 83       	std	Y+2, r22	; 0x02
    14a2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	08 f0       	brcs	.+2      	; 0x14ac <GPIO_setupPinDirection+0x1c>
    14aa:	d5 c0       	rjmp	.+426    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	84 30       	cpi	r24, 0x04	; 4
    14b0:	08 f0       	brcs	.+2      	; 0x14b4 <GPIO_setupPinDirection+0x24>
    14b2:	d1 c0       	rjmp	.+418    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    14b4:	89 81       	ldd	r24, Y+1	; 0x01
    14b6:	28 2f       	mov	r18, r24
    14b8:	30 e0       	ldi	r19, 0x00	; 0
    14ba:	3d 83       	std	Y+5, r19	; 0x05
    14bc:	2c 83       	std	Y+4, r18	; 0x04
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	81 30       	cpi	r24, 0x01	; 1
    14c4:	91 05       	cpc	r25, r1
    14c6:	09 f4       	brne	.+2      	; 0x14ca <GPIO_setupPinDirection+0x3a>
    14c8:	43 c0       	rjmp	.+134    	; 0x1550 <GPIO_setupPinDirection+0xc0>
    14ca:	2c 81       	ldd	r18, Y+4	; 0x04
    14cc:	3d 81       	ldd	r19, Y+5	; 0x05
    14ce:	22 30       	cpi	r18, 0x02	; 2
    14d0:	31 05       	cpc	r19, r1
    14d2:	2c f4       	brge	.+10     	; 0x14de <GPIO_setupPinDirection+0x4e>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	00 97       	sbiw	r24, 0x00	; 0
    14da:	71 f0       	breq	.+28     	; 0x14f8 <GPIO_setupPinDirection+0x68>
    14dc:	bc c0       	rjmp	.+376    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
    14de:	2c 81       	ldd	r18, Y+4	; 0x04
    14e0:	3d 81       	ldd	r19, Y+5	; 0x05
    14e2:	22 30       	cpi	r18, 0x02	; 2
    14e4:	31 05       	cpc	r19, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <GPIO_setupPinDirection+0x5a>
    14e8:	5f c0       	rjmp	.+190    	; 0x15a8 <GPIO_setupPinDirection+0x118>
    14ea:	8c 81       	ldd	r24, Y+4	; 0x04
    14ec:	9d 81       	ldd	r25, Y+5	; 0x05
    14ee:	83 30       	cpi	r24, 0x03	; 3
    14f0:	91 05       	cpc	r25, r1
    14f2:	09 f4       	brne	.+2      	; 0x14f6 <GPIO_setupPinDirection+0x66>
    14f4:	85 c0       	rjmp	.+266    	; 0x1600 <GPIO_setupPinDirection+0x170>
    14f6:	af c0       	rjmp	.+350    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14f8:	8b 81       	ldd	r24, Y+3	; 0x03
    14fa:	81 30       	cpi	r24, 0x01	; 1
    14fc:	a1 f4       	brne	.+40     	; 0x1526 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14fe:	aa e3       	ldi	r26, 0x3A	; 58
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	ea e3       	ldi	r30, 0x3A	; 58
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	48 2f       	mov	r20, r24
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	28 2f       	mov	r18, r24
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	81 e0       	ldi	r24, 0x01	; 1
    1512:	90 e0       	ldi	r25, 0x00	; 0
    1514:	02 2e       	mov	r0, r18
    1516:	02 c0       	rjmp	.+4      	; 0x151c <GPIO_setupPinDirection+0x8c>
    1518:	88 0f       	add	r24, r24
    151a:	99 1f       	adc	r25, r25
    151c:	0a 94       	dec	r0
    151e:	e2 f7       	brpl	.-8      	; 0x1518 <GPIO_setupPinDirection+0x88>
    1520:	84 2b       	or	r24, r20
    1522:	8c 93       	st	X, r24
    1524:	98 c0       	rjmp	.+304    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1526:	aa e3       	ldi	r26, 0x3A	; 58
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	ea e3       	ldi	r30, 0x3A	; 58
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	48 2f       	mov	r20, r24
    1532:	8a 81       	ldd	r24, Y+2	; 0x02
    1534:	28 2f       	mov	r18, r24
    1536:	30 e0       	ldi	r19, 0x00	; 0
    1538:	81 e0       	ldi	r24, 0x01	; 1
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	02 2e       	mov	r0, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <GPIO_setupPinDirection+0xb4>
    1540:	88 0f       	add	r24, r24
    1542:	99 1f       	adc	r25, r25
    1544:	0a 94       	dec	r0
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <GPIO_setupPinDirection+0xb0>
    1548:	80 95       	com	r24
    154a:	84 23       	and	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	83 c0       	rjmp	.+262    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1550:	8b 81       	ldd	r24, Y+3	; 0x03
    1552:	81 30       	cpi	r24, 0x01	; 1
    1554:	a1 f4       	brne	.+40     	; 0x157e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1556:	a7 e3       	ldi	r26, 0x37	; 55
    1558:	b0 e0       	ldi	r27, 0x00	; 0
    155a:	e7 e3       	ldi	r30, 0x37	; 55
    155c:	f0 e0       	ldi	r31, 0x00	; 0
    155e:	80 81       	ld	r24, Z
    1560:	48 2f       	mov	r20, r24
    1562:	8a 81       	ldd	r24, Y+2	; 0x02
    1564:	28 2f       	mov	r18, r24
    1566:	30 e0       	ldi	r19, 0x00	; 0
    1568:	81 e0       	ldi	r24, 0x01	; 1
    156a:	90 e0       	ldi	r25, 0x00	; 0
    156c:	02 2e       	mov	r0, r18
    156e:	02 c0       	rjmp	.+4      	; 0x1574 <GPIO_setupPinDirection+0xe4>
    1570:	88 0f       	add	r24, r24
    1572:	99 1f       	adc	r25, r25
    1574:	0a 94       	dec	r0
    1576:	e2 f7       	brpl	.-8      	; 0x1570 <GPIO_setupPinDirection+0xe0>
    1578:	84 2b       	or	r24, r20
    157a:	8c 93       	st	X, r24
    157c:	6c c0       	rjmp	.+216    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    157e:	a7 e3       	ldi	r26, 0x37	; 55
    1580:	b0 e0       	ldi	r27, 0x00	; 0
    1582:	e7 e3       	ldi	r30, 0x37	; 55
    1584:	f0 e0       	ldi	r31, 0x00	; 0
    1586:	80 81       	ld	r24, Z
    1588:	48 2f       	mov	r20, r24
    158a:	8a 81       	ldd	r24, Y+2	; 0x02
    158c:	28 2f       	mov	r18, r24
    158e:	30 e0       	ldi	r19, 0x00	; 0
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	02 2e       	mov	r0, r18
    1596:	02 c0       	rjmp	.+4      	; 0x159c <GPIO_setupPinDirection+0x10c>
    1598:	88 0f       	add	r24, r24
    159a:	99 1f       	adc	r25, r25
    159c:	0a 94       	dec	r0
    159e:	e2 f7       	brpl	.-8      	; 0x1598 <GPIO_setupPinDirection+0x108>
    15a0:	80 95       	com	r24
    15a2:	84 23       	and	r24, r20
    15a4:	8c 93       	st	X, r24
    15a6:	57 c0       	rjmp	.+174    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	81 30       	cpi	r24, 0x01	; 1
    15ac:	a1 f4       	brne	.+40     	; 0x15d6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    15ae:	a4 e3       	ldi	r26, 0x34	; 52
    15b0:	b0 e0       	ldi	r27, 0x00	; 0
    15b2:	e4 e3       	ldi	r30, 0x34	; 52
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	80 81       	ld	r24, Z
    15b8:	48 2f       	mov	r20, r24
    15ba:	8a 81       	ldd	r24, Y+2	; 0x02
    15bc:	28 2f       	mov	r18, r24
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	81 e0       	ldi	r24, 0x01	; 1
    15c2:	90 e0       	ldi	r25, 0x00	; 0
    15c4:	02 2e       	mov	r0, r18
    15c6:	02 c0       	rjmp	.+4      	; 0x15cc <GPIO_setupPinDirection+0x13c>
    15c8:	88 0f       	add	r24, r24
    15ca:	99 1f       	adc	r25, r25
    15cc:	0a 94       	dec	r0
    15ce:	e2 f7       	brpl	.-8      	; 0x15c8 <GPIO_setupPinDirection+0x138>
    15d0:	84 2b       	or	r24, r20
    15d2:	8c 93       	st	X, r24
    15d4:	40 c0       	rjmp	.+128    	; 0x1656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15d6:	a4 e3       	ldi	r26, 0x34	; 52
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e4 e3       	ldi	r30, 0x34	; 52
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	48 2f       	mov	r20, r24
    15e2:	8a 81       	ldd	r24, Y+2	; 0x02
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	02 2e       	mov	r0, r18
    15ee:	02 c0       	rjmp	.+4      	; 0x15f4 <GPIO_setupPinDirection+0x164>
    15f0:	88 0f       	add	r24, r24
    15f2:	99 1f       	adc	r25, r25
    15f4:	0a 94       	dec	r0
    15f6:	e2 f7       	brpl	.-8      	; 0x15f0 <GPIO_setupPinDirection+0x160>
    15f8:	80 95       	com	r24
    15fa:	84 23       	and	r24, r20
    15fc:	8c 93       	st	X, r24
    15fe:	2b c0       	rjmp	.+86     	; 0x1656 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	81 30       	cpi	r24, 0x01	; 1
    1604:	a1 f4       	brne	.+40     	; 0x162e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1606:	a1 e3       	ldi	r26, 0x31	; 49
    1608:	b0 e0       	ldi	r27, 0x00	; 0
    160a:	e1 e3       	ldi	r30, 0x31	; 49
    160c:	f0 e0       	ldi	r31, 0x00	; 0
    160e:	80 81       	ld	r24, Z
    1610:	48 2f       	mov	r20, r24
    1612:	8a 81       	ldd	r24, Y+2	; 0x02
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	81 e0       	ldi	r24, 0x01	; 1
    161a:	90 e0       	ldi	r25, 0x00	; 0
    161c:	02 2e       	mov	r0, r18
    161e:	02 c0       	rjmp	.+4      	; 0x1624 <GPIO_setupPinDirection+0x194>
    1620:	88 0f       	add	r24, r24
    1622:	99 1f       	adc	r25, r25
    1624:	0a 94       	dec	r0
    1626:	e2 f7       	brpl	.-8      	; 0x1620 <GPIO_setupPinDirection+0x190>
    1628:	84 2b       	or	r24, r20
    162a:	8c 93       	st	X, r24
    162c:	14 c0       	rjmp	.+40     	; 0x1656 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    162e:	a1 e3       	ldi	r26, 0x31	; 49
    1630:	b0 e0       	ldi	r27, 0x00	; 0
    1632:	e1 e3       	ldi	r30, 0x31	; 49
    1634:	f0 e0       	ldi	r31, 0x00	; 0
    1636:	80 81       	ld	r24, Z
    1638:	48 2f       	mov	r20, r24
    163a:	8a 81       	ldd	r24, Y+2	; 0x02
    163c:	28 2f       	mov	r18, r24
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	81 e0       	ldi	r24, 0x01	; 1
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	02 2e       	mov	r0, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <GPIO_setupPinDirection+0x1bc>
    1648:	88 0f       	add	r24, r24
    164a:	99 1f       	adc	r25, r25
    164c:	0a 94       	dec	r0
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <GPIO_setupPinDirection+0x1b8>
    1650:	80 95       	com	r24
    1652:	84 23       	and	r24, r20
    1654:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1656:	0f 90       	pop	r0
    1658:	0f 90       	pop	r0
    165a:	0f 90       	pop	r0
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	00 d0       	rcall	.+0      	; 0x166c <GPIO_writePin+0x6>
    166c:	00 d0       	rcall	.+0      	; 0x166e <GPIO_writePin+0x8>
    166e:	0f 92       	push	r0
    1670:	cd b7       	in	r28, 0x3d	; 61
    1672:	de b7       	in	r29, 0x3e	; 62
    1674:	89 83       	std	Y+1, r24	; 0x01
    1676:	6a 83       	std	Y+2, r22	; 0x02
    1678:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    167a:	8a 81       	ldd	r24, Y+2	; 0x02
    167c:	88 30       	cpi	r24, 0x08	; 8
    167e:	08 f0       	brcs	.+2      	; 0x1682 <GPIO_writePin+0x1c>
    1680:	d5 c0       	rjmp	.+426    	; 0x182c <GPIO_writePin+0x1c6>
    1682:	89 81       	ldd	r24, Y+1	; 0x01
    1684:	84 30       	cpi	r24, 0x04	; 4
    1686:	08 f0       	brcs	.+2      	; 0x168a <GPIO_writePin+0x24>
    1688:	d1 c0       	rjmp	.+418    	; 0x182c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    168a:	89 81       	ldd	r24, Y+1	; 0x01
    168c:	28 2f       	mov	r18, r24
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	3d 83       	std	Y+5, r19	; 0x05
    1692:	2c 83       	std	Y+4, r18	; 0x04
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	9d 81       	ldd	r25, Y+5	; 0x05
    1698:	81 30       	cpi	r24, 0x01	; 1
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <GPIO_writePin+0x3a>
    169e:	43 c0       	rjmp	.+134    	; 0x1726 <GPIO_writePin+0xc0>
    16a0:	2c 81       	ldd	r18, Y+4	; 0x04
    16a2:	3d 81       	ldd	r19, Y+5	; 0x05
    16a4:	22 30       	cpi	r18, 0x02	; 2
    16a6:	31 05       	cpc	r19, r1
    16a8:	2c f4       	brge	.+10     	; 0x16b4 <GPIO_writePin+0x4e>
    16aa:	8c 81       	ldd	r24, Y+4	; 0x04
    16ac:	9d 81       	ldd	r25, Y+5	; 0x05
    16ae:	00 97       	sbiw	r24, 0x00	; 0
    16b0:	71 f0       	breq	.+28     	; 0x16ce <GPIO_writePin+0x68>
    16b2:	bc c0       	rjmp	.+376    	; 0x182c <GPIO_writePin+0x1c6>
    16b4:	2c 81       	ldd	r18, Y+4	; 0x04
    16b6:	3d 81       	ldd	r19, Y+5	; 0x05
    16b8:	22 30       	cpi	r18, 0x02	; 2
    16ba:	31 05       	cpc	r19, r1
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <GPIO_writePin+0x5a>
    16be:	5f c0       	rjmp	.+190    	; 0x177e <GPIO_writePin+0x118>
    16c0:	8c 81       	ldd	r24, Y+4	; 0x04
    16c2:	9d 81       	ldd	r25, Y+5	; 0x05
    16c4:	83 30       	cpi	r24, 0x03	; 3
    16c6:	91 05       	cpc	r25, r1
    16c8:	09 f4       	brne	.+2      	; 0x16cc <GPIO_writePin+0x66>
    16ca:	85 c0       	rjmp	.+266    	; 0x17d6 <GPIO_writePin+0x170>
    16cc:	af c0       	rjmp	.+350    	; 0x182c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16ce:	8b 81       	ldd	r24, Y+3	; 0x03
    16d0:	81 30       	cpi	r24, 0x01	; 1
    16d2:	a1 f4       	brne	.+40     	; 0x16fc <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16d4:	ab e3       	ldi	r26, 0x3B	; 59
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	eb e3       	ldi	r30, 0x3B	; 59
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_writePin+0x8c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_writePin+0x88>
    16f6:	84 2b       	or	r24, r20
    16f8:	8c 93       	st	X, r24
    16fa:	98 c0       	rjmp	.+304    	; 0x182c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16fc:	ab e3       	ldi	r26, 0x3B	; 59
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	eb e3       	ldi	r30, 0x3B	; 59
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	48 2f       	mov	r20, r24
    1708:	8a 81       	ldd	r24, Y+2	; 0x02
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	81 e0       	ldi	r24, 0x01	; 1
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	02 2e       	mov	r0, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_writePin+0xb4>
    1716:	88 0f       	add	r24, r24
    1718:	99 1f       	adc	r25, r25
    171a:	0a 94       	dec	r0
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_writePin+0xb0>
    171e:	80 95       	com	r24
    1720:	84 23       	and	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	83 c0       	rjmp	.+262    	; 0x182c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1726:	8b 81       	ldd	r24, Y+3	; 0x03
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	a1 f4       	brne	.+40     	; 0x1754 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    172c:	a8 e3       	ldi	r26, 0x38	; 56
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e8 e3       	ldi	r30, 0x38	; 56
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_writePin+0xe4>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_writePin+0xe0>
    174e:	84 2b       	or	r24, r20
    1750:	8c 93       	st	X, r24
    1752:	6c c0       	rjmp	.+216    	; 0x182c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1754:	a8 e3       	ldi	r26, 0x38	; 56
    1756:	b0 e0       	ldi	r27, 0x00	; 0
    1758:	e8 e3       	ldi	r30, 0x38	; 56
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	80 81       	ld	r24, Z
    175e:	48 2f       	mov	r20, r24
    1760:	8a 81       	ldd	r24, Y+2	; 0x02
    1762:	28 2f       	mov	r18, r24
    1764:	30 e0       	ldi	r19, 0x00	; 0
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	02 2e       	mov	r0, r18
    176c:	02 c0       	rjmp	.+4      	; 0x1772 <GPIO_writePin+0x10c>
    176e:	88 0f       	add	r24, r24
    1770:	99 1f       	adc	r25, r25
    1772:	0a 94       	dec	r0
    1774:	e2 f7       	brpl	.-8      	; 0x176e <GPIO_writePin+0x108>
    1776:	80 95       	com	r24
    1778:	84 23       	and	r24, r20
    177a:	8c 93       	st	X, r24
    177c:	57 c0       	rjmp	.+174    	; 0x182c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    177e:	8b 81       	ldd	r24, Y+3	; 0x03
    1780:	81 30       	cpi	r24, 0x01	; 1
    1782:	a1 f4       	brne	.+40     	; 0x17ac <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1784:	a5 e3       	ldi	r26, 0x35	; 53
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e5 e3       	ldi	r30, 0x35	; 53
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_writePin+0x13c>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_writePin+0x138>
    17a6:	84 2b       	or	r24, r20
    17a8:	8c 93       	st	X, r24
    17aa:	40 c0       	rjmp	.+128    	; 0x182c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    17ac:	a5 e3       	ldi	r26, 0x35	; 53
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	e5 e3       	ldi	r30, 0x35	; 53
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	48 2f       	mov	r20, r24
    17b8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	02 2e       	mov	r0, r18
    17c4:	02 c0       	rjmp	.+4      	; 0x17ca <GPIO_writePin+0x164>
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	0a 94       	dec	r0
    17cc:	e2 f7       	brpl	.-8      	; 0x17c6 <GPIO_writePin+0x160>
    17ce:	80 95       	com	r24
    17d0:	84 23       	and	r24, r20
    17d2:	8c 93       	st	X, r24
    17d4:	2b c0       	rjmp	.+86     	; 0x182c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	81 30       	cpi	r24, 0x01	; 1
    17da:	a1 f4       	brne	.+40     	; 0x1804 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17dc:	a2 e3       	ldi	r26, 0x32	; 50
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e2 e3       	ldi	r30, 0x32	; 50
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	48 2f       	mov	r20, r24
    17e8:	8a 81       	ldd	r24, Y+2	; 0x02
    17ea:	28 2f       	mov	r18, r24
    17ec:	30 e0       	ldi	r19, 0x00	; 0
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	02 2e       	mov	r0, r18
    17f4:	02 c0       	rjmp	.+4      	; 0x17fa <GPIO_writePin+0x194>
    17f6:	88 0f       	add	r24, r24
    17f8:	99 1f       	adc	r25, r25
    17fa:	0a 94       	dec	r0
    17fc:	e2 f7       	brpl	.-8      	; 0x17f6 <GPIO_writePin+0x190>
    17fe:	84 2b       	or	r24, r20
    1800:	8c 93       	st	X, r24
    1802:	14 c0       	rjmp	.+40     	; 0x182c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1804:	a2 e3       	ldi	r26, 0x32	; 50
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e2 e3       	ldi	r30, 0x32	; 50
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	48 2f       	mov	r20, r24
    1810:	8a 81       	ldd	r24, Y+2	; 0x02
    1812:	28 2f       	mov	r18, r24
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	81 e0       	ldi	r24, 0x01	; 1
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	02 2e       	mov	r0, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <GPIO_writePin+0x1bc>
    181e:	88 0f       	add	r24, r24
    1820:	99 1f       	adc	r25, r25
    1822:	0a 94       	dec	r0
    1824:	e2 f7       	brpl	.-8      	; 0x181e <GPIO_writePin+0x1b8>
    1826:	80 95       	com	r24
    1828:	84 23       	and	r24, r20
    182a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    182c:	0f 90       	pop	r0
    182e:	0f 90       	pop	r0
    1830:	0f 90       	pop	r0
    1832:	0f 90       	pop	r0
    1834:	0f 90       	pop	r0
    1836:	cf 91       	pop	r28
    1838:	df 91       	pop	r29
    183a:	08 95       	ret

0000183c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    183c:	df 93       	push	r29
    183e:	cf 93       	push	r28
    1840:	00 d0       	rcall	.+0      	; 0x1842 <GPIO_readPin+0x6>
    1842:	00 d0       	rcall	.+0      	; 0x1844 <GPIO_readPin+0x8>
    1844:	0f 92       	push	r0
    1846:	cd b7       	in	r28, 0x3d	; 61
    1848:	de b7       	in	r29, 0x3e	; 62
    184a:	8a 83       	std	Y+2, r24	; 0x02
    184c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    184e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	88 30       	cpi	r24, 0x08	; 8
    1854:	08 f0       	brcs	.+2      	; 0x1858 <GPIO_readPin+0x1c>
    1856:	84 c0       	rjmp	.+264    	; 0x1960 <GPIO_readPin+0x124>
    1858:	8a 81       	ldd	r24, Y+2	; 0x02
    185a:	84 30       	cpi	r24, 0x04	; 4
    185c:	08 f0       	brcs	.+2      	; 0x1860 <GPIO_readPin+0x24>
    185e:	80 c0       	rjmp	.+256    	; 0x1960 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	3d 83       	std	Y+5, r19	; 0x05
    1868:	2c 83       	std	Y+4, r18	; 0x04
    186a:	4c 81       	ldd	r20, Y+4	; 0x04
    186c:	5d 81       	ldd	r21, Y+5	; 0x05
    186e:	41 30       	cpi	r20, 0x01	; 1
    1870:	51 05       	cpc	r21, r1
    1872:	79 f1       	breq	.+94     	; 0x18d2 <GPIO_readPin+0x96>
    1874:	8c 81       	ldd	r24, Y+4	; 0x04
    1876:	9d 81       	ldd	r25, Y+5	; 0x05
    1878:	82 30       	cpi	r24, 0x02	; 2
    187a:	91 05       	cpc	r25, r1
    187c:	34 f4       	brge	.+12     	; 0x188a <GPIO_readPin+0x4e>
    187e:	2c 81       	ldd	r18, Y+4	; 0x04
    1880:	3d 81       	ldd	r19, Y+5	; 0x05
    1882:	21 15       	cp	r18, r1
    1884:	31 05       	cpc	r19, r1
    1886:	69 f0       	breq	.+26     	; 0x18a2 <GPIO_readPin+0x66>
    1888:	6b c0       	rjmp	.+214    	; 0x1960 <GPIO_readPin+0x124>
    188a:	4c 81       	ldd	r20, Y+4	; 0x04
    188c:	5d 81       	ldd	r21, Y+5	; 0x05
    188e:	42 30       	cpi	r20, 0x02	; 2
    1890:	51 05       	cpc	r21, r1
    1892:	b9 f1       	breq	.+110    	; 0x1902 <GPIO_readPin+0xc6>
    1894:	8c 81       	ldd	r24, Y+4	; 0x04
    1896:	9d 81       	ldd	r25, Y+5	; 0x05
    1898:	83 30       	cpi	r24, 0x03	; 3
    189a:	91 05       	cpc	r25, r1
    189c:	09 f4       	brne	.+2      	; 0x18a0 <GPIO_readPin+0x64>
    189e:	49 c0       	rjmp	.+146    	; 0x1932 <GPIO_readPin+0xf6>
    18a0:	5f c0       	rjmp	.+190    	; 0x1960 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    18a2:	e9 e3       	ldi	r30, 0x39	; 57
    18a4:	f0 e0       	ldi	r31, 0x00	; 0
    18a6:	80 81       	ld	r24, Z
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	8b 81       	ldd	r24, Y+3	; 0x03
    18ae:	88 2f       	mov	r24, r24
    18b0:	90 e0       	ldi	r25, 0x00	; 0
    18b2:	a9 01       	movw	r20, r18
    18b4:	02 c0       	rjmp	.+4      	; 0x18ba <GPIO_readPin+0x7e>
    18b6:	55 95       	asr	r21
    18b8:	47 95       	ror	r20
    18ba:	8a 95       	dec	r24
    18bc:	e2 f7       	brpl	.-8      	; 0x18b6 <GPIO_readPin+0x7a>
    18be:	ca 01       	movw	r24, r20
    18c0:	81 70       	andi	r24, 0x01	; 1
    18c2:	90 70       	andi	r25, 0x00	; 0
    18c4:	88 23       	and	r24, r24
    18c6:	19 f0       	breq	.+6      	; 0x18ce <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	89 83       	std	Y+1, r24	; 0x01
    18cc:	49 c0       	rjmp	.+146    	; 0x1960 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ce:	19 82       	std	Y+1, r1	; 0x01
    18d0:	47 c0       	rjmp	.+142    	; 0x1960 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18d2:	e6 e3       	ldi	r30, 0x36	; 54
    18d4:	f0 e0       	ldi	r31, 0x00	; 0
    18d6:	80 81       	ld	r24, Z
    18d8:	28 2f       	mov	r18, r24
    18da:	30 e0       	ldi	r19, 0x00	; 0
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	88 2f       	mov	r24, r24
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	a9 01       	movw	r20, r18
    18e4:	02 c0       	rjmp	.+4      	; 0x18ea <GPIO_readPin+0xae>
    18e6:	55 95       	asr	r21
    18e8:	47 95       	ror	r20
    18ea:	8a 95       	dec	r24
    18ec:	e2 f7       	brpl	.-8      	; 0x18e6 <GPIO_readPin+0xaa>
    18ee:	ca 01       	movw	r24, r20
    18f0:	81 70       	andi	r24, 0x01	; 1
    18f2:	90 70       	andi	r25, 0x00	; 0
    18f4:	88 23       	and	r24, r24
    18f6:	19 f0       	breq	.+6      	; 0x18fe <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18f8:	81 e0       	ldi	r24, 0x01	; 1
    18fa:	89 83       	std	Y+1, r24	; 0x01
    18fc:	31 c0       	rjmp	.+98     	; 0x1960 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18fe:	19 82       	std	Y+1, r1	; 0x01
    1900:	2f c0       	rjmp	.+94     	; 0x1960 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1902:	e3 e3       	ldi	r30, 0x33	; 51
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <GPIO_readPin+0xde>
    1916:	55 95       	asr	r21
    1918:	47 95       	ror	r20
    191a:	8a 95       	dec	r24
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <GPIO_readPin+0xda>
    191e:	ca 01       	movw	r24, r20
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	90 70       	andi	r25, 0x00	; 0
    1924:	88 23       	and	r24, r24
    1926:	19 f0       	breq	.+6      	; 0x192e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	89 83       	std	Y+1, r24	; 0x01
    192c:	19 c0       	rjmp	.+50     	; 0x1960 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    192e:	19 82       	std	Y+1, r1	; 0x01
    1930:	17 c0       	rjmp	.+46     	; 0x1960 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1932:	e0 e3       	ldi	r30, 0x30	; 48
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	80 81       	ld	r24, Z
    1938:	28 2f       	mov	r18, r24
    193a:	30 e0       	ldi	r19, 0x00	; 0
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	88 2f       	mov	r24, r24
    1940:	90 e0       	ldi	r25, 0x00	; 0
    1942:	a9 01       	movw	r20, r18
    1944:	02 c0       	rjmp	.+4      	; 0x194a <GPIO_readPin+0x10e>
    1946:	55 95       	asr	r21
    1948:	47 95       	ror	r20
    194a:	8a 95       	dec	r24
    194c:	e2 f7       	brpl	.-8      	; 0x1946 <GPIO_readPin+0x10a>
    194e:	ca 01       	movw	r24, r20
    1950:	81 70       	andi	r24, 0x01	; 1
    1952:	90 70       	andi	r25, 0x00	; 0
    1954:	88 23       	and	r24, r24
    1956:	19 f0       	breq	.+6      	; 0x195e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	89 83       	std	Y+1, r24	; 0x01
    195c:	01 c0       	rjmp	.+2      	; 0x1960 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    195e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1960:	89 81       	ldd	r24, Y+1	; 0x01
}
    1962:	0f 90       	pop	r0
    1964:	0f 90       	pop	r0
    1966:	0f 90       	pop	r0
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	08 95       	ret

00001972 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1972:	df 93       	push	r29
    1974:	cf 93       	push	r28
    1976:	00 d0       	rcall	.+0      	; 0x1978 <GPIO_setupPortDirection+0x6>
    1978:	00 d0       	rcall	.+0      	; 0x197a <GPIO_setupPortDirection+0x8>
    197a:	cd b7       	in	r28, 0x3d	; 61
    197c:	de b7       	in	r29, 0x3e	; 62
    197e:	89 83       	std	Y+1, r24	; 0x01
    1980:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1982:	89 81       	ldd	r24, Y+1	; 0x01
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	90 f5       	brcc	.+100    	; 0x19ec <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	3c 83       	std	Y+4, r19	; 0x04
    1990:	2b 83       	std	Y+3, r18	; 0x03
    1992:	8b 81       	ldd	r24, Y+3	; 0x03
    1994:	9c 81       	ldd	r25, Y+4	; 0x04
    1996:	81 30       	cpi	r24, 0x01	; 1
    1998:	91 05       	cpc	r25, r1
    199a:	d1 f0       	breq	.+52     	; 0x19d0 <GPIO_setupPortDirection+0x5e>
    199c:	2b 81       	ldd	r18, Y+3	; 0x03
    199e:	3c 81       	ldd	r19, Y+4	; 0x04
    19a0:	22 30       	cpi	r18, 0x02	; 2
    19a2:	31 05       	cpc	r19, r1
    19a4:	2c f4       	brge	.+10     	; 0x19b0 <GPIO_setupPortDirection+0x3e>
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	9c 81       	ldd	r25, Y+4	; 0x04
    19aa:	00 97       	sbiw	r24, 0x00	; 0
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <GPIO_setupPortDirection+0x54>
    19ae:	1e c0       	rjmp	.+60     	; 0x19ec <GPIO_setupPortDirection+0x7a>
    19b0:	2b 81       	ldd	r18, Y+3	; 0x03
    19b2:	3c 81       	ldd	r19, Y+4	; 0x04
    19b4:	22 30       	cpi	r18, 0x02	; 2
    19b6:	31 05       	cpc	r19, r1
    19b8:	81 f0       	breq	.+32     	; 0x19da <GPIO_setupPortDirection+0x68>
    19ba:	8b 81       	ldd	r24, Y+3	; 0x03
    19bc:	9c 81       	ldd	r25, Y+4	; 0x04
    19be:	83 30       	cpi	r24, 0x03	; 3
    19c0:	91 05       	cpc	r25, r1
    19c2:	81 f0       	breq	.+32     	; 0x19e4 <GPIO_setupPortDirection+0x72>
    19c4:	13 c0       	rjmp	.+38     	; 0x19ec <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19c6:	ea e3       	ldi	r30, 0x3A	; 58
    19c8:	f0 e0       	ldi	r31, 0x00	; 0
    19ca:	8a 81       	ldd	r24, Y+2	; 0x02
    19cc:	80 83       	st	Z, r24
    19ce:	0e c0       	rjmp	.+28     	; 0x19ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19d0:	e7 e3       	ldi	r30, 0x37	; 55
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	80 83       	st	Z, r24
    19d8:	09 c0       	rjmp	.+18     	; 0x19ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19da:	e4 e3       	ldi	r30, 0x34	; 52
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	8a 81       	ldd	r24, Y+2	; 0x02
    19e0:	80 83       	st	Z, r24
    19e2:	04 c0       	rjmp	.+8      	; 0x19ec <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19e4:	e1 e3       	ldi	r30, 0x31	; 49
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	80 83       	st	Z, r24
			break;
		}
	}
}
    19ec:	0f 90       	pop	r0
    19ee:	0f 90       	pop	r0
    19f0:	0f 90       	pop	r0
    19f2:	0f 90       	pop	r0
    19f4:	cf 91       	pop	r28
    19f6:	df 91       	pop	r29
    19f8:	08 95       	ret

000019fa <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19fa:	df 93       	push	r29
    19fc:	cf 93       	push	r28
    19fe:	00 d0       	rcall	.+0      	; 0x1a00 <GPIO_writePort+0x6>
    1a00:	00 d0       	rcall	.+0      	; 0x1a02 <GPIO_writePort+0x8>
    1a02:	cd b7       	in	r28, 0x3d	; 61
    1a04:	de b7       	in	r29, 0x3e	; 62
    1a06:	89 83       	std	Y+1, r24	; 0x01
    1a08:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a0a:	89 81       	ldd	r24, Y+1	; 0x01
    1a0c:	84 30       	cpi	r24, 0x04	; 4
    1a0e:	90 f5       	brcc	.+100    	; 0x1a74 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	28 2f       	mov	r18, r24
    1a14:	30 e0       	ldi	r19, 0x00	; 0
    1a16:	3c 83       	std	Y+4, r19	; 0x04
    1a18:	2b 83       	std	Y+3, r18	; 0x03
    1a1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1e:	81 30       	cpi	r24, 0x01	; 1
    1a20:	91 05       	cpc	r25, r1
    1a22:	d1 f0       	breq	.+52     	; 0x1a58 <GPIO_writePort+0x5e>
    1a24:	2b 81       	ldd	r18, Y+3	; 0x03
    1a26:	3c 81       	ldd	r19, Y+4	; 0x04
    1a28:	22 30       	cpi	r18, 0x02	; 2
    1a2a:	31 05       	cpc	r19, r1
    1a2c:	2c f4       	brge	.+10     	; 0x1a38 <GPIO_writePort+0x3e>
    1a2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a30:	9c 81       	ldd	r25, Y+4	; 0x04
    1a32:	00 97       	sbiw	r24, 0x00	; 0
    1a34:	61 f0       	breq	.+24     	; 0x1a4e <GPIO_writePort+0x54>
    1a36:	1e c0       	rjmp	.+60     	; 0x1a74 <GPIO_writePort+0x7a>
    1a38:	2b 81       	ldd	r18, Y+3	; 0x03
    1a3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1a3c:	22 30       	cpi	r18, 0x02	; 2
    1a3e:	31 05       	cpc	r19, r1
    1a40:	81 f0       	breq	.+32     	; 0x1a62 <GPIO_writePort+0x68>
    1a42:	8b 81       	ldd	r24, Y+3	; 0x03
    1a44:	9c 81       	ldd	r25, Y+4	; 0x04
    1a46:	83 30       	cpi	r24, 0x03	; 3
    1a48:	91 05       	cpc	r25, r1
    1a4a:	81 f0       	breq	.+32     	; 0x1a6c <GPIO_writePort+0x72>
    1a4c:	13 c0       	rjmp	.+38     	; 0x1a74 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a4e:	eb e3       	ldi	r30, 0x3B	; 59
    1a50:	f0 e0       	ldi	r31, 0x00	; 0
    1a52:	8a 81       	ldd	r24, Y+2	; 0x02
    1a54:	80 83       	st	Z, r24
    1a56:	0e c0       	rjmp	.+28     	; 0x1a74 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a58:	e8 e3       	ldi	r30, 0x38	; 56
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5e:	80 83       	st	Z, r24
    1a60:	09 c0       	rjmp	.+18     	; 0x1a74 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a62:	e5 e3       	ldi	r30, 0x35	; 53
    1a64:	f0 e0       	ldi	r31, 0x00	; 0
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	80 83       	st	Z, r24
    1a6a:	04 c0       	rjmp	.+8      	; 0x1a74 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a6c:	e2 e3       	ldi	r30, 0x32	; 50
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	0f 90       	pop	r0
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	08 95       	ret

00001a82 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a82:	df 93       	push	r29
    1a84:	cf 93       	push	r28
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <GPIO_readPort+0x6>
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <GPIO_readPort+0x8>
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a90:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	84 30       	cpi	r24, 0x04	; 4
    1a96:	90 f5       	brcc	.+100    	; 0x1afc <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a98:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3c 83       	std	Y+4, r19	; 0x04
    1aa0:	2b 83       	std	Y+3, r18	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	81 30       	cpi	r24, 0x01	; 1
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	d1 f0       	breq	.+52     	; 0x1ae0 <GPIO_readPort+0x5e>
    1aac:	2b 81       	ldd	r18, Y+3	; 0x03
    1aae:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab0:	22 30       	cpi	r18, 0x02	; 2
    1ab2:	31 05       	cpc	r19, r1
    1ab4:	2c f4       	brge	.+10     	; 0x1ac0 <GPIO_readPort+0x3e>
    1ab6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	61 f0       	breq	.+24     	; 0x1ad6 <GPIO_readPort+0x54>
    1abe:	1e c0       	rjmp	.+60     	; 0x1afc <GPIO_readPort+0x7a>
    1ac0:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac2:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac4:	22 30       	cpi	r18, 0x02	; 2
    1ac6:	31 05       	cpc	r19, r1
    1ac8:	81 f0       	breq	.+32     	; 0x1aea <GPIO_readPort+0x68>
    1aca:	8b 81       	ldd	r24, Y+3	; 0x03
    1acc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ace:	83 30       	cpi	r24, 0x03	; 3
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	81 f0       	breq	.+32     	; 0x1af4 <GPIO_readPort+0x72>
    1ad4:	13 c0       	rjmp	.+38     	; 0x1afc <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1ad6:	e9 e3       	ldi	r30, 0x39	; 57
    1ad8:	f0 e0       	ldi	r31, 0x00	; 0
    1ada:	80 81       	ld	r24, Z
    1adc:	89 83       	std	Y+1, r24	; 0x01
    1ade:	0e c0       	rjmp	.+28     	; 0x1afc <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ae0:	e6 e3       	ldi	r30, 0x36	; 54
    1ae2:	f0 e0       	ldi	r31, 0x00	; 0
    1ae4:	80 81       	ld	r24, Z
    1ae6:	89 83       	std	Y+1, r24	; 0x01
    1ae8:	09 c0       	rjmp	.+18     	; 0x1afc <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1aea:	e3 e3       	ldi	r30, 0x33	; 51
    1aec:	f0 e0       	ldi	r31, 0x00	; 0
    1aee:	80 81       	ld	r24, Z
    1af0:	89 83       	std	Y+1, r24	; 0x01
    1af2:	04 c0       	rjmp	.+8      	; 0x1afc <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1af4:	e0 e3       	ldi	r30, 0x30	; 48
    1af6:	f0 e0       	ldi	r31, 0x00	; 0
    1af8:	80 81       	ld	r24, Z
    1afa:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1afc:	89 81       	ldd	r24, Y+1	; 0x01
}
    1afe:	0f 90       	pop	r0
    1b00:	0f 90       	pop	r0
    1b02:	0f 90       	pop	r0
    1b04:	0f 90       	pop	r0
    1b06:	cf 91       	pop	r28
    1b08:	df 91       	pop	r29
    1b0a:	08 95       	ret

00001b0c <main>:

uint8 pass[6];
uint8 flag=0;


int main(){
    1b0c:	df 93       	push	r29
    1b0e:	cf 93       	push	r28
    1b10:	cd b7       	in	r28, 0x3d	; 61
    1b12:	de b7       	in	r29, 0x3e	; 62
    1b14:	2e 97       	sbiw	r28, 0x0e	; 14
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	f8 94       	cli
    1b1a:	de bf       	out	0x3e, r29	; 62
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	cd bf       	out	0x3d, r28	; 61
	drivers_init();
    1b20:	0e 94 1f 0e 	call	0x1c3e	; 0x1c3e <drivers_init>
	intro();
    1b24:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <intro>

	while(1){
		if(flag==0)
    1b28:	80 91 ee 00 	lds	r24, 0x00EE
    1b2c:	88 23       	and	r24, r24
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <main+0x26>
    1b30:	83 c0       	rjmp	.+262    	; 0x1c38 <main+0x12c>
			{
			create_password();
    1b32:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <create_password>
			check_password();
    1b36:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <check_password>

			if(UART_recieveByte() == MISMATCH_PASSWORD){
    1b3a:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    1b3e:	80 31       	cpi	r24, 0x10	; 16
    1b40:	99 f7       	brne	.-26     	; 0x1b28 <main+0x1c>
				LCD_clearScreen();
    1b42:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
				LCD_displayString("Wrong Input");
    1b46:	80 e6       	ldi	r24, 0x60	; 96
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	a0 e2       	ldi	r26, 0x20	; 32
    1b54:	b1 e4       	ldi	r27, 0x41	; 65
    1b56:	8b 87       	std	Y+11, r24	; 0x0b
    1b58:	9c 87       	std	Y+12, r25	; 0x0c
    1b5a:	ad 87       	std	Y+13, r26	; 0x0d
    1b5c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b5e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b60:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b62:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b64:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b66:	20 e0       	ldi	r18, 0x00	; 0
    1b68:	30 e4       	ldi	r19, 0x40	; 64
    1b6a:	4c e9       	ldi	r20, 0x9C	; 156
    1b6c:	56 e4       	ldi	r21, 0x46	; 70
    1b6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b72:	dc 01       	movw	r26, r24
    1b74:	cb 01       	movw	r24, r22
    1b76:	8f 83       	std	Y+7, r24	; 0x07
    1b78:	98 87       	std	Y+8, r25	; 0x08
    1b7a:	a9 87       	std	Y+9, r26	; 0x09
    1b7c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b7e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b80:	78 85       	ldd	r23, Y+8	; 0x08
    1b82:	89 85       	ldd	r24, Y+9	; 0x09
    1b84:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 e8       	ldi	r20, 0x80	; 128
    1b8c:	5f e3       	ldi	r21, 0x3F	; 63
    1b8e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b92:	88 23       	and	r24, r24
    1b94:	2c f4       	brge	.+10     	; 0x1ba0 <main+0x94>
		__ticks = 1;
    1b96:	81 e0       	ldi	r24, 0x01	; 1
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	9e 83       	std	Y+6, r25	; 0x06
    1b9c:	8d 83       	std	Y+5, r24	; 0x05
    1b9e:	3f c0       	rjmp	.+126    	; 0x1c1e <main+0x112>
	else if (__tmp > 65535)
    1ba0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ba2:	78 85       	ldd	r23, Y+8	; 0x08
    1ba4:	89 85       	ldd	r24, Y+9	; 0x09
    1ba6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	3f ef       	ldi	r19, 0xFF	; 255
    1bac:	4f e7       	ldi	r20, 0x7F	; 127
    1bae:	57 e4       	ldi	r21, 0x47	; 71
    1bb0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bb4:	18 16       	cp	r1, r24
    1bb6:	4c f5       	brge	.+82     	; 0x1c0a <main+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bbc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bbe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bc0:	20 e0       	ldi	r18, 0x00	; 0
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	40 e2       	ldi	r20, 0x20	; 32
    1bc6:	51 e4       	ldi	r21, 0x41	; 65
    1bc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bcc:	dc 01       	movw	r26, r24
    1bce:	cb 01       	movw	r24, r22
    1bd0:	bc 01       	movw	r22, r24
    1bd2:	cd 01       	movw	r24, r26
    1bd4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd8:	dc 01       	movw	r26, r24
    1bda:	cb 01       	movw	r24, r22
    1bdc:	9e 83       	std	Y+6, r25	; 0x06
    1bde:	8d 83       	std	Y+5, r24	; 0x05
    1be0:	0f c0       	rjmp	.+30     	; 0x1c00 <main+0xf4>
    1be2:	80 ed       	ldi	r24, 0xD0	; 208
    1be4:	97 e0       	ldi	r25, 0x07	; 7
    1be6:	9c 83       	std	Y+4, r25	; 0x04
    1be8:	8b 83       	std	Y+3, r24	; 0x03
    1bea:	8b 81       	ldd	r24, Y+3	; 0x03
    1bec:	9c 81       	ldd	r25, Y+4	; 0x04
    1bee:	01 97       	sbiw	r24, 0x01	; 1
    1bf0:	f1 f7       	brne	.-4      	; 0x1bee <main+0xe2>
    1bf2:	9c 83       	std	Y+4, r25	; 0x04
    1bf4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf6:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bfa:	01 97       	sbiw	r24, 0x01	; 1
    1bfc:	9e 83       	std	Y+6, r25	; 0x06
    1bfe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c00:	8d 81       	ldd	r24, Y+5	; 0x05
    1c02:	9e 81       	ldd	r25, Y+6	; 0x06
    1c04:	00 97       	sbiw	r24, 0x00	; 0
    1c06:	69 f7       	brne	.-38     	; 0x1be2 <main+0xd6>
    1c08:	14 c0       	rjmp	.+40     	; 0x1c32 <main+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c0a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c0c:	78 85       	ldd	r23, Y+8	; 0x08
    1c0e:	89 85       	ldd	r24, Y+9	; 0x09
    1c10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c16:	dc 01       	movw	r26, r24
    1c18:	cb 01       	movw	r24, r22
    1c1a:	9e 83       	std	Y+6, r25	; 0x06
    1c1c:	8d 83       	std	Y+5, r24	; 0x05
    1c1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c20:	9e 81       	ldd	r25, Y+6	; 0x06
    1c22:	9a 83       	std	Y+2, r25	; 0x02
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	89 81       	ldd	r24, Y+1	; 0x01
    1c28:	9a 81       	ldd	r25, Y+2	; 0x02
    1c2a:	01 97       	sbiw	r24, 0x01	; 1
    1c2c:	f1 f7       	brne	.-4      	; 0x1c2a <main+0x11e>
    1c2e:	9a 83       	std	Y+2, r25	; 0x02
    1c30:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10);
				intro();
    1c32:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <intro>
    1c36:	78 cf       	rjmp	.-272    	; 0x1b28 <main+0x1c>
			}
		}
		else
			main_menu();
    1c38:	0e 94 36 10 	call	0x206c	; 0x206c <main_menu>
    1c3c:	75 cf       	rjmp	.-278    	; 0x1b28 <main+0x1c>

00001c3e <drivers_init>:
 *******************************************************************************/

/*Description :
 * initialize all used drivers
 */
void drivers_init(){
    1c3e:	df 93       	push	r29
    1c40:	cf 93       	push	r28
    1c42:	cd b7       	in	r28, 0x3d	; 61
    1c44:	de b7       	in	r29, 0x3e	; 62
	LCD_init();
    1c46:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_init>
	UART_init(&UartConfig);
    1c4a:	86 ee       	ldi	r24, 0xE6	; 230
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	0e 94 27 13 	call	0x264e	; 0x264e <UART_init>
}
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <intro>:

/*Description :
 * display the intro message and request the user to create his password
 */
void intro(){
    1c58:	0f 93       	push	r16
    1c5a:	1f 93       	push	r17
    1c5c:	df 93       	push	r29
    1c5e:	cf 93       	push	r28
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	2f 97       	sbiw	r28, 0x0f	; 15
    1c66:	0f b6       	in	r0, 0x3f	; 63
    1c68:	f8 94       	cli
    1c6a:	de bf       	out	0x3e, r29	; 62
    1c6c:	0f be       	out	0x3f, r0	; 63
    1c6e:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
    1c70:	1f 86       	std	Y+15, r1	; 0x0f
	LCD_clearScreen();
    1c72:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
	LCD_displayString("Enter new pass:");
    1c76:	8c e6       	ldi	r24, 0x6C	; 108
    1c78:	90 e0       	ldi	r25, 0x00	; 0
    1c7a:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
	/* this for loop is responsible for taking the password from the user and store the input in Pass array*/
	for (i=0;i<5;i++)
    1c7e:	1f 86       	std	Y+15, r1	; 0x0f
    1c80:	85 c0       	rjmp	.+266    	; 0x1d8c <intro+0x134>
    1c82:	80 e0       	ldi	r24, 0x00	; 0
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	a8 e4       	ldi	r26, 0x48	; 72
    1c88:	b2 e4       	ldi	r27, 0x42	; 66
    1c8a:	8b 87       	std	Y+11, r24	; 0x0b
    1c8c:	9c 87       	std	Y+12, r25	; 0x0c
    1c8e:	ad 87       	std	Y+13, r26	; 0x0d
    1c90:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c92:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c94:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c96:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c98:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	30 e4       	ldi	r19, 0x40	; 64
    1c9e:	4c e9       	ldi	r20, 0x9C	; 156
    1ca0:	56 e4       	ldi	r21, 0x46	; 70
    1ca2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	8f 83       	std	Y+7, r24	; 0x07
    1cac:	98 87       	std	Y+8, r25	; 0x08
    1cae:	a9 87       	std	Y+9, r26	; 0x09
    1cb0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cb2:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb4:	78 85       	ldd	r23, Y+8	; 0x08
    1cb6:	89 85       	ldd	r24, Y+9	; 0x09
    1cb8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cba:	20 e0       	ldi	r18, 0x00	; 0
    1cbc:	30 e0       	ldi	r19, 0x00	; 0
    1cbe:	40 e8       	ldi	r20, 0x80	; 128
    1cc0:	5f e3       	ldi	r21, 0x3F	; 63
    1cc2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cc6:	88 23       	and	r24, r24
    1cc8:	2c f4       	brge	.+10     	; 0x1cd4 <intro+0x7c>
		__ticks = 1;
    1cca:	81 e0       	ldi	r24, 0x01	; 1
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	9e 83       	std	Y+6, r25	; 0x06
    1cd0:	8d 83       	std	Y+5, r24	; 0x05
    1cd2:	3f c0       	rjmp	.+126    	; 0x1d52 <intro+0xfa>
	else if (__tmp > 65535)
    1cd4:	6f 81       	ldd	r22, Y+7	; 0x07
    1cd6:	78 85       	ldd	r23, Y+8	; 0x08
    1cd8:	89 85       	ldd	r24, Y+9	; 0x09
    1cda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	3f ef       	ldi	r19, 0xFF	; 255
    1ce0:	4f e7       	ldi	r20, 0x7F	; 127
    1ce2:	57 e4       	ldi	r21, 0x47	; 71
    1ce4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ce8:	18 16       	cp	r1, r24
    1cea:	4c f5       	brge	.+82     	; 0x1d3e <intro+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cec:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cee:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf4:	20 e0       	ldi	r18, 0x00	; 0
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e2       	ldi	r20, 0x20	; 32
    1cfa:	51 e4       	ldi	r21, 0x41	; 65
    1cfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d00:	dc 01       	movw	r26, r24
    1d02:	cb 01       	movw	r24, r22
    1d04:	bc 01       	movw	r22, r24
    1d06:	cd 01       	movw	r24, r26
    1d08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0c:	dc 01       	movw	r26, r24
    1d0e:	cb 01       	movw	r24, r22
    1d10:	9e 83       	std	Y+6, r25	; 0x06
    1d12:	8d 83       	std	Y+5, r24	; 0x05
    1d14:	0f c0       	rjmp	.+30     	; 0x1d34 <intro+0xdc>
    1d16:	80 ed       	ldi	r24, 0xD0	; 208
    1d18:	97 e0       	ldi	r25, 0x07	; 7
    1d1a:	9c 83       	std	Y+4, r25	; 0x04
    1d1c:	8b 83       	std	Y+3, r24	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	01 97       	sbiw	r24, 0x01	; 1
    1d24:	f1 f7       	brne	.-4      	; 0x1d22 <intro+0xca>
    1d26:	9c 83       	std	Y+4, r25	; 0x04
    1d28:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	9e 83       	std	Y+6, r25	; 0x06
    1d32:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	00 97       	sbiw	r24, 0x00	; 0
    1d3a:	69 f7       	brne	.-38     	; 0x1d16 <intro+0xbe>
    1d3c:	14 c0       	rjmp	.+40     	; 0x1d66 <intro+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1d40:	78 85       	ldd	r23, Y+8	; 0x08
    1d42:	89 85       	ldd	r24, Y+9	; 0x09
    1d44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	cb 01       	movw	r24, r22
    1d4e:	9e 83       	std	Y+6, r25	; 0x06
    1d50:	8d 83       	std	Y+5, r24	; 0x05
    1d52:	8d 81       	ldd	r24, Y+5	; 0x05
    1d54:	9e 81       	ldd	r25, Y+6	; 0x06
    1d56:	9a 83       	std	Y+2, r25	; 0x02
    1d58:	89 83       	std	Y+1, r24	; 0x01
    1d5a:	89 81       	ldd	r24, Y+1	; 0x01
    1d5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	f1 f7       	brne	.-4      	; 0x1d5e <intro+0x106>
    1d62:	9a 83       	std	Y+2, r25	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(50);
		pass[i]=KEYPAD_getPressedKey();  /* array to store the password*/
    1d66:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d68:	08 2f       	mov	r16, r24
    1d6a:	10 e0       	ldi	r17, 0x00	; 0
    1d6c:	0e 94 32 11 	call	0x2264	; 0x2264 <KEYPAD_getPressedKey>
    1d70:	f8 01       	movw	r30, r16
    1d72:	ef 50       	subi	r30, 0x0F	; 15
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	80 83       	st	Z, r24
		LCD_moveCursor(1,i);
    1d78:	81 e0       	ldi	r24, 0x01	; 1
    1d7a:	6f 85       	ldd	r22, Y+15	; 0x0f
    1d7c:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LCD_moveCursor>
		LCD_displayCharacter('*');
    1d80:	8a e2       	ldi	r24, 0x2A	; 42
    1d82:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_displayCharacter>
void intro(){
	uint8 i=0;
	LCD_clearScreen();
	LCD_displayString("Enter new pass:");
	/* this for loop is responsible for taking the password from the user and store the input in Pass array*/
	for (i=0;i<5;i++)
    1d86:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d88:	8f 5f       	subi	r24, 0xFF	; 255
    1d8a:	8f 87       	std	Y+15, r24	; 0x0f
    1d8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d8e:	85 30       	cpi	r24, 0x05	; 5
    1d90:	08 f4       	brcc	.+2      	; 0x1d94 <intro+0x13c>
    1d92:	77 cf       	rjmp	.-274    	; 0x1c82 <intro+0x2a>
		_delay_ms(50);
		pass[i]=KEYPAD_getPressedKey();  /* array to store the password*/
		LCD_moveCursor(1,i);
		LCD_displayCharacter('*');
	}
	while(KEYPAD_getPressedKey() !=13){} /* wait till the user press enter */
    1d94:	0e 94 32 11 	call	0x2264	; 0x2264 <KEYPAD_getPressedKey>
    1d98:	8d 30       	cpi	r24, 0x0D	; 13
    1d9a:	e1 f7       	brne	.-8      	; 0x1d94 <intro+0x13c>
	flag=0; /* making this flag =0 so the main function switches to create password and check password functions*/
    1d9c:	10 92 ee 00 	sts	0x00EE, r1
}
    1da0:	2f 96       	adiw	r28, 0x0f	; 15
    1da2:	0f b6       	in	r0, 0x3f	; 63
    1da4:	f8 94       	cli
    1da6:	de bf       	out	0x3e, r29	; 62
    1da8:	0f be       	out	0x3f, r0	; 63
    1daa:	cd bf       	out	0x3d, r28	; 61
    1dac:	cf 91       	pop	r28
    1dae:	df 91       	pop	r29
    1db0:	1f 91       	pop	r17
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <create_password>:
/*Description :
 * after taking the password from the user this function is responsible for creating it by sending it to the
 * control MCU and the control MCU will do the rest of this job
 */
void create_password(){
    1db6:	df 93       	push	r29
    1db8:	cf 93       	push	r28
    1dba:	0f 92       	push	r0
    1dbc:	cd b7       	in	r28, 0x3d	; 61
    1dbe:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(CREATE_PASSWORD); /* make the control MCU know that he should do the create password function now*/
    1dc0:	85 e0       	ldi	r24, 0x05	; 5
    1dc2:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_sendByte>
	while(UART_recieveByte() != CREATE_PASSWORD){} /* to wait for control MCU to be available */
    1dc6:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    1dca:	85 30       	cpi	r24, 0x05	; 5
    1dcc:	e1 f7       	brne	.-8      	; 0x1dc6 <create_password+0x10>
	for(uint8 i=0;i<5;i++){
    1dce:	19 82       	std	Y+1, r1	; 0x01
    1dd0:	0c c0       	rjmp	.+24     	; 0x1dea <create_password+0x34>
		UART_sendByte(pass[i]);} /* sending the password by UART to the control MCU */
    1dd2:	89 81       	ldd	r24, Y+1	; 0x01
    1dd4:	88 2f       	mov	r24, r24
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	fc 01       	movw	r30, r24
    1dda:	ef 50       	subi	r30, 0x0F	; 15
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_sendByte>
 * control MCU and the control MCU will do the rest of this job
 */
void create_password(){
	UART_sendByte(CREATE_PASSWORD); /* make the control MCU know that he should do the create password function now*/
	while(UART_recieveByte() != CREATE_PASSWORD){} /* to wait for control MCU to be available */
	for(uint8 i=0;i<5;i++){
    1de4:	89 81       	ldd	r24, Y+1	; 0x01
    1de6:	8f 5f       	subi	r24, 0xFF	; 255
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	89 81       	ldd	r24, Y+1	; 0x01
    1dec:	85 30       	cpi	r24, 0x05	; 5
    1dee:	88 f3       	brcs	.-30     	; 0x1dd2 <create_password+0x1c>
		UART_sendByte(pass[i]);} /* sending the password by UART to the control MCU */
}
    1df0:	0f 90       	pop	r0
    1df2:	cf 91       	pop	r28
    1df4:	df 91       	pop	r29
    1df6:	08 95       	ret

00001df8 <check_password>:
/*Description :
 * after taking the password from the user for the second time this function is responsible for
 *  sending it to the control MCU and the control MCU will do the rest of this job to check if
 *  this input is correct or not
 */
void check_password(){
    1df8:	0f 93       	push	r16
    1dfa:	1f 93       	push	r17
    1dfc:	df 93       	push	r29
    1dfe:	cf 93       	push	r28
    1e00:	cd b7       	in	r28, 0x3d	; 61
    1e02:	de b7       	in	r29, 0x3e	; 62
    1e04:	6e 97       	sbiw	r28, 0x1e	; 30
    1e06:	0f b6       	in	r0, 0x3f	; 63
    1e08:	f8 94       	cli
    1e0a:	de bf       	out	0x3e, r29	; 62
    1e0c:	0f be       	out	0x3f, r0	; 63
    1e0e:	cd bf       	out	0x3d, r28	; 61
	uint8 i;
	LCD_clearScreen();
    1e10:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
	LCD_displayString("Reenter pass:");
    1e14:	8c e7       	ldi	r24, 0x7C	; 124
    1e16:	90 e0       	ldi	r25, 0x00	; 0
    1e18:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
	/* this for loop is responsible for taking the password from the user and store the input in Pass array*/
	for (i=0;i<5;i++){
    1e1c:	1e 8e       	std	Y+30, r1	; 0x1e
    1e1e:	85 c0       	rjmp	.+266    	; 0x1f2a <check_password+0x132>
    1e20:	80 e0       	ldi	r24, 0x00	; 0
    1e22:	90 e0       	ldi	r25, 0x00	; 0
    1e24:	a8 e4       	ldi	r26, 0x48	; 72
    1e26:	b2 e4       	ldi	r27, 0x42	; 66
    1e28:	89 8f       	std	Y+25, r24	; 0x19
    1e2a:	9a 8f       	std	Y+26, r25	; 0x1a
    1e2c:	ab 8f       	std	Y+27, r26	; 0x1b
    1e2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e30:	69 8d       	ldd	r22, Y+25	; 0x19
    1e32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e38:	20 e0       	ldi	r18, 0x00	; 0
    1e3a:	30 e4       	ldi	r19, 0x40	; 64
    1e3c:	4c e9       	ldi	r20, 0x9C	; 156
    1e3e:	56 e4       	ldi	r21, 0x46	; 70
    1e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	8d 8b       	std	Y+21, r24	; 0x15
    1e4a:	9e 8b       	std	Y+22, r25	; 0x16
    1e4c:	af 8b       	std	Y+23, r26	; 0x17
    1e4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e50:	6d 89       	ldd	r22, Y+21	; 0x15
    1e52:	7e 89       	ldd	r23, Y+22	; 0x16
    1e54:	8f 89       	ldd	r24, Y+23	; 0x17
    1e56:	98 8d       	ldd	r25, Y+24	; 0x18
    1e58:	20 e0       	ldi	r18, 0x00	; 0
    1e5a:	30 e0       	ldi	r19, 0x00	; 0
    1e5c:	40 e8       	ldi	r20, 0x80	; 128
    1e5e:	5f e3       	ldi	r21, 0x3F	; 63
    1e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e64:	88 23       	and	r24, r24
    1e66:	2c f4       	brge	.+10     	; 0x1e72 <check_password+0x7a>
		__ticks = 1;
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	9c 8b       	std	Y+20, r25	; 0x14
    1e6e:	8b 8b       	std	Y+19, r24	; 0x13
    1e70:	3f c0       	rjmp	.+126    	; 0x1ef0 <check_password+0xf8>
	else if (__tmp > 65535)
    1e72:	6d 89       	ldd	r22, Y+21	; 0x15
    1e74:	7e 89       	ldd	r23, Y+22	; 0x16
    1e76:	8f 89       	ldd	r24, Y+23	; 0x17
    1e78:	98 8d       	ldd	r25, Y+24	; 0x18
    1e7a:	20 e0       	ldi	r18, 0x00	; 0
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
    1e7e:	4f e7       	ldi	r20, 0x7F	; 127
    1e80:	57 e4       	ldi	r21, 0x47	; 71
    1e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e86:	18 16       	cp	r1, r24
    1e88:	4c f5       	brge	.+82     	; 0x1edc <check_password+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e8a:	69 8d       	ldd	r22, Y+25	; 0x19
    1e8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e92:	20 e0       	ldi	r18, 0x00	; 0
    1e94:	30 e0       	ldi	r19, 0x00	; 0
    1e96:	40 e2       	ldi	r20, 0x20	; 32
    1e98:	51 e4       	ldi	r21, 0x41	; 65
    1e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9e:	dc 01       	movw	r26, r24
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	bc 01       	movw	r22, r24
    1ea4:	cd 01       	movw	r24, r26
    1ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eaa:	dc 01       	movw	r26, r24
    1eac:	cb 01       	movw	r24, r22
    1eae:	9c 8b       	std	Y+20, r25	; 0x14
    1eb0:	8b 8b       	std	Y+19, r24	; 0x13
    1eb2:	0f c0       	rjmp	.+30     	; 0x1ed2 <check_password+0xda>
    1eb4:	80 ed       	ldi	r24, 0xD0	; 208
    1eb6:	97 e0       	ldi	r25, 0x07	; 7
    1eb8:	9a 8b       	std	Y+18, r25	; 0x12
    1eba:	89 8b       	std	Y+17, r24	; 0x11
    1ebc:	89 89       	ldd	r24, Y+17	; 0x11
    1ebe:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec0:	01 97       	sbiw	r24, 0x01	; 1
    1ec2:	f1 f7       	brne	.-4      	; 0x1ec0 <check_password+0xc8>
    1ec4:	9a 8b       	std	Y+18, r25	; 0x12
    1ec6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ec8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eca:	9c 89       	ldd	r25, Y+20	; 0x14
    1ecc:	01 97       	sbiw	r24, 0x01	; 1
    1ece:	9c 8b       	std	Y+20, r25	; 0x14
    1ed0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed6:	00 97       	sbiw	r24, 0x00	; 0
    1ed8:	69 f7       	brne	.-38     	; 0x1eb4 <check_password+0xbc>
    1eda:	14 c0       	rjmp	.+40     	; 0x1f04 <check_password+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1edc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ede:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee0:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee2:	98 8d       	ldd	r25, Y+24	; 0x18
    1ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	9c 8b       	std	Y+20, r25	; 0x14
    1eee:	8b 8b       	std	Y+19, r24	; 0x13
    1ef0:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef2:	9c 89       	ldd	r25, Y+20	; 0x14
    1ef4:	98 8b       	std	Y+16, r25	; 0x10
    1ef6:	8f 87       	std	Y+15, r24	; 0x0f
    1ef8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1efa:	98 89       	ldd	r25, Y+16	; 0x10
    1efc:	01 97       	sbiw	r24, 0x01	; 1
    1efe:	f1 f7       	brne	.-4      	; 0x1efc <check_password+0x104>
    1f00:	98 8b       	std	Y+16, r25	; 0x10
    1f02:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		pass[i]=KEYPAD_getPressedKey(); /* array to store the password*/
    1f04:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f06:	08 2f       	mov	r16, r24
    1f08:	10 e0       	ldi	r17, 0x00	; 0
    1f0a:	0e 94 32 11 	call	0x2264	; 0x2264 <KEYPAD_getPressedKey>
    1f0e:	f8 01       	movw	r30, r16
    1f10:	ef 50       	subi	r30, 0x0F	; 15
    1f12:	ff 4f       	sbci	r31, 0xFF	; 255
    1f14:	80 83       	st	Z, r24
		LCD_moveCursor(1,i);
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1f1a:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LCD_moveCursor>
		LCD_displayCharacter('*');
    1f1e:	8a e2       	ldi	r24, 0x2A	; 42
    1f20:	0e 94 ba 07 	call	0xf74	; 0xf74 <LCD_displayCharacter>
void check_password(){
	uint8 i;
	LCD_clearScreen();
	LCD_displayString("Reenter pass:");
	/* this for loop is responsible for taking the password from the user and store the input in Pass array*/
	for (i=0;i<5;i++){
    1f24:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f26:	8f 5f       	subi	r24, 0xFF	; 255
    1f28:	8e 8f       	std	Y+30, r24	; 0x1e
    1f2a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f2c:	85 30       	cpi	r24, 0x05	; 5
    1f2e:	08 f4       	brcc	.+2      	; 0x1f32 <check_password+0x13a>
    1f30:	77 cf       	rjmp	.-274    	; 0x1e20 <check_password+0x28>
		pass[i]=KEYPAD_getPressedKey(); /* array to store the password*/
		LCD_moveCursor(1,i);
		LCD_displayCharacter('*');

	}
	while(KEYPAD_getPressedKey() !=13){} /* wait till the user press enter */
    1f32:	0e 94 32 11 	call	0x2264	; 0x2264 <KEYPAD_getPressedKey>
    1f36:	8d 30       	cpi	r24, 0x0D	; 13
    1f38:	e1 f7       	brne	.-8      	; 0x1f32 <check_password+0x13a>
	UART_sendByte(CHECK_PASSWORD); /* make the control MCU know that he should do the check password function now*/
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_sendByte>
		while(UART_recieveByte() != CHECK_PASSWORD){} /* to wait for control MCU to be available */
    1f40:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	e1 f7       	brne	.-8      	; 0x1f40 <check_password+0x148>
	for(uint8 i=0;i<5;i++)
    1f48:	1d 8e       	std	Y+29, r1	; 0x1d
    1f4a:	7e c0       	rjmp	.+252    	; 0x2048 <check_password+0x250>
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	90 e0       	ldi	r25, 0x00	; 0
    1f50:	a0 e8       	ldi	r26, 0x80	; 128
    1f52:	bf e3       	ldi	r27, 0x3F	; 63
    1f54:	8b 87       	std	Y+11, r24	; 0x0b
    1f56:	9c 87       	std	Y+12, r25	; 0x0c
    1f58:	ad 87       	std	Y+13, r26	; 0x0d
    1f5a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e4       	ldi	r19, 0x40	; 64
    1f68:	4c e9       	ldi	r20, 0x9C	; 156
    1f6a:	56 e4       	ldi	r21, 0x46	; 70
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	8f 83       	std	Y+7, r24	; 0x07
    1f76:	98 87       	std	Y+8, r25	; 0x08
    1f78:	a9 87       	std	Y+9, r26	; 0x09
    1f7a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f7c:	6f 81       	ldd	r22, Y+7	; 0x07
    1f7e:	78 85       	ldd	r23, Y+8	; 0x08
    1f80:	89 85       	ldd	r24, Y+9	; 0x09
    1f82:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f84:	20 e0       	ldi	r18, 0x00	; 0
    1f86:	30 e0       	ldi	r19, 0x00	; 0
    1f88:	40 e8       	ldi	r20, 0x80	; 128
    1f8a:	5f e3       	ldi	r21, 0x3F	; 63
    1f8c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f90:	88 23       	and	r24, r24
    1f92:	2c f4       	brge	.+10     	; 0x1f9e <check_password+0x1a6>
		__ticks = 1;
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	90 e0       	ldi	r25, 0x00	; 0
    1f98:	9e 83       	std	Y+6, r25	; 0x06
    1f9a:	8d 83       	std	Y+5, r24	; 0x05
    1f9c:	3f c0       	rjmp	.+126    	; 0x201c <check_password+0x224>
	else if (__tmp > 65535)
    1f9e:	6f 81       	ldd	r22, Y+7	; 0x07
    1fa0:	78 85       	ldd	r23, Y+8	; 0x08
    1fa2:	89 85       	ldd	r24, Y+9	; 0x09
    1fa4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fa6:	20 e0       	ldi	r18, 0x00	; 0
    1fa8:	3f ef       	ldi	r19, 0xFF	; 255
    1faa:	4f e7       	ldi	r20, 0x7F	; 127
    1fac:	57 e4       	ldi	r21, 0x47	; 71
    1fae:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fb2:	18 16       	cp	r1, r24
    1fb4:	4c f5       	brge	.+82     	; 0x2008 <check_password+0x210>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fb6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fba:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fbc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fbe:	20 e0       	ldi	r18, 0x00	; 0
    1fc0:	30 e0       	ldi	r19, 0x00	; 0
    1fc2:	40 e2       	ldi	r20, 0x20	; 32
    1fc4:	51 e4       	ldi	r21, 0x41	; 65
    1fc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	bc 01       	movw	r22, r24
    1fd0:	cd 01       	movw	r24, r26
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	0f c0       	rjmp	.+30     	; 0x1ffe <check_password+0x206>
    1fe0:	80 ed       	ldi	r24, 0xD0	; 208
    1fe2:	97 e0       	ldi	r25, 0x07	; 7
    1fe4:	9c 83       	std	Y+4, r25	; 0x04
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	f1 f7       	brne	.-4      	; 0x1fec <check_password+0x1f4>
    1ff0:	9c 83       	std	Y+4, r25	; 0x04
    1ff2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ff4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff8:	01 97       	sbiw	r24, 0x01	; 1
    1ffa:	9e 83       	std	Y+6, r25	; 0x06
    1ffc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffe:	8d 81       	ldd	r24, Y+5	; 0x05
    2000:	9e 81       	ldd	r25, Y+6	; 0x06
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	69 f7       	brne	.-38     	; 0x1fe0 <check_password+0x1e8>
    2006:	14 c0       	rjmp	.+40     	; 0x2030 <check_password+0x238>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	6f 81       	ldd	r22, Y+7	; 0x07
    200a:	78 85       	ldd	r23, Y+8	; 0x08
    200c:	89 85       	ldd	r24, Y+9	; 0x09
    200e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	9e 83       	std	Y+6, r25	; 0x06
    201a:	8d 83       	std	Y+5, r24	; 0x05
    201c:	8d 81       	ldd	r24, Y+5	; 0x05
    201e:	9e 81       	ldd	r25, Y+6	; 0x06
    2020:	9a 83       	std	Y+2, r25	; 0x02
    2022:	89 83       	std	Y+1, r24	; 0x01
    2024:	89 81       	ldd	r24, Y+1	; 0x01
    2026:	9a 81       	ldd	r25, Y+2	; 0x02
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <check_password+0x230>
    202c:	9a 83       	std	Y+2, r25	; 0x02
    202e:	89 83       	std	Y+1, r24	; 0x01
	{
		_delay_ms(1);
		UART_sendByte(pass[i]); /* sending the password by UART to the control MCU */
    2030:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2032:	88 2f       	mov	r24, r24
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	fc 01       	movw	r30, r24
    2038:	ef 50       	subi	r30, 0x0F	; 15
    203a:	ff 4f       	sbci	r31, 0xFF	; 255
    203c:	80 81       	ld	r24, Z
    203e:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_sendByte>

	}
	while(KEYPAD_getPressedKey() !=13){} /* wait till the user press enter */
	UART_sendByte(CHECK_PASSWORD); /* make the control MCU know that he should do the check password function now*/
		while(UART_recieveByte() != CHECK_PASSWORD){} /* to wait for control MCU to be available */
	for(uint8 i=0;i<5;i++)
    2042:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2044:	8f 5f       	subi	r24, 0xFF	; 255
    2046:	8d 8f       	std	Y+29, r24	; 0x1d
    2048:	8d 8d       	ldd	r24, Y+29	; 0x1d
    204a:	85 30       	cpi	r24, 0x05	; 5
    204c:	08 f4       	brcc	.+2      	; 0x2050 <check_password+0x258>
    204e:	7e cf       	rjmp	.-260    	; 0x1f4c <check_password+0x154>
	{
		_delay_ms(1);
		UART_sendByte(pass[i]); /* sending the password by UART to the control MCU */

	}
		flag=UNRESERVED; /* means now the flag has no use */
    2050:	8f ef       	ldi	r24, 0xFF	; 255
    2052:	80 93 ee 00 	sts	0x00EE, r24
}
    2056:	6e 96       	adiw	r28, 0x1e	; 30
    2058:	0f b6       	in	r0, 0x3f	; 63
    205a:	f8 94       	cli
    205c:	de bf       	out	0x3e, r29	; 62
    205e:	0f be       	out	0x3f, r0	; 63
    2060:	cd bf       	out	0x3d, r28	; 61
    2062:	cf 91       	pop	r28
    2064:	df 91       	pop	r29
    2066:	1f 91       	pop	r17
    2068:	0f 91       	pop	r16
    206a:	08 95       	ret

0000206c <main_menu>:

/*Description :
 * this function is reponsible for displaying the main menu for the user and take the input of what function
 * does he want to do
 */
void main_menu(){
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	cd b7       	in	r28, 0x3d	; 61
    2072:	de b7       	in	r29, 0x3e	; 62
    2074:	62 97       	sbiw	r28, 0x12	; 18
    2076:	0f b6       	in	r0, 0x3f	; 63
    2078:	f8 94       	cli
    207a:	de bf       	out	0x3e, r29	; 62
    207c:	0f be       	out	0x3f, r0	; 63
    207e:	cd bf       	out	0x3d, r28	; 61
	uint8 key;
	LCD_clearScreen();
    2080:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
	LCD_displayString("+: open door");
    2084:	8a e8       	ldi	r24, 0x8A	; 138
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
	LCD_moveCursor(1,0);
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	60 e0       	ldi	r22, 0x00	; 0
    2090:	0e 94 d7 09 	call	0x13ae	; 0x13ae <LCD_moveCursor>
	LCD_displayString("-: change pass");
    2094:	87 e9       	ldi	r24, 0x97	; 151
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
	key=KEYPAD_getPressedKey(); /* get the user request to do what he wants */
    209c:	0e 94 32 11 	call	0x2264	; 0x2264 <KEYPAD_getPressedKey>
    20a0:	88 8b       	std	Y+16, r24	; 0x10
	uint8 wrong_counter=0;  /* counter to see how much time did the user enter a wrong password*/
    20a2:	1f 86       	std	Y+15, r1	; 0x0f
	do {
		check_password(); /* call function to check the password*/
    20a4:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <check_password>

		/* if the user enter wrong password this if condition will become true*/
		if(UART_recieveByte() == MISMATCH_PASSWORD){
    20a8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    20ac:	80 31       	cpi	r24, 0x10	; 16
    20ae:	09 f0       	breq	.+2      	; 0x20b2 <main_menu+0x46>
    20b0:	7f c0       	rjmp	.+254    	; 0x21b0 <main_menu+0x144>
			wrong_counter++;
    20b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    20b4:	8f 5f       	subi	r24, 0xFF	; 255
    20b6:	8f 87       	std	Y+15, r24	; 0x0f
			LCD_clearScreen();
    20b8:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
			LCD_displayString("wrong password");
    20bc:	86 ea       	ldi	r24, 0xA6	; 166
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
    20c4:	80 e0       	ldi	r24, 0x00	; 0
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	a0 e2       	ldi	r26, 0x20	; 32
    20ca:	b1 e4       	ldi	r27, 0x41	; 65
    20cc:	8b 87       	std	Y+11, r24	; 0x0b
    20ce:	9c 87       	std	Y+12, r25	; 0x0c
    20d0:	ad 87       	std	Y+13, r26	; 0x0d
    20d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20da:	9e 85       	ldd	r25, Y+14	; 0x0e
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	30 e4       	ldi	r19, 0x40	; 64
    20e0:	4c e9       	ldi	r20, 0x9C	; 156
    20e2:	56 e4       	ldi	r21, 0x46	; 70
    20e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e8:	dc 01       	movw	r26, r24
    20ea:	cb 01       	movw	r24, r22
    20ec:	8f 83       	std	Y+7, r24	; 0x07
    20ee:	98 87       	std	Y+8, r25	; 0x08
    20f0:	a9 87       	std	Y+9, r26	; 0x09
    20f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e8       	ldi	r20, 0x80	; 128
    2102:	5f e3       	ldi	r21, 0x3F	; 63
    2104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2108:	88 23       	and	r24, r24
    210a:	2c f4       	brge	.+10     	; 0x2116 <main_menu+0xaa>
		__ticks = 1;
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	90 e0       	ldi	r25, 0x00	; 0
    2110:	9e 83       	std	Y+6, r25	; 0x06
    2112:	8d 83       	std	Y+5, r24	; 0x05
    2114:	3f c0       	rjmp	.+126    	; 0x2194 <main_menu+0x128>
	else if (__tmp > 65535)
    2116:	6f 81       	ldd	r22, Y+7	; 0x07
    2118:	78 85       	ldd	r23, Y+8	; 0x08
    211a:	89 85       	ldd	r24, Y+9	; 0x09
    211c:	9a 85       	ldd	r25, Y+10	; 0x0a
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	3f ef       	ldi	r19, 0xFF	; 255
    2122:	4f e7       	ldi	r20, 0x7F	; 127
    2124:	57 e4       	ldi	r21, 0x47	; 71
    2126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    212a:	18 16       	cp	r1, r24
    212c:	4c f5       	brge	.+82     	; 0x2180 <main_menu+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    212e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2130:	7c 85       	ldd	r23, Y+12	; 0x0c
    2132:	8d 85       	ldd	r24, Y+13	; 0x0d
    2134:	9e 85       	ldd	r25, Y+14	; 0x0e
    2136:	20 e0       	ldi	r18, 0x00	; 0
    2138:	30 e0       	ldi	r19, 0x00	; 0
    213a:	40 e2       	ldi	r20, 0x20	; 32
    213c:	51 e4       	ldi	r21, 0x41	; 65
    213e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2142:	dc 01       	movw	r26, r24
    2144:	cb 01       	movw	r24, r22
    2146:	bc 01       	movw	r22, r24
    2148:	cd 01       	movw	r24, r26
    214a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214e:	dc 01       	movw	r26, r24
    2150:	cb 01       	movw	r24, r22
    2152:	9e 83       	std	Y+6, r25	; 0x06
    2154:	8d 83       	std	Y+5, r24	; 0x05
    2156:	0f c0       	rjmp	.+30     	; 0x2176 <main_menu+0x10a>
    2158:	80 ed       	ldi	r24, 0xD0	; 208
    215a:	97 e0       	ldi	r25, 0x07	; 7
    215c:	9c 83       	std	Y+4, r25	; 0x04
    215e:	8b 83       	std	Y+3, r24	; 0x03
    2160:	8b 81       	ldd	r24, Y+3	; 0x03
    2162:	9c 81       	ldd	r25, Y+4	; 0x04
    2164:	01 97       	sbiw	r24, 0x01	; 1
    2166:	f1 f7       	brne	.-4      	; 0x2164 <main_menu+0xf8>
    2168:	9c 83       	std	Y+4, r25	; 0x04
    216a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    216c:	8d 81       	ldd	r24, Y+5	; 0x05
    216e:	9e 81       	ldd	r25, Y+6	; 0x06
    2170:	01 97       	sbiw	r24, 0x01	; 1
    2172:	9e 83       	std	Y+6, r25	; 0x06
    2174:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2176:	8d 81       	ldd	r24, Y+5	; 0x05
    2178:	9e 81       	ldd	r25, Y+6	; 0x06
    217a:	00 97       	sbiw	r24, 0x00	; 0
    217c:	69 f7       	brne	.-38     	; 0x2158 <main_menu+0xec>
    217e:	14 c0       	rjmp	.+40     	; 0x21a8 <main_menu+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2180:	6f 81       	ldd	r22, Y+7	; 0x07
    2182:	78 85       	ldd	r23, Y+8	; 0x08
    2184:	89 85       	ldd	r24, Y+9	; 0x09
    2186:	9a 85       	ldd	r25, Y+10	; 0x0a
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	9e 83       	std	Y+6, r25	; 0x06
    2192:	8d 83       	std	Y+5, r24	; 0x05
    2194:	8d 81       	ldd	r24, Y+5	; 0x05
    2196:	9e 81       	ldd	r25, Y+6	; 0x06
    2198:	9a 83       	std	Y+2, r25	; 0x02
    219a:	89 83       	std	Y+1, r24	; 0x01
    219c:	89 81       	ldd	r24, Y+1	; 0x01
    219e:	9a 81       	ldd	r25, Y+2	; 0x02
    21a0:	01 97       	sbiw	r24, 0x01	; 1
    21a2:	f1 f7       	brne	.-4      	; 0x21a0 <main_menu+0x134>
    21a4:	9a 83       	std	Y+2, r25	; 0x02
    21a6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			if(wrong_counter ==3)
    21a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    21aa:	83 30       	cpi	r24, 0x03	; 3
    21ac:	09 f0       	breq	.+2      	; 0x21b0 <main_menu+0x144>
    21ae:	7a cf       	rjmp	.-268    	; 0x20a4 <main_menu+0x38>
		}

		else
			break; /* break the do while loop when the password is correct*/
	}while(1);
	if(wrong_counter ==3){
    21b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b2:	83 30       	cpi	r24, 0x03	; 3
    21b4:	79 f4       	brne	.+30     	; 0x21d4 <main_menu+0x168>
		LCD_clearScreen();
    21b6:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
		LCD_displayString("thief");
    21ba:	85 eb       	ldi	r24, 0xB5	; 181
    21bc:	90 e0       	ldi	r25, 0x00	; 0
    21be:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
		UART_sendByte(THIEF);  /* send THIEF command to the control MCU so it can do the procedure */
    21c2:	89 e1       	ldi	r24, 0x19	; 25
    21c4:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_sendByte>

		/* wait for the control MCU to tell the interface MCU that the procedure is complete now */
		while(UART_recieveByte() !=THIEF_CAUGHT){}
    21c8:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    21cc:	80 32       	cpi	r24, 0x20	; 32
    21ce:	e1 f7       	brne	.-8      	; 0x21c8 <main_menu+0x15c>
		wrong_counter=0; /* reseting the counter */
    21d0:	1f 86       	std	Y+15, r1	; 0x0f
    21d2:	17 c0       	rjmp	.+46     	; 0x2202 <main_menu+0x196>

	}
	else {
		LCD_clearScreen();
    21d4:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>

	switch (key){
    21d8:	88 89       	ldd	r24, Y+16	; 0x10
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3a 8b       	std	Y+18, r19	; 0x12
    21e0:	29 8b       	std	Y+17, r18	; 0x11
    21e2:	89 89       	ldd	r24, Y+17	; 0x11
    21e4:	9a 89       	ldd	r25, Y+18	; 0x12
    21e6:	8b 32       	cpi	r24, 0x2B	; 43
    21e8:	91 05       	cpc	r25, r1
    21ea:	31 f0       	breq	.+12     	; 0x21f8 <main_menu+0x18c>
    21ec:	29 89       	ldd	r18, Y+17	; 0x11
    21ee:	3a 89       	ldd	r19, Y+18	; 0x12
    21f0:	2d 32       	cpi	r18, 0x2D	; 45
    21f2:	31 05       	cpc	r19, r1
    21f4:	21 f0       	breq	.+8      	; 0x21fe <main_menu+0x192>
    21f6:	05 c0       	rjmp	.+10     	; 0x2202 <main_menu+0x196>
	case '+':
			open_door();	/* the user has requested to open the door*/
    21f8:	0e 94 0a 11 	call	0x2214	; 0x2214 <open_door>
    21fc:	02 c0       	rjmp	.+4      	; 0x2202 <main_menu+0x196>
			break;

	case '-':
		intro();  /* the user has requested to change the password and it is same function as the intro fucntion*/
    21fe:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <intro>
	}
}
}
    2202:	62 96       	adiw	r28, 0x12	; 18
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	cf 91       	pop	r28
    2210:	df 91       	pop	r29
    2212:	08 95       	ret

00002214 <open_door>:

/*Description :
 * if the user chose to open door this function will be called to open the door by sending this command to
 * the control MCU and display the state of the door on the LCD
 */
void open_door(){
    2214:	df 93       	push	r29
    2216:	cf 93       	push	r28
    2218:	cd b7       	in	r28, 0x3d	; 61
    221a:	de b7       	in	r29, 0x3e	; 62
	/*send open door command to the control MCU to make do the procedure for this command*/
	UART_sendByte(OPEN_DOOR);
    221c:	85 e1       	ldi	r24, 0x15	; 21
    221e:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_sendByte>
	LCD_clearScreen();
    2222:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
	LCD_displayString("Opening...");
    2226:	8b eb       	ldi	r24, 0xBB	; 187
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
	/* wait for the control MCU to finish opening the door and start holding it */
	while(UART_recieveByte() != HOLD_DOOR){}
    222e:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    2232:	87 31       	cpi	r24, 0x17	; 23
    2234:	e1 f7       	brne	.-8      	; 0x222e <open_door+0x1a>
	LCD_clearScreen();
    2236:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
	LCD_displayString("	HOLDING...");
    223a:	86 ec       	ldi	r24, 0xC6	; 198
    223c:	90 e0       	ldi	r25, 0x00	; 0
    223e:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
	/* wait for the control MCU to finish holding and start closing the door */
	while(UART_recieveByte() != CLOSE_DOOR){}
    2242:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    2246:	86 31       	cpi	r24, 0x16	; 22
    2248:	e1 f7       	brne	.-8      	; 0x2242 <open_door+0x2e>
	LCD_clearScreen();
    224a:	0e 94 19 0a 	call	0x1432	; 0x1432 <LCD_clearScreen>
	LCD_displayString("	Closing...");
    224e:	82 ed       	ldi	r24, 0xD2	; 210
    2250:	90 e0       	ldi	r25, 0x00	; 0
    2252:	0e 94 ae 09 	call	0x135c	; 0x135c <LCD_displayString>
	while(UART_recieveByte() != DOOR_DONE){} /* the the control MCU send this then the procedure is complete*/
    2256:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    225a:	88 31       	cpi	r24, 0x18	; 24
    225c:	e1 f7       	brne	.-8      	; 0x2256 <open_door+0x42>

}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	00 d0       	rcall	.+0      	; 0x226a <KEYPAD_getPressedKey+0x6>
    226a:	0f 92       	push	r0
    226c:	cd b7       	in	r28, 0x3d	; 61
    226e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    2270:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    2272:	1b 82       	std	Y+3, r1	; 0x03
    2274:	43 c0       	rjmp	.+134    	; 0x22fc <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	60 e0       	ldi	r22, 0x00	; 0
    227a:	0e 94 b9 0c 	call	0x1972	; 0x1972 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	98 2f       	mov	r25, r24
    2282:	9c 5f       	subi	r25, 0xFC	; 252
    2284:	82 e0       	ldi	r24, 0x02	; 2
    2286:	69 2f       	mov	r22, r25
    2288:	41 e0       	ldi	r20, 0x01	; 1
    228a:	0e 94 48 0a 	call	0x1490	; 0x1490 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	9c 01       	movw	r18, r24
    2296:	2c 5f       	subi	r18, 0xFC	; 252
    2298:	3f 4f       	sbci	r19, 0xFF	; 255
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <KEYPAD_getPressedKey+0x40>
    22a0:	88 0f       	add	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	2a 95       	dec	r18
    22a6:	e2 f7       	brpl	.-8      	; 0x22a0 <KEYPAD_getPressedKey+0x3c>
    22a8:	80 95       	com	r24
    22aa:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    22ac:	82 e0       	ldi	r24, 0x02	; 2
    22ae:	69 81       	ldd	r22, Y+1	; 0x01
    22b0:	0e 94 fd 0c 	call	0x19fa	; 0x19fa <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    22b4:	1a 82       	std	Y+2, r1	; 0x02
    22b6:	1c c0       	rjmp	.+56     	; 0x22f0 <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    22b8:	82 e0       	ldi	r24, 0x02	; 2
    22ba:	6a 81       	ldd	r22, Y+2	; 0x02
    22bc:	0e 94 1e 0c 	call	0x183c	; 0x183c <GPIO_readPin>
    22c0:	88 23       	and	r24, r24
    22c2:	99 f4       	brne	.+38     	; 0x22ea <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    22c4:	8a 81       	ldd	r24, Y+2	; 0x02
    22c6:	88 2f       	mov	r24, r24
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	88 0f       	add	r24, r24
    22cc:	99 1f       	adc	r25, r25
    22ce:	88 0f       	add	r24, r24
    22d0:	99 1f       	adc	r25, r25
    22d2:	98 2f       	mov	r25, r24
    22d4:	8b 81       	ldd	r24, Y+3	; 0x03
    22d6:	89 0f       	add	r24, r25
    22d8:	8f 5f       	subi	r24, 0xFF	; 255
    22da:	0e 94 83 11 	call	0x2306	; 0x2306 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    22de:	0f 90       	pop	r0
    22e0:	0f 90       	pop	r0
    22e2:	0f 90       	pop	r0
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    22ea:	8a 81       	ldd	r24, Y+2	; 0x02
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	8a 83       	std	Y+2, r24	; 0x02
    22f0:	8a 81       	ldd	r24, Y+2	; 0x02
    22f2:	84 30       	cpi	r24, 0x04	; 4
    22f4:	08 f3       	brcs	.-62     	; 0x22b8 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    22f6:	8b 81       	ldd	r24, Y+3	; 0x03
    22f8:	8f 5f       	subi	r24, 0xFF	; 255
    22fa:	8b 83       	std	Y+3, r24	; 0x03
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	84 30       	cpi	r24, 0x04	; 4
    2300:	08 f4       	brcc	.+2      	; 0x2304 <KEYPAD_getPressedKey+0xa0>
    2302:	b9 cf       	rjmp	.-142    	; 0x2276 <KEYPAD_getPressedKey+0x12>
    2304:	b6 cf       	rjmp	.-148    	; 0x2272 <KEYPAD_getPressedKey+0xe>

00002306 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2306:	df 93       	push	r29
    2308:	cf 93       	push	r28
    230a:	00 d0       	rcall	.+0      	; 0x230c <KEYPAD_4x4_adjustKeyNumber+0x6>
    230c:	00 d0       	rcall	.+0      	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x8>
    230e:	cd b7       	in	r28, 0x3d	; 61
    2310:	de b7       	in	r29, 0x3e	; 62
    2312:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2314:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2316:	8a 81       	ldd	r24, Y+2	; 0x02
    2318:	28 2f       	mov	r18, r24
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	3c 83       	std	Y+4, r19	; 0x04
    231e:	2b 83       	std	Y+3, r18	; 0x03
    2320:	8b 81       	ldd	r24, Y+3	; 0x03
    2322:	9c 81       	ldd	r25, Y+4	; 0x04
    2324:	88 30       	cpi	r24, 0x08	; 8
    2326:	91 05       	cpc	r25, r1
    2328:	09 f4       	brne	.+2      	; 0x232c <KEYPAD_4x4_adjustKeyNumber+0x26>
    232a:	70 c0       	rjmp	.+224    	; 0x240c <KEYPAD_4x4_adjustKeyNumber+0x106>
    232c:	2b 81       	ldd	r18, Y+3	; 0x03
    232e:	3c 81       	ldd	r19, Y+4	; 0x04
    2330:	29 30       	cpi	r18, 0x09	; 9
    2332:	31 05       	cpc	r19, r1
    2334:	5c f5       	brge	.+86     	; 0x238c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2336:	8b 81       	ldd	r24, Y+3	; 0x03
    2338:	9c 81       	ldd	r25, Y+4	; 0x04
    233a:	84 30       	cpi	r24, 0x04	; 4
    233c:	91 05       	cpc	r25, r1
    233e:	09 f4       	brne	.+2      	; 0x2342 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2340:	59 c0       	rjmp	.+178    	; 0x23f4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2342:	2b 81       	ldd	r18, Y+3	; 0x03
    2344:	3c 81       	ldd	r19, Y+4	; 0x04
    2346:	25 30       	cpi	r18, 0x05	; 5
    2348:	31 05       	cpc	r19, r1
    234a:	9c f4       	brge	.+38     	; 0x2372 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	82 30       	cpi	r24, 0x02	; 2
    2352:	91 05       	cpc	r25, r1
    2354:	09 f4       	brne	.+2      	; 0x2358 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2356:	48 c0       	rjmp	.+144    	; 0x23e8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2358:	2b 81       	ldd	r18, Y+3	; 0x03
    235a:	3c 81       	ldd	r19, Y+4	; 0x04
    235c:	23 30       	cpi	r18, 0x03	; 3
    235e:	31 05       	cpc	r19, r1
    2360:	0c f0       	brlt	.+2      	; 0x2364 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2362:	45 c0       	rjmp	.+138    	; 0x23ee <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2364:	8b 81       	ldd	r24, Y+3	; 0x03
    2366:	9c 81       	ldd	r25, Y+4	; 0x04
    2368:	81 30       	cpi	r24, 0x01	; 1
    236a:	91 05       	cpc	r25, r1
    236c:	09 f4       	brne	.+2      	; 0x2370 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    236e:	39 c0       	rjmp	.+114    	; 0x23e2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2370:	67 c0       	rjmp	.+206    	; 0x2440 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2372:	2b 81       	ldd	r18, Y+3	; 0x03
    2374:	3c 81       	ldd	r19, Y+4	; 0x04
    2376:	26 30       	cpi	r18, 0x06	; 6
    2378:	31 05       	cpc	r19, r1
    237a:	09 f4       	brne	.+2      	; 0x237e <KEYPAD_4x4_adjustKeyNumber+0x78>
    237c:	41 c0       	rjmp	.+130    	; 0x2400 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    237e:	8b 81       	ldd	r24, Y+3	; 0x03
    2380:	9c 81       	ldd	r25, Y+4	; 0x04
    2382:	87 30       	cpi	r24, 0x07	; 7
    2384:	91 05       	cpc	r25, r1
    2386:	0c f0       	brlt	.+2      	; 0x238a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2388:	3e c0       	rjmp	.+124    	; 0x2406 <KEYPAD_4x4_adjustKeyNumber+0x100>
    238a:	37 c0       	rjmp	.+110    	; 0x23fa <KEYPAD_4x4_adjustKeyNumber+0xf4>
    238c:	2b 81       	ldd	r18, Y+3	; 0x03
    238e:	3c 81       	ldd	r19, Y+4	; 0x04
    2390:	2c 30       	cpi	r18, 0x0C	; 12
    2392:	31 05       	cpc	r19, r1
    2394:	09 f4       	brne	.+2      	; 0x2398 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2396:	46 c0       	rjmp	.+140    	; 0x2424 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	8d 30       	cpi	r24, 0x0D	; 13
    239e:	91 05       	cpc	r25, r1
    23a0:	5c f4       	brge	.+22     	; 0x23b8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23a2:	2b 81       	ldd	r18, Y+3	; 0x03
    23a4:	3c 81       	ldd	r19, Y+4	; 0x04
    23a6:	2a 30       	cpi	r18, 0x0A	; 10
    23a8:	31 05       	cpc	r19, r1
    23aa:	b1 f1       	breq	.+108    	; 0x2418 <KEYPAD_4x4_adjustKeyNumber+0x112>
    23ac:	8b 81       	ldd	r24, Y+3	; 0x03
    23ae:	9c 81       	ldd	r25, Y+4	; 0x04
    23b0:	8b 30       	cpi	r24, 0x0B	; 11
    23b2:	91 05       	cpc	r25, r1
    23b4:	a4 f5       	brge	.+104    	; 0x241e <KEYPAD_4x4_adjustKeyNumber+0x118>
    23b6:	2d c0       	rjmp	.+90     	; 0x2412 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23b8:	2b 81       	ldd	r18, Y+3	; 0x03
    23ba:	3c 81       	ldd	r19, Y+4	; 0x04
    23bc:	2e 30       	cpi	r18, 0x0E	; 14
    23be:	31 05       	cpc	r19, r1
    23c0:	b9 f1       	breq	.+110    	; 0x2430 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23c2:	8b 81       	ldd	r24, Y+3	; 0x03
    23c4:	9c 81       	ldd	r25, Y+4	; 0x04
    23c6:	8e 30       	cpi	r24, 0x0E	; 14
    23c8:	91 05       	cpc	r25, r1
    23ca:	7c f1       	brlt	.+94     	; 0x242a <KEYPAD_4x4_adjustKeyNumber+0x124>
    23cc:	2b 81       	ldd	r18, Y+3	; 0x03
    23ce:	3c 81       	ldd	r19, Y+4	; 0x04
    23d0:	2f 30       	cpi	r18, 0x0F	; 15
    23d2:	31 05       	cpc	r19, r1
    23d4:	79 f1       	breq	.+94     	; 0x2434 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23d6:	8b 81       	ldd	r24, Y+3	; 0x03
    23d8:	9c 81       	ldd	r25, Y+4	; 0x04
    23da:	80 31       	cpi	r24, 0x10	; 16
    23dc:	91 05       	cpc	r25, r1
    23de:	69 f1       	breq	.+90     	; 0x243a <KEYPAD_4x4_adjustKeyNumber+0x134>
    23e0:	2f c0       	rjmp	.+94     	; 0x2440 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    23e2:	87 e0       	ldi	r24, 0x07	; 7
    23e4:	89 83       	std	Y+1, r24	; 0x01
    23e6:	2e c0       	rjmp	.+92     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    23e8:	88 e0       	ldi	r24, 0x08	; 8
    23ea:	89 83       	std	Y+1, r24	; 0x01
    23ec:	2b c0       	rjmp	.+86     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    23ee:	89 e0       	ldi	r24, 0x09	; 9
    23f0:	89 83       	std	Y+1, r24	; 0x01
    23f2:	28 c0       	rjmp	.+80     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    23f4:	85 e2       	ldi	r24, 0x25	; 37
    23f6:	89 83       	std	Y+1, r24	; 0x01
    23f8:	25 c0       	rjmp	.+74     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    23fa:	84 e0       	ldi	r24, 0x04	; 4
    23fc:	89 83       	std	Y+1, r24	; 0x01
    23fe:	22 c0       	rjmp	.+68     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2400:	85 e0       	ldi	r24, 0x05	; 5
    2402:	89 83       	std	Y+1, r24	; 0x01
    2404:	1f c0       	rjmp	.+62     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2406:	86 e0       	ldi	r24, 0x06	; 6
    2408:	89 83       	std	Y+1, r24	; 0x01
    240a:	1c c0       	rjmp	.+56     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    240c:	8a e2       	ldi	r24, 0x2A	; 42
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	19 c0       	rjmp	.+50     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	16 c0       	rjmp	.+44     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    2418:	82 e0       	ldi	r24, 0x02	; 2
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	13 c0       	rjmp	.+38     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    241e:	83 e0       	ldi	r24, 0x03	; 3
    2420:	89 83       	std	Y+1, r24	; 0x01
    2422:	10 c0       	rjmp	.+32     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2424:	8d e2       	ldi	r24, 0x2D	; 45
    2426:	89 83       	std	Y+1, r24	; 0x01
    2428:	0d c0       	rjmp	.+26     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    242a:	8d e0       	ldi	r24, 0x0D	; 13
    242c:	89 83       	std	Y+1, r24	; 0x01
    242e:	0a c0       	rjmp	.+20     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2430:	19 82       	std	Y+1, r1	; 0x01
    2432:	08 c0       	rjmp	.+16     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2434:	8d e3       	ldi	r24, 0x3D	; 61
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	05 c0       	rjmp	.+10     	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    243a:	8b e2       	ldi	r24, 0x2B	; 43
    243c:	89 83       	std	Y+1, r24	; 0x01
    243e:	02 c0       	rjmp	.+4      	; 0x2444 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2444:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2446:	0f 90       	pop	r0
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	cf 91       	pop	r28
    2450:	df 91       	pop	r29
    2452:	08 95       	ret

00002454 <__vector_9>:
static volatile void (*g_callBackPtr)(void)=NULL_PTR;

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
ISR(TIMER0_OVF_vect){
    2454:	1f 92       	push	r1
    2456:	0f 92       	push	r0
    2458:	0f b6       	in	r0, 0x3f	; 63
    245a:	0f 92       	push	r0
    245c:	11 24       	eor	r1, r1
    245e:	2f 93       	push	r18
    2460:	3f 93       	push	r19
    2462:	4f 93       	push	r20
    2464:	5f 93       	push	r21
    2466:	6f 93       	push	r22
    2468:	7f 93       	push	r23
    246a:	8f 93       	push	r24
    246c:	9f 93       	push	r25
    246e:	af 93       	push	r26
    2470:	bf 93       	push	r27
    2472:	ef 93       	push	r30
    2474:	ff 93       	push	r31
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the edge is detected */
	if(g_callBackPtr !=NULL_PTR){
    247e:	80 91 ef 00 	lds	r24, 0x00EF
    2482:	90 91 f0 00 	lds	r25, 0x00F0
    2486:	00 97       	sbiw	r24, 0x00	; 0
    2488:	29 f0       	breq	.+10     	; 0x2494 <__vector_9+0x40>
		g_callBackPtr();
    248a:	e0 91 ef 00 	lds	r30, 0x00EF
    248e:	f0 91 f0 00 	lds	r31, 0x00F0
    2492:	09 95       	icall
	}
}
    2494:	cf 91       	pop	r28
    2496:	df 91       	pop	r29
    2498:	ff 91       	pop	r31
    249a:	ef 91       	pop	r30
    249c:	bf 91       	pop	r27
    249e:	af 91       	pop	r26
    24a0:	9f 91       	pop	r25
    24a2:	8f 91       	pop	r24
    24a4:	7f 91       	pop	r23
    24a6:	6f 91       	pop	r22
    24a8:	5f 91       	pop	r21
    24aa:	4f 91       	pop	r20
    24ac:	3f 91       	pop	r19
    24ae:	2f 91       	pop	r18
    24b0:	0f 90       	pop	r0
    24b2:	0f be       	out	0x3f, r0	; 63
    24b4:	0f 90       	pop	r0
    24b6:	1f 90       	pop	r1
    24b8:	18 95       	reti

000024ba <__vector_19>:
ISR(TIMER0_COMP_vect){
    24ba:	1f 92       	push	r1
    24bc:	0f 92       	push	r0
    24be:	0f b6       	in	r0, 0x3f	; 63
    24c0:	0f 92       	push	r0
    24c2:	11 24       	eor	r1, r1
    24c4:	2f 93       	push	r18
    24c6:	3f 93       	push	r19
    24c8:	4f 93       	push	r20
    24ca:	5f 93       	push	r21
    24cc:	6f 93       	push	r22
    24ce:	7f 93       	push	r23
    24d0:	8f 93       	push	r24
    24d2:	9f 93       	push	r25
    24d4:	af 93       	push	r26
    24d6:	bf 93       	push	r27
    24d8:	ef 93       	push	r30
    24da:	ff 93       	push	r31
    24dc:	df 93       	push	r29
    24de:	cf 93       	push	r28
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
	/* Call the Call Back function in the application after the edge is detected */
	if(g_callBackPtr !=NULL_PTR){
    24e4:	80 91 ef 00 	lds	r24, 0x00EF
    24e8:	90 91 f0 00 	lds	r25, 0x00F0
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	29 f0       	breq	.+10     	; 0x24fa <__vector_19+0x40>
		g_callBackPtr();
    24f0:	e0 91 ef 00 	lds	r30, 0x00EF
    24f4:	f0 91 f0 00 	lds	r31, 0x00F0
    24f8:	09 95       	icall
	}
}
    24fa:	cf 91       	pop	r28
    24fc:	df 91       	pop	r29
    24fe:	ff 91       	pop	r31
    2500:	ef 91       	pop	r30
    2502:	bf 91       	pop	r27
    2504:	af 91       	pop	r26
    2506:	9f 91       	pop	r25
    2508:	8f 91       	pop	r24
    250a:	7f 91       	pop	r23
    250c:	6f 91       	pop	r22
    250e:	5f 91       	pop	r21
    2510:	4f 91       	pop	r20
    2512:	3f 91       	pop	r19
    2514:	2f 91       	pop	r18
    2516:	0f 90       	pop	r0
    2518:	0f be       	out	0x3f, r0	; 63
    251a:	0f 90       	pop	r0
    251c:	1f 90       	pop	r1
    251e:	18 95       	reti

00002520 <TIMER0_init>:
 * 	2. Set the prescaler.
 * 	3. Enable the interrupt for compare or for overflow mode depending on what is the mode of the timer0.
 * 	4. set the initial value for the timer0
 * 	5. set the compare value for timer0 if operating on compare mode
 */
void TIMER0_init(const Timer0_ConfigType* Config_Ptr){
    2520:	df 93       	push	r29
    2522:	cf 93       	push	r28
    2524:	00 d0       	rcall	.+0      	; 0x2526 <TIMER0_init+0x6>
    2526:	cd b7       	in	r28, 0x3d	; 61
    2528:	de b7       	in	r29, 0x3e	; 62
    252a:	9a 83       	std	Y+2, r25	; 0x02
    252c:	89 83       	std	Y+1, r24	; 0x01
	TCCR0 |=(1<<FOC0); /* set FOC0 cause we are using non PWM mode*/
    252e:	a3 e5       	ldi	r26, 0x53	; 83
    2530:	b0 e0       	ldi	r27, 0x00	; 0
    2532:	e3 e5       	ldi	r30, 0x53	; 83
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 68       	ori	r24, 0x80	; 128
    253a:	8c 93       	st	X, r24
	TCCR0 =(TCCR0 &0XB7) | ((Config_Ptr->Mode)<<WGM01); /* enable WGM01 if we are using compare mode*/
    253c:	a3 e5       	ldi	r26, 0x53	; 83
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e3 e5       	ldi	r30, 0x53	; 83
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	28 2f       	mov	r18, r24
    2548:	27 7b       	andi	r18, 0xB7	; 183
    254a:	e9 81       	ldd	r30, Y+1	; 0x01
    254c:	fa 81       	ldd	r31, Y+2	; 0x02
    254e:	80 81       	ld	r24, Z
    2550:	88 2f       	mov	r24, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	88 0f       	add	r24, r24
    2556:	99 1f       	adc	r25, r25
    2558:	88 0f       	add	r24, r24
    255a:	99 1f       	adc	r25, r25
    255c:	88 0f       	add	r24, r24
    255e:	99 1f       	adc	r25, r25
    2560:	82 2b       	or	r24, r18
    2562:	8c 93       	st	X, r24
	if((Config_Ptr->Mode)==Compare_Mode)
    2564:	e9 81       	ldd	r30, Y+1	; 0x01
    2566:	fa 81       	ldd	r31, Y+2	; 0x02
    2568:	80 81       	ld	r24, Z
    256a:	81 30       	cpi	r24, 0x01	; 1
    256c:	a1 f4       	brne	.+40     	; 0x2596 <TIMER0_init+0x76>
		TCCR0 = (TCCR0 &0XCF) |((Config_Ptr->Compare_Mode)<<4); /* configure the mode of compare such as toggle or clear when the compare matches*/
    256e:	a3 e5       	ldi	r26, 0x53	; 83
    2570:	b0 e0       	ldi	r27, 0x00	; 0
    2572:	e3 e5       	ldi	r30, 0x53	; 83
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	80 81       	ld	r24, Z
    2578:	28 2f       	mov	r18, r24
    257a:	2f 7c       	andi	r18, 0xCF	; 207
    257c:	e9 81       	ldd	r30, Y+1	; 0x01
    257e:	fa 81       	ldd	r31, Y+2	; 0x02
    2580:	81 81       	ldd	r24, Z+1	; 0x01
    2582:	88 2f       	mov	r24, r24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	82 95       	swap	r24
    2588:	92 95       	swap	r25
    258a:	90 7f       	andi	r25, 0xF0	; 240
    258c:	98 27       	eor	r25, r24
    258e:	80 7f       	andi	r24, 0xF0	; 240
    2590:	98 27       	eor	r25, r24
    2592:	82 2b       	or	r24, r18
    2594:	8c 93       	st	X, r24
	TCCR0 = (TCCR0 &0XF8) |((Config_Ptr->Prescale)); /*configuring the prescale */
    2596:	a3 e5       	ldi	r26, 0x53	; 83
    2598:	b0 e0       	ldi	r27, 0x00	; 0
    259a:	e3 e5       	ldi	r30, 0x53	; 83
    259c:	f0 e0       	ldi	r31, 0x00	; 0
    259e:	80 81       	ld	r24, Z
    25a0:	98 2f       	mov	r25, r24
    25a2:	98 7f       	andi	r25, 0xF8	; 248
    25a4:	e9 81       	ldd	r30, Y+1	; 0x01
    25a6:	fa 81       	ldd	r31, Y+2	; 0x02
    25a8:	82 81       	ldd	r24, Z+2	; 0x02
    25aa:	89 2b       	or	r24, r25
    25ac:	8c 93       	st	X, r24
	TCNT0=Config_Ptr->intial_value; /* configure the initial value */
    25ae:	a2 e5       	ldi	r26, 0x52	; 82
    25b0:	b0 e0       	ldi	r27, 0x00	; 0
    25b2:	e9 81       	ldd	r30, Y+1	; 0x01
    25b4:	fa 81       	ldd	r31, Y+2	; 0x02
    25b6:	83 81       	ldd	r24, Z+3	; 0x03
    25b8:	8c 93       	st	X, r24
	if((Config_Ptr->Mode)==Compare_Mode){
    25ba:	e9 81       	ldd	r30, Y+1	; 0x01
    25bc:	fa 81       	ldd	r31, Y+2	; 0x02
    25be:	80 81       	ld	r24, Z
    25c0:	81 30       	cpi	r24, 0x01	; 1
    25c2:	79 f4       	brne	.+30     	; 0x25e2 <TIMER0_init+0xc2>
		OCR0=Config_Ptr->compare_value;  /* configure the compare value if the timer is operating on compare mode only*/
    25c4:	ac e5       	ldi	r26, 0x5C	; 92
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	e9 81       	ldd	r30, Y+1	; 0x01
    25ca:	fa 81       	ldd	r31, Y+2	; 0x02
    25cc:	84 81       	ldd	r24, Z+4	; 0x04
    25ce:	8c 93       	st	X, r24
		TIMSK =(TIMSK&0XFC) |(1<<OCIE0); /* enable interrupt for compare mode */
    25d0:	a9 e5       	ldi	r26, 0x59	; 89
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e9 e5       	ldi	r30, 0x59	; 89
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	80 81       	ld	r24, Z
    25da:	8c 7f       	andi	r24, 0xFC	; 252
    25dc:	82 60       	ori	r24, 0x02	; 2
    25de:	8c 93       	st	X, r24
    25e0:	08 c0       	rjmp	.+16     	; 0x25f2 <TIMER0_init+0xd2>
	}
	else
		TIMSK =(TIMSK&0XFC) |(1<<TOIE0); /*enable interrupt for overflow mode*/
    25e2:	a9 e5       	ldi	r26, 0x59	; 89
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e9 e5       	ldi	r30, 0x59	; 89
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	8c 7f       	andi	r24, 0xFC	; 252
    25ee:	81 60       	ori	r24, 0x01	; 1
    25f0:	8c 93       	st	X, r24
}
    25f2:	0f 90       	pop	r0
    25f4:	0f 90       	pop	r0
    25f6:	cf 91       	pop	r28
    25f8:	df 91       	pop	r29
    25fa:	08 95       	ret

000025fc <TIMER0_SetCallBack>:
/*
 * Description: Function to set the Call Back function address.
 */
void TIMER0_SetCallBack(void(*a_ptr)(void)){
    25fc:	df 93       	push	r29
    25fe:	cf 93       	push	r28
    2600:	00 d0       	rcall	.+0      	; 0x2602 <TIMER0_SetCallBack+0x6>
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr=a_ptr; /* Save the address of the Call back function in a global variable */
    260a:	89 81       	ldd	r24, Y+1	; 0x01
    260c:	9a 81       	ldd	r25, Y+2	; 0x02
    260e:	90 93 f0 00 	sts	0x00F0, r25
    2612:	80 93 ef 00 	sts	0x00EF, r24
}
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	cf 91       	pop	r28
    261c:	df 91       	pop	r29
    261e:	08 95       	ret

00002620 <TIMER0_Deinit>:
void TIMER0_Deinit(){
    2620:	df 93       	push	r29
    2622:	cf 93       	push	r28
    2624:	cd b7       	in	r28, 0x3d	; 61
    2626:	de b7       	in	r29, 0x3e	; 62
	TCCR0=0;
    2628:	e3 e5       	ldi	r30, 0x53	; 83
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	10 82       	st	Z, r1
	TCNT0=0;
    262e:	e2 e5       	ldi	r30, 0x52	; 82
    2630:	f0 e0       	ldi	r31, 0x00	; 0
    2632:	10 82       	st	Z, r1
	OCR0=0;
    2634:	ec e5       	ldi	r30, 0x5C	; 92
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	10 82       	st	Z, r1
	TIMSK =(TIMSK&0XFC);
    263a:	a9 e5       	ldi	r26, 0x59	; 89
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e9 e5       	ldi	r30, 0x59	; 89
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	8c 7f       	andi	r24, 0xFC	; 252
    2646:	8c 93       	st	X, r24
}
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <UART_init>:

#include "uart.h"
#include "common_macros.h"
#include <avr/io.h>

void UART_init(const UART_ConfigType* Config_Ptr){
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	00 d0       	rcall	.+0      	; 0x2654 <UART_init+0x6>
    2654:	00 d0       	rcall	.+0      	; 0x2656 <UART_init+0x8>
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	9c 83       	std	Y+4, r25	; 0x04
    265c:	8b 83       	std	Y+3, r24	; 0x03
	uint16 myUbrr=0;
    265e:	1a 82       	std	Y+2, r1	; 0x02
    2660:	19 82       	std	Y+1, r1	; 0x01
	UCSRA |= (1<<U2X); /* U2X = 1 for double transmission speed */
    2662:	ab e2       	ldi	r26, 0x2B	; 43
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	eb e2       	ldi	r30, 0x2B	; 43
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	82 60       	ori	r24, 0x02	; 2
    266e:	8c 93       	st	X, r24
		 * RXEN  = 1 Receiver Enable
		 * RXEN  = 1 Transmitter Enable
		 * UCSZ2 = 0 For 8-bit data mode
		 * RXB8 & TXB8 will be configured later
		 ***********************************************************************/
	UCSRB =(1<<RXEN) |(1<<TXEN);
    2670:	ea e2       	ldi	r30, 0x2A	; 42
    2672:	f0 e0       	ldi	r31, 0x00	; 0
    2674:	88 e1       	ldi	r24, 0x18	; 24
    2676:	80 83       	st	Z, r24
	if(Config_Ptr->BitSize ==9)
    2678:	eb 81       	ldd	r30, Y+3	; 0x03
    267a:	fc 81       	ldd	r31, Y+4	; 0x04
    267c:	82 81       	ldd	r24, Z+2	; 0x02
    267e:	89 30       	cpi	r24, 0x09	; 9
    2680:	39 f4       	brne	.+14     	; 0x2690 <UART_init+0x42>
		UCSRB |=(1<<UCSZ2); /* UCSZ2 must be set in 9 Bit Mode */
    2682:	aa e2       	ldi	r26, 0x2A	; 42
    2684:	b0 e0       	ldi	r27, 0x00	; 0
    2686:	ea e2       	ldi	r30, 0x2A	; 42
    2688:	f0 e0       	ldi	r31, 0x00	; 0
    268a:	80 81       	ld	r24, Z
    268c:	84 60       	ori	r24, 0x04	; 4
    268e:	8c 93       	st	X, r24
	/************************** UCSRC Description **************************
		 * URSEL   = 1 The URSEL must be one when writing the UCSRC
		 * UMSEL   = 0 Asynchronous Operation
		 * UCPOL   = 0 Used with the Synchronous operation only
		 ***********************************************************************/
	UCSRC =(1<<URSEL);
    2690:	e0 e4       	ldi	r30, 0x40	; 64
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	80 e8       	ldi	r24, 0x80	; 128
    2696:	80 83       	st	Z, r24
	if(Config_Ptr->BitSize ==9){
    2698:	eb 81       	ldd	r30, Y+3	; 0x03
    269a:	fc 81       	ldd	r31, Y+4	; 0x04
    269c:	82 81       	ldd	r24, Z+2	; 0x02
    269e:	89 30       	cpi	r24, 0x09	; 9
    26a0:	91 f4       	brne	.+36     	; 0x26c6 <UART_init+0x78>
			UCSRC =(UCSRC &0XF9) |(((Config_Ptr->BitSize)-4)<<1); /* configuring the Bit Size*/
    26a2:	a0 e4       	ldi	r26, 0x40	; 64
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	e0 e4       	ldi	r30, 0x40	; 64
    26a8:	f0 e0       	ldi	r31, 0x00	; 0
    26aa:	80 81       	ld	r24, Z
    26ac:	28 2f       	mov	r18, r24
    26ae:	29 7f       	andi	r18, 0xF9	; 249
    26b0:	eb 81       	ldd	r30, Y+3	; 0x03
    26b2:	fc 81       	ldd	r31, Y+4	; 0x04
    26b4:	82 81       	ldd	r24, Z+2	; 0x02
    26b6:	88 2f       	mov	r24, r24
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	04 97       	sbiw	r24, 0x04	; 4
    26bc:	88 0f       	add	r24, r24
    26be:	99 1f       	adc	r25, r25
    26c0:	82 2b       	or	r24, r18
    26c2:	8c 93       	st	X, r24
    26c4:	10 c0       	rjmp	.+32     	; 0x26e6 <UART_init+0x98>
			//UCSRB |=(1<<UCSZ2); /* UCSZ2 must be set in 9 Bit Mode */
		}
		else
			UCSRC =(UCSRC &0XF9) |((Config_Ptr->BitSize)<<1); /* configuring the Bit Size*/
    26c6:	a0 e4       	ldi	r26, 0x40	; 64
    26c8:	b0 e0       	ldi	r27, 0x00	; 0
    26ca:	e0 e4       	ldi	r30, 0x40	; 64
    26cc:	f0 e0       	ldi	r31, 0x00	; 0
    26ce:	80 81       	ld	r24, Z
    26d0:	28 2f       	mov	r18, r24
    26d2:	29 7f       	andi	r18, 0xF9	; 249
    26d4:	eb 81       	ldd	r30, Y+3	; 0x03
    26d6:	fc 81       	ldd	r31, Y+4	; 0x04
    26d8:	82 81       	ldd	r24, Z+2	; 0x02
    26da:	88 2f       	mov	r24, r24
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	88 0f       	add	r24, r24
    26e0:	99 1f       	adc	r25, r25
    26e2:	82 2b       	or	r24, r18
    26e4:	8c 93       	st	X, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->ParityMode)<<4);/* configuring the Parity Mode*/
    26e6:	a0 e4       	ldi	r26, 0x40	; 64
    26e8:	b0 e0       	ldi	r27, 0x00	; 0
    26ea:	e0 e4       	ldi	r30, 0x40	; 64
    26ec:	f0 e0       	ldi	r31, 0x00	; 0
    26ee:	80 81       	ld	r24, Z
    26f0:	28 2f       	mov	r18, r24
    26f2:	2f 7c       	andi	r18, 0xCF	; 207
    26f4:	eb 81       	ldd	r30, Y+3	; 0x03
    26f6:	fc 81       	ldd	r31, Y+4	; 0x04
    26f8:	80 81       	ld	r24, Z
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	82 95       	swap	r24
    2700:	92 95       	swap	r25
    2702:	90 7f       	andi	r25, 0xF0	; 240
    2704:	98 27       	eor	r25, r24
    2706:	80 7f       	andi	r24, 0xF0	; 240
    2708:	98 27       	eor	r25, r24
    270a:	82 2b       	or	r24, r18
    270c:	8c 93       	st	X, r24
	UCSRC = (UCSRC &0XF7) |(Config_Ptr->StopBit<<3); /* configuring the number of Stop Bit */
    270e:	a0 e4       	ldi	r26, 0x40	; 64
    2710:	b0 e0       	ldi	r27, 0x00	; 0
    2712:	e0 e4       	ldi	r30, 0x40	; 64
    2714:	f0 e0       	ldi	r31, 0x00	; 0
    2716:	80 81       	ld	r24, Z
    2718:	28 2f       	mov	r18, r24
    271a:	27 7f       	andi	r18, 0xF7	; 247
    271c:	eb 81       	ldd	r30, Y+3	; 0x03
    271e:	fc 81       	ldd	r31, Y+4	; 0x04
    2720:	81 81       	ldd	r24, Z+1	; 0x01
    2722:	88 2f       	mov	r24, r24
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	88 0f       	add	r24, r24
    2728:	99 1f       	adc	r25, r25
    272a:	88 0f       	add	r24, r24
    272c:	99 1f       	adc	r25, r25
    272e:	88 0f       	add	r24, r24
    2730:	99 1f       	adc	r25, r25
    2732:	82 2b       	or	r24, r18
    2734:	8c 93       	st	X, r24

	/* Calculate the UBRR register value */
	myUbrr = (uint16)(((F_CPU / ((Config_Ptr->Baud_Rate) * 8UL))) - 1);
    2736:	eb 81       	ldd	r30, Y+3	; 0x03
    2738:	fc 81       	ldd	r31, Y+4	; 0x04
    273a:	83 81       	ldd	r24, Z+3	; 0x03
    273c:	94 81       	ldd	r25, Z+4	; 0x04
    273e:	a5 81       	ldd	r26, Z+5	; 0x05
    2740:	b6 81       	ldd	r27, Z+6	; 0x06
    2742:	88 0f       	add	r24, r24
    2744:	99 1f       	adc	r25, r25
    2746:	aa 1f       	adc	r26, r26
    2748:	bb 1f       	adc	r27, r27
    274a:	88 0f       	add	r24, r24
    274c:	99 1f       	adc	r25, r25
    274e:	aa 1f       	adc	r26, r26
    2750:	bb 1f       	adc	r27, r27
    2752:	88 0f       	add	r24, r24
    2754:	99 1f       	adc	r25, r25
    2756:	aa 1f       	adc	r26, r26
    2758:	bb 1f       	adc	r27, r27
    275a:	9c 01       	movw	r18, r24
    275c:	ad 01       	movw	r20, r26
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	94 eb       	ldi	r25, 0xB4	; 180
    2762:	a4 ec       	ldi	r26, 0xC4	; 196
    2764:	b4 e0       	ldi	r27, 0x04	; 4
    2766:	bc 01       	movw	r22, r24
    2768:	cd 01       	movw	r24, r26
    276a:	0e 94 60 14 	call	0x28c0	; 0x28c0 <__udivmodsi4>
    276e:	da 01       	movw	r26, r20
    2770:	c9 01       	movw	r24, r18
    2772:	01 97       	sbiw	r24, 0x01	; 1
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	89 83       	std	Y+1, r24	; 0x01
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRL = myUbrr;
    2778:	e9 e2       	ldi	r30, 0x29	; 41
    277a:	f0 e0       	ldi	r31, 0x00	; 0
    277c:	89 81       	ldd	r24, Y+1	; 0x01
    277e:	80 83       	st	Z, r24
	UBRRH = myUbrr>>8;
    2780:	e0 e4       	ldi	r30, 0x40	; 64
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	89 81       	ldd	r24, Y+1	; 0x01
    2786:	9a 81       	ldd	r25, Y+2	; 0x02
    2788:	89 2f       	mov	r24, r25
    278a:	99 27       	eor	r25, r25
    278c:	80 83       	st	Z, r24

}
    278e:	0f 90       	pop	r0
    2790:	0f 90       	pop	r0
    2792:	0f 90       	pop	r0
    2794:	0f 90       	pop	r0
    2796:	cf 91       	pop	r28
    2798:	df 91       	pop	r29
    279a:	08 95       	ret

0000279c <UART_sendByte>:

/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data){
    279c:	df 93       	push	r29
    279e:	cf 93       	push	r28
    27a0:	0f 92       	push	r0
    27a2:	cd b7       	in	r28, 0x3d	; 61
    27a4:	de b7       	in	r29, 0x3e	; 62
    27a6:	89 83       	std	Y+1, r24	; 0x01
	//UCSRB |= ((data<<8)<<TXB8); /*when using 9 bit mode , we have to put the 9th bit in TXB8 first*/
	/*
	* UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	* transmitting a new byte so wait until this flag is set to one
	*/
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    27a8:	eb e2       	ldi	r30, 0x2B	; 43
    27aa:	f0 e0       	ldi	r31, 0x00	; 0
    27ac:	80 81       	ld	r24, Z
    27ae:	88 2f       	mov	r24, r24
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	80 72       	andi	r24, 0x20	; 32
    27b4:	90 70       	andi	r25, 0x00	; 0
    27b6:	00 97       	sbiw	r24, 0x00	; 0
    27b8:	b9 f3       	breq	.-18     	; 0x27a8 <UART_sendByte+0xc>
	/*
	* Put the required data in the UDR register and it also clear the UDRE flag as
	* the UDR register is not empty now
	*/
	UDR=data;
    27ba:	ec e2       	ldi	r30, 0x2C	; 44
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	89 81       	ldd	r24, Y+1	; 0x01
    27c0:	80 83       	st	Z, r24
}
    27c2:	0f 90       	pop	r0
    27c4:	cf 91       	pop	r28
    27c6:	df 91       	pop	r29
    27c8:	08 95       	ret

000027ca <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void){
    27ca:	df 93       	push	r29
    27cc:	cf 93       	push	r28
    27ce:	cd b7       	in	r28, 0x3d	; 61
    27d0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    27d2:	eb e2       	ldi	r30, 0x2B	; 43
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	88 23       	and	r24, r24
    27da:	dc f7       	brge	.-10     	; 0x27d2 <UART_recieveByte+0x8>
	/*
	* Read the received data from the Rx buffer (UDR)
	* The RXC flag will be cleared after read the data
	*/
	return UDR;
    27dc:	ec e2       	ldi	r30, 0x2C	; 44
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
}
    27e2:	cf 91       	pop	r28
    27e4:	df 91       	pop	r29
    27e6:	08 95       	ret

000027e8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    27e8:	df 93       	push	r29
    27ea:	cf 93       	push	r28
    27ec:	00 d0       	rcall	.+0      	; 0x27ee <UART_sendString+0x6>
    27ee:	0f 92       	push	r0
    27f0:	cd b7       	in	r28, 0x3d	; 61
    27f2:	de b7       	in	r29, 0x3e	; 62
    27f4:	9b 83       	std	Y+3, r25	; 0x03
    27f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    27f8:	19 82       	std	Y+1, r1	; 0x01
    27fa:	0e c0       	rjmp	.+28     	; 0x2818 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    27fc:	89 81       	ldd	r24, Y+1	; 0x01
    27fe:	28 2f       	mov	r18, r24
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	8a 81       	ldd	r24, Y+2	; 0x02
    2804:	9b 81       	ldd	r25, Y+3	; 0x03
    2806:	fc 01       	movw	r30, r24
    2808:	e2 0f       	add	r30, r18
    280a:	f3 1f       	adc	r31, r19
    280c:	80 81       	ld	r24, Z
    280e:	0e 94 ce 13 	call	0x279c	; 0x279c <UART_sendByte>
		i++;
    2812:	89 81       	ldd	r24, Y+1	; 0x01
    2814:	8f 5f       	subi	r24, 0xFF	; 255
    2816:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2818:	89 81       	ldd	r24, Y+1	; 0x01
    281a:	28 2f       	mov	r18, r24
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	8a 81       	ldd	r24, Y+2	; 0x02
    2820:	9b 81       	ldd	r25, Y+3	; 0x03
    2822:	fc 01       	movw	r30, r24
    2824:	e2 0f       	add	r30, r18
    2826:	f3 1f       	adc	r31, r19
    2828:	80 81       	ld	r24, Z
    282a:	88 23       	and	r24, r24
    282c:	39 f7       	brne	.-50     	; 0x27fc <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	cf 91       	pop	r28
    2836:	df 91       	pop	r29
    2838:	08 95       	ret

0000283a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    283a:	0f 93       	push	r16
    283c:	1f 93       	push	r17
    283e:	df 93       	push	r29
    2840:	cf 93       	push	r28
    2842:	00 d0       	rcall	.+0      	; 0x2844 <UART_receiveString+0xa>
    2844:	0f 92       	push	r0
    2846:	cd b7       	in	r28, 0x3d	; 61
    2848:	de b7       	in	r29, 0x3e	; 62
    284a:	9b 83       	std	Y+3, r25	; 0x03
    284c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    284e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	28 2f       	mov	r18, r24
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	8a 81       	ldd	r24, Y+2	; 0x02
    2858:	9b 81       	ldd	r25, Y+3	; 0x03
    285a:	8c 01       	movw	r16, r24
    285c:	02 0f       	add	r16, r18
    285e:	13 1f       	adc	r17, r19
    2860:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    2864:	f8 01       	movw	r30, r16
    2866:	80 83       	st	Z, r24
    2868:	0f c0       	rjmp	.+30     	; 0x2888 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    286a:	89 81       	ldd	r24, Y+1	; 0x01
    286c:	8f 5f       	subi	r24, 0xFF	; 255
    286e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2870:	89 81       	ldd	r24, Y+1	; 0x01
    2872:	28 2f       	mov	r18, r24
    2874:	30 e0       	ldi	r19, 0x00	; 0
    2876:	8a 81       	ldd	r24, Y+2	; 0x02
    2878:	9b 81       	ldd	r25, Y+3	; 0x03
    287a:	8c 01       	movw	r16, r24
    287c:	02 0f       	add	r16, r18
    287e:	13 1f       	adc	r17, r19
    2880:	0e 94 e5 13 	call	0x27ca	; 0x27ca <UART_recieveByte>
    2884:	f8 01       	movw	r30, r16
    2886:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2888:	89 81       	ldd	r24, Y+1	; 0x01
    288a:	28 2f       	mov	r18, r24
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	8a 81       	ldd	r24, Y+2	; 0x02
    2890:	9b 81       	ldd	r25, Y+3	; 0x03
    2892:	fc 01       	movw	r30, r24
    2894:	e2 0f       	add	r30, r18
    2896:	f3 1f       	adc	r31, r19
    2898:	80 81       	ld	r24, Z
    289a:	83 32       	cpi	r24, 0x23	; 35
    289c:	31 f7       	brne	.-52     	; 0x286a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    289e:	89 81       	ldd	r24, Y+1	; 0x01
    28a0:	28 2f       	mov	r18, r24
    28a2:	30 e0       	ldi	r19, 0x00	; 0
    28a4:	8a 81       	ldd	r24, Y+2	; 0x02
    28a6:	9b 81       	ldd	r25, Y+3	; 0x03
    28a8:	fc 01       	movw	r30, r24
    28aa:	e2 0f       	add	r30, r18
    28ac:	f3 1f       	adc	r31, r19
    28ae:	10 82       	st	Z, r1
}
    28b0:	0f 90       	pop	r0
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	08 95       	ret

000028c0 <__udivmodsi4>:
    28c0:	a1 e2       	ldi	r26, 0x21	; 33
    28c2:	1a 2e       	mov	r1, r26
    28c4:	aa 1b       	sub	r26, r26
    28c6:	bb 1b       	sub	r27, r27
    28c8:	fd 01       	movw	r30, r26
    28ca:	0d c0       	rjmp	.+26     	; 0x28e6 <__udivmodsi4_ep>

000028cc <__udivmodsi4_loop>:
    28cc:	aa 1f       	adc	r26, r26
    28ce:	bb 1f       	adc	r27, r27
    28d0:	ee 1f       	adc	r30, r30
    28d2:	ff 1f       	adc	r31, r31
    28d4:	a2 17       	cp	r26, r18
    28d6:	b3 07       	cpc	r27, r19
    28d8:	e4 07       	cpc	r30, r20
    28da:	f5 07       	cpc	r31, r21
    28dc:	20 f0       	brcs	.+8      	; 0x28e6 <__udivmodsi4_ep>
    28de:	a2 1b       	sub	r26, r18
    28e0:	b3 0b       	sbc	r27, r19
    28e2:	e4 0b       	sbc	r30, r20
    28e4:	f5 0b       	sbc	r31, r21

000028e6 <__udivmodsi4_ep>:
    28e6:	66 1f       	adc	r22, r22
    28e8:	77 1f       	adc	r23, r23
    28ea:	88 1f       	adc	r24, r24
    28ec:	99 1f       	adc	r25, r25
    28ee:	1a 94       	dec	r1
    28f0:	69 f7       	brne	.-38     	; 0x28cc <__udivmodsi4_loop>
    28f2:	60 95       	com	r22
    28f4:	70 95       	com	r23
    28f6:	80 95       	com	r24
    28f8:	90 95       	com	r25
    28fa:	9b 01       	movw	r18, r22
    28fc:	ac 01       	movw	r20, r24
    28fe:	bd 01       	movw	r22, r26
    2900:	cf 01       	movw	r24, r30
    2902:	08 95       	ret

00002904 <__prologue_saves__>:
    2904:	2f 92       	push	r2
    2906:	3f 92       	push	r3
    2908:	4f 92       	push	r4
    290a:	5f 92       	push	r5
    290c:	6f 92       	push	r6
    290e:	7f 92       	push	r7
    2910:	8f 92       	push	r8
    2912:	9f 92       	push	r9
    2914:	af 92       	push	r10
    2916:	bf 92       	push	r11
    2918:	cf 92       	push	r12
    291a:	df 92       	push	r13
    291c:	ef 92       	push	r14
    291e:	ff 92       	push	r15
    2920:	0f 93       	push	r16
    2922:	1f 93       	push	r17
    2924:	cf 93       	push	r28
    2926:	df 93       	push	r29
    2928:	cd b7       	in	r28, 0x3d	; 61
    292a:	de b7       	in	r29, 0x3e	; 62
    292c:	ca 1b       	sub	r28, r26
    292e:	db 0b       	sbc	r29, r27
    2930:	0f b6       	in	r0, 0x3f	; 63
    2932:	f8 94       	cli
    2934:	de bf       	out	0x3e, r29	; 62
    2936:	0f be       	out	0x3f, r0	; 63
    2938:	cd bf       	out	0x3d, r28	; 61
    293a:	09 94       	ijmp

0000293c <__epilogue_restores__>:
    293c:	2a 88       	ldd	r2, Y+18	; 0x12
    293e:	39 88       	ldd	r3, Y+17	; 0x11
    2940:	48 88       	ldd	r4, Y+16	; 0x10
    2942:	5f 84       	ldd	r5, Y+15	; 0x0f
    2944:	6e 84       	ldd	r6, Y+14	; 0x0e
    2946:	7d 84       	ldd	r7, Y+13	; 0x0d
    2948:	8c 84       	ldd	r8, Y+12	; 0x0c
    294a:	9b 84       	ldd	r9, Y+11	; 0x0b
    294c:	aa 84       	ldd	r10, Y+10	; 0x0a
    294e:	b9 84       	ldd	r11, Y+9	; 0x09
    2950:	c8 84       	ldd	r12, Y+8	; 0x08
    2952:	df 80       	ldd	r13, Y+7	; 0x07
    2954:	ee 80       	ldd	r14, Y+6	; 0x06
    2956:	fd 80       	ldd	r15, Y+5	; 0x05
    2958:	0c 81       	ldd	r16, Y+4	; 0x04
    295a:	1b 81       	ldd	r17, Y+3	; 0x03
    295c:	aa 81       	ldd	r26, Y+2	; 0x02
    295e:	b9 81       	ldd	r27, Y+1	; 0x01
    2960:	ce 0f       	add	r28, r30
    2962:	d1 1d       	adc	r29, r1
    2964:	0f b6       	in	r0, 0x3f	; 63
    2966:	f8 94       	cli
    2968:	de bf       	out	0x3e, r29	; 62
    296a:	0f be       	out	0x3f, r0	; 63
    296c:	cd bf       	out	0x3d, r28	; 61
    296e:	ed 01       	movw	r28, r26
    2970:	08 95       	ret

00002972 <itoa>:
    2972:	fb 01       	movw	r30, r22
    2974:	9f 01       	movw	r18, r30
    2976:	e8 94       	clt
    2978:	42 30       	cpi	r20, 0x02	; 2
    297a:	c4 f0       	brlt	.+48     	; 0x29ac <itoa+0x3a>
    297c:	45 32       	cpi	r20, 0x25	; 37
    297e:	b4 f4       	brge	.+44     	; 0x29ac <itoa+0x3a>
    2980:	4a 30       	cpi	r20, 0x0A	; 10
    2982:	29 f4       	brne	.+10     	; 0x298e <itoa+0x1c>
    2984:	97 fb       	bst	r25, 7
    2986:	1e f4       	brtc	.+6      	; 0x298e <itoa+0x1c>
    2988:	90 95       	com	r25
    298a:	81 95       	neg	r24
    298c:	9f 4f       	sbci	r25, 0xFF	; 255
    298e:	64 2f       	mov	r22, r20
    2990:	77 27       	eor	r23, r23
    2992:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodhi4>
    2996:	80 5d       	subi	r24, 0xD0	; 208
    2998:	8a 33       	cpi	r24, 0x3A	; 58
    299a:	0c f0       	brlt	.+2      	; 0x299e <itoa+0x2c>
    299c:	89 5d       	subi	r24, 0xD9	; 217
    299e:	81 93       	st	Z+, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	00 97       	sbiw	r24, 0x00	; 0
    29a4:	a1 f7       	brne	.-24     	; 0x298e <itoa+0x1c>
    29a6:	16 f4       	brtc	.+4      	; 0x29ac <itoa+0x3a>
    29a8:	5d e2       	ldi	r21, 0x2D	; 45
    29aa:	51 93       	st	Z+, r21
    29ac:	10 82       	st	Z, r1
    29ae:	c9 01       	movw	r24, r18
    29b0:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <strrev>

000029b4 <strrev>:
    29b4:	dc 01       	movw	r26, r24
    29b6:	fc 01       	movw	r30, r24
    29b8:	67 2f       	mov	r22, r23
    29ba:	71 91       	ld	r23, Z+
    29bc:	77 23       	and	r23, r23
    29be:	e1 f7       	brne	.-8      	; 0x29b8 <strrev+0x4>
    29c0:	32 97       	sbiw	r30, 0x02	; 2
    29c2:	04 c0       	rjmp	.+8      	; 0x29cc <strrev+0x18>
    29c4:	7c 91       	ld	r23, X
    29c6:	6d 93       	st	X+, r22
    29c8:	70 83       	st	Z, r23
    29ca:	62 91       	ld	r22, -Z
    29cc:	ae 17       	cp	r26, r30
    29ce:	bf 07       	cpc	r27, r31
    29d0:	c8 f3       	brcs	.-14     	; 0x29c4 <strrev+0x10>
    29d2:	08 95       	ret

000029d4 <__udivmodhi4>:
    29d4:	aa 1b       	sub	r26, r26
    29d6:	bb 1b       	sub	r27, r27
    29d8:	51 e1       	ldi	r21, 0x11	; 17
    29da:	07 c0       	rjmp	.+14     	; 0x29ea <__udivmodhi4_ep>

000029dc <__udivmodhi4_loop>:
    29dc:	aa 1f       	adc	r26, r26
    29de:	bb 1f       	adc	r27, r27
    29e0:	a6 17       	cp	r26, r22
    29e2:	b7 07       	cpc	r27, r23
    29e4:	10 f0       	brcs	.+4      	; 0x29ea <__udivmodhi4_ep>
    29e6:	a6 1b       	sub	r26, r22
    29e8:	b7 0b       	sbc	r27, r23

000029ea <__udivmodhi4_ep>:
    29ea:	88 1f       	adc	r24, r24
    29ec:	99 1f       	adc	r25, r25
    29ee:	5a 95       	dec	r21
    29f0:	a9 f7       	brne	.-22     	; 0x29dc <__udivmodhi4_loop>
    29f2:	80 95       	com	r24
    29f4:	90 95       	com	r25
    29f6:	bc 01       	movw	r22, r24
    29f8:	cd 01       	movw	r24, r26
    29fa:	08 95       	ret

000029fc <_exit>:
    29fc:	f8 94       	cli

000029fe <__stop_program>:
    29fe:	ff cf       	rjmp	.-2      	; 0x29fe <__stop_program>
